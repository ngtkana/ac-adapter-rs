(function() {var implementors = {
"accum":[["impl&lt;'a, T, F, I&gt; Freeze for <a class=\"struct\" href=\"accum/struct.Skipped.html\" title=\"struct accum::Skipped\">Skipped</a>&lt;'a, T, F, I&gt;<span class=\"where fmt-newline\">where\n    F: Freeze,\n    I: Freeze,\n    T: Freeze,</span>",1,["accum::Skipped"]]],
"avl_tree":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"avl_tree/struct.AvlTree.html\" title=\"struct avl_tree::AvlTree\">AvlTree</a>&lt;T&gt;",1,["avl_tree::AvlTree"]],["impl&lt;'a, T&gt; Freeze for <a class=\"struct\" href=\"avl_tree/struct.Iter.html\" title=\"struct avl_tree::Iter\">Iter</a>&lt;'a, T&gt;",1,["avl_tree::Iter"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"avl_tree/struct.IntoIter.html\" title=\"struct avl_tree::IntoIter\">IntoIter</a>&lt;T&gt;",1,["avl_tree::IntoIter"]]],
"bfs01":[["impl Freeze for <a class=\"enum\" href=\"bfs01/enum.Weight.html\" title=\"enum bfs01::Weight\">Weight</a>",1,["bfs01::Weight"]]],
"bitutils":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"bitutils/struct.Combinations.html\" title=\"struct bitutils::Combinations\">Combinations</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["bitutils::combinations::Combinations"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"bitutils/struct.Subsets.html\" title=\"struct bitutils::Subsets\">Subsets</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["bitutils::subsets::Subsets"]]],
"bitvec":[["impl Freeze for <a class=\"struct\" href=\"bitvec/struct.BitVec.html\" title=\"struct bitvec::BitVec\">BitVec</a>",1,["bitvec::BitVec"]],["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"bitvec/struct.Iter.html\" title=\"struct bitvec::Iter\">Iter</a>&lt;'a&gt;",1,["bitvec::Iter"]]],
"bsgs":[["impl&lt;T, Mul&gt; Freeze for <a class=\"struct\" href=\"bsgs/struct.Bsgs.html\" title=\"struct bsgs::Bsgs\">Bsgs</a>&lt;T, Mul&gt;<span class=\"where fmt-newline\">where\n    Mul: Freeze,\n    T: Freeze,</span>",1,["bsgs::Bsgs"]]],
"cht":[["impl Freeze for <a class=\"enum\" href=\"cht/enum.Convex.html\" title=\"enum cht::Convex\">Convex</a>",1,["cht::Convex"]],["impl Freeze for <a class=\"enum\" href=\"cht/enum.Concave.html\" title=\"enum cht::Concave\">Concave</a>",1,["cht::Concave"]],["impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"cht/struct.VecCht.html\" title=\"struct cht::VecCht\">VecCht</a>&lt;C&gt;",1,["cht::VecCht"]],["impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"cht/struct.BTreeCht.html\" title=\"struct cht::BTreeCht\">BTreeCht</a>&lt;C&gt;",1,["cht::BTreeCht"]],["impl Freeze for <a class=\"struct\" href=\"cht/struct.Quadratic.html\" title=\"struct cht::Quadratic\">Quadratic</a>",1,["cht::Quadratic"]]],
"dinic":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"dinic/struct.Dinic.html\" title=\"struct dinic::Dinic\">Dinic</a>&lt;T&gt;",1,["dinic::Dinic"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"dinic/struct.Edge.html\" title=\"struct dinic::Edge\">Edge</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["dinic::Edge"]],["impl Freeze for <a class=\"struct\" href=\"dinic/struct.EdgeKey.html\" title=\"struct dinic::EdgeKey\">EdgeKey</a>",1,["dinic::EdgeKey"]]],
"dual_segtree":[["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"dual_segtree/struct.DualSegtree.html\" title=\"struct dual_segtree::DualSegtree\">DualSegtree</a>&lt;O&gt;",1,["dual_segtree::DualSegtree"]]],
"erato":[["impl&lt;T, P&gt; Freeze for <a class=\"struct\" href=\"erato/struct.Unique.html\" title=\"struct erato::Unique\">Unique</a>&lt;T, P&gt;<span class=\"where fmt-newline\">where\n    P: Freeze,\n    T: Freeze,</span>",1,["erato::converters::Unique"]],["impl&lt;T, P&gt; Freeze for <a class=\"struct\" href=\"erato/struct.Rle.html\" title=\"struct erato::Rle\">Rle</a>&lt;T, P&gt;<span class=\"where fmt-newline\">where\n    P: Freeze,\n    T: Freeze,</span>",1,["erato::converters::Rle"]],["impl Freeze for <a class=\"struct\" href=\"erato/struct.LpdSieve.html\" title=\"struct erato::LpdSieve\">LpdSieve</a>",1,["erato::lpd_sieve::LpdSieve"]],["impl Freeze for <a class=\"struct\" href=\"erato/struct.Sieve.html\" title=\"struct erato::Sieve\">Sieve</a>",1,["erato::sieve::Sieve"]],["impl&lt;'a, S, T&gt; Freeze for <a class=\"struct\" href=\"erato/struct.PrimeNumbers.html\" title=\"struct erato::PrimeNumbers\">PrimeNumbers</a>&lt;'a, S, T&gt;",1,["erato::sieve_base::PrimeNumbers"]],["impl&lt;'a, T&gt; Freeze for <a class=\"struct\" href=\"erato/struct.PrimeFactorsByTrialDivision.html\" title=\"struct erato::PrimeFactorsByTrialDivision\">PrimeFactorsByTrialDivision</a>&lt;'a, T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["erato::sieve_base::PrimeFactorsByTrialDivision"]],["impl&lt;'a, T&gt; Freeze for <a class=\"struct\" href=\"erato/struct.PrimeFactorsByLookup.html\" title=\"struct erato::PrimeFactorsByLookup\">PrimeFactorsByLookup</a>&lt;'a, T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["erato::sieve_base::PrimeFactorsByLookup"]]],
"fp":[["impl&lt;const P: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.70.0/std/primitive.u64.html\">u64</a>&gt; Freeze for <a class=\"struct\" href=\"fp/struct.Factorial.html\" title=\"struct fp::Factorial\">Factorial</a>&lt;P&gt;",1,["fp::factorial::Factorial"]],["impl&lt;const P: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.70.0/std/primitive.u64.html\">u64</a>&gt; Freeze for <a class=\"struct\" href=\"fp/struct.Fp.html\" title=\"struct fp::Fp\">Fp</a>&lt;P&gt;",1,["fp::Fp"]]],
"gco":[["impl Freeze for <a class=\"struct\" href=\"gco/struct.Gco.html\" title=\"struct gco::Gco\">Gco</a>",1,["gco::Gco"]],["impl Freeze for <a class=\"struct\" href=\"gco/struct.GcoResult.html\" title=\"struct gco::GcoResult\">GcoResult</a>",1,["gco::GcoResult"]]],
"gridnei":[["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid0.html\" title=\"struct gridnei::Grid0\">Grid0</a>",1,["gridnei::Grid0"]],["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid1.html\" title=\"struct gridnei::Grid1\">Grid1</a>",1,["gridnei::Grid1"]],["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid2.html\" title=\"struct gridnei::Grid2\">Grid2</a>",1,["gridnei::Grid2"]],["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid3.html\" title=\"struct gridnei::Grid3\">Grid3</a>",1,["gridnei::Grid3"]],["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid4.html\" title=\"struct gridnei::Grid4\">Grid4</a>",1,["gridnei::Grid4"]],["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid5.html\" title=\"struct gridnei::Grid5\">Grid5</a>",1,["gridnei::Grid5"]],["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid6.html\" title=\"struct gridnei::Grid6\">Grid6</a>",1,["gridnei::Grid6"]],["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid7.html\" title=\"struct gridnei::Grid7\">Grid7</a>",1,["gridnei::Grid7"]],["impl Freeze for <a class=\"struct\" href=\"gridnei/struct.Grid8.html\" title=\"struct gridnei::Grid8\">Grid8</a>",1,["gridnei::Grid8"]],["impl&lt;I&gt; Freeze for <a class=\"struct\" href=\"gridnei/struct.Encode.html\" title=\"struct gridnei::Encode\">Encode</a>&lt;I&gt;<span class=\"where fmt-newline\">where\n    I: Freeze,</span>",1,["gridnei::Encode"]]],
"heap_slope_trick":[["impl Freeze for <a class=\"struct\" href=\"heap_slope_trick/struct.HeapSlopeTrick.html\" title=\"struct heap_slope_trick::HeapSlopeTrick\">HeapSlopeTrick</a>",1,["heap_slope_trick::HeapSlopeTrick"]],["impl Freeze for <a class=\"struct\" href=\"heap_slope_trick/struct.Summary.html\" title=\"struct heap_slope_trick::Summary\">Summary</a>",1,["heap_slope_trick::Summary"]]],
"heap_tricks":[["impl Freeze for <a class=\"struct\" href=\"heap_tricks/struct.Nop.html\" title=\"struct heap_tricks::Nop\">Nop</a>",1,["heap_tricks::Nop"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"heap_tricks/struct.Sum.html\" title=\"struct heap_tricks::Sum\">Sum</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["heap_tricks::Sum"]],["impl&lt;T, H&gt; Freeze for <a class=\"struct\" href=\"heap_tricks/struct.DoubleHeap.html\" title=\"struct heap_tricks::DoubleHeap\">DoubleHeap</a>&lt;T, H&gt;<span class=\"where fmt-newline\">where\n    H: Freeze,</span>",1,["heap_tricks::DoubleHeap"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"heap_tricks/struct.RemovableHeap.html\" title=\"struct heap_tricks::RemovableHeap\">RemovableHeap</a>&lt;T&gt;",1,["heap_tricks::RemovableHeap"]]],
"hld":[["impl Freeze for <a class=\"struct\" href=\"hld/struct.Hld.html\" title=\"struct hld::Hld\">Hld</a>",1,["hld::Hld"]],["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"hld/struct.PathSegments.html\" title=\"struct hld::PathSegments\">PathSegments</a>&lt;'a&gt;",1,["hld::PathSegments"]]],
"hopkarp":[["impl Freeze for <a class=\"struct\" href=\"hopkarp/struct.HopkarpResult.html\" title=\"struct hopkarp::HopkarpResult\">HopkarpResult</a>",1,["hopkarp::HopkarpResult"]]],
"hungarian":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"hungarian/struct.HungarianResult.html\" title=\"struct hungarian::HungarianResult\">HungarianResult</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["hungarian::HungarianResult"]]],
"interval_heap":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"interval_heap/struct.IntervalHeap.html\" title=\"struct interval_heap::IntervalHeap\">IntervalHeap</a>&lt;T&gt;",1,["interval_heap::IntervalHeap"]]],
"lazy_segbeats":[["impl&lt;T&gt; !Freeze for <a class=\"struct\" href=\"lazy_segbeats/struct.Segbeats.html\" title=\"struct lazy_segbeats::Segbeats\">Segbeats</a>&lt;T&gt;",1,["lazy_segbeats::Segbeats"]]],
"lazy_segtree":[["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"lazy_segtree/struct.LazySegtree.html\" title=\"struct lazy_segtree::LazySegtree\">LazySegtree</a>&lt;O&gt;",1,["lazy_segtree::LazySegtree"]]],
"lin_ineq":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"lin_ineq/struct.Interval.html\" title=\"struct lin_ineq::Interval\">Interval</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["lin_ineq::Interval"]]],
"link_cut_tree":[["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"link_cut_tree/struct.LinkCutTreeBase.html\" title=\"struct link_cut_tree::LinkCutTreeBase\">LinkCutTreeBase</a>&lt;O&gt;",1,["link_cut_tree::base::LinkCutTreeBase"]]],
"low_link":[["impl Freeze for <a class=\"struct\" href=\"low_link/struct.LowLink.html\" title=\"struct low_link::LowLink\">LowLink</a>",1,["low_link::LowLink"]]],
"mincost_flow":[["impl Freeze for <a class=\"struct\" href=\"mincost_flow/struct.Edge.html\" title=\"struct mincost_flow::Edge\">Edge</a>",1,["mincost_flow::Edge"]],["impl Freeze for <a class=\"struct\" href=\"mincost_flow/struct.MinCostFlow.html\" title=\"struct mincost_flow::MinCostFlow\">MinCostFlow</a>",1,["mincost_flow::MinCostFlow"]]],
"partially_persistent_union_find":[["impl Freeze for <a class=\"struct\" href=\"partially_persistent_union_find/struct.PartiallyPersistentUnionFind.html\" title=\"struct partially_persistent_union_find::PartiallyPersistentUnionFind\">PartiallyPersistentUnionFind</a>",1,["partially_persistent_union_find::PartiallyPersistentUnionFind"]]],
"radix_heap":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"radix_heap/struct.RadixHeap.html\" title=\"struct radix_heap::RadixHeap\">RadixHeap</a>&lt;T&gt;",1,["radix_heap::RadixHeap"]]],
"randtools":[["impl Freeze for <a class=\"struct\" href=\"randtools/struct.LogUniform.html\" title=\"struct randtools::LogUniform\">LogUniform</a>",1,["randtools::LogUniform"]],["impl Freeze for <a class=\"struct\" href=\"randtools/struct.DistinctTwo.html\" title=\"struct randtools::DistinctTwo\">DistinctTwo</a>",1,["randtools::DistinctTwo"]],["impl Freeze for <a class=\"struct\" href=\"randtools/struct.SubRange.html\" title=\"struct randtools::SubRange\">SubRange</a>",1,["randtools::SubRange"]],["impl Freeze for <a class=\"struct\" href=\"randtools/struct.NonEmptySubRange.html\" title=\"struct randtools::NonEmptySubRange\">NonEmptySubRange</a>",1,["randtools::NonEmptySubRange"]],["impl Freeze for <a class=\"struct\" href=\"randtools/struct.Tree.html\" title=\"struct randtools::Tree\">Tree</a>",1,["randtools::Tree"]],["impl Freeze for <a class=\"struct\" href=\"randtools/struct.SimpleGraph.html\" title=\"struct randtools::SimpleGraph\">SimpleGraph</a>",1,["randtools::SimpleGraph"]],["impl Freeze for <a class=\"struct\" href=\"randtools/struct.SimpleDigraph.html\" title=\"struct randtools::SimpleDigraph\">SimpleDigraph</a>",1,["randtools::SimpleDigraph"]],["impl Freeze for <a class=\"struct\" href=\"randtools/struct.SimpleGraphEdges.html\" title=\"struct randtools::SimpleGraphEdges\">SimpleGraphEdges</a>",1,["randtools::SimpleGraphEdges"]],["impl Freeze for <a class=\"struct\" href=\"randtools/struct.SimpleDigraphEdges.html\" title=\"struct randtools::SimpleDigraphEdges\">SimpleDigraphEdges</a>",1,["randtools::SimpleDigraphEdges"]]],
"rational":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"rational/struct.Rational.html\" title=\"struct rational::Rational\">Rational</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["rational::Rational"]]],
"rb":[["impl&lt;K, O&gt; Freeze for <a class=\"struct\" href=\"rb/struct.MultimapSeg.html\" title=\"struct rb::MultimapSeg\">MultimapSeg</a>&lt;K, O&gt;",1,["rb::map::MultimapSeg"]],["impl&lt;K, V&gt; Freeze for <a class=\"struct\" href=\"rb/struct.Multimap.html\" title=\"struct rb::Multimap\">Multimap</a>&lt;K, V&gt;",1,["rb::map::Multimap"]],["impl&lt;K&gt; Freeze for <a class=\"struct\" href=\"rb/struct.Multiset.html\" title=\"struct rb::Multiset\">Multiset</a>&lt;K&gt;",1,["rb::map::Multiset"]],["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"rb/struct.Seg.html\" title=\"struct rb::Seg\">Seg</a>&lt;O&gt;",1,["rb::seq::Seg"]]],
"rbtree":[["impl&lt;T, O&gt; Freeze for <a class=\"struct\" href=\"rbtree/struct.RbTree.html\" title=\"struct rbtree::RbTree\">RbTree</a>&lt;T, O&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["rbtree::RbTree"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"rbtree/struct.Nop.html\" title=\"struct rbtree::Nop\">Nop</a>&lt;T&gt;",1,["rbtree::Nop"]],["impl&lt;'a, T, O&gt; Freeze for <a class=\"struct\" href=\"rbtree/struct.Iter.html\" title=\"struct rbtree::Iter\">Iter</a>&lt;'a, T, O&gt;",1,["rbtree::Iter"]]],
"scc":[["impl Freeze for <a class=\"struct\" href=\"scc/struct.Scc.html\" title=\"struct scc::Scc\">Scc</a>",1,["scc::Scc"]]],
"segbeats":[["impl&lt;T&gt; !Freeze for <a class=\"struct\" href=\"segbeats/struct.Segbeats.html\" title=\"struct segbeats::Segbeats\">Segbeats</a>&lt;T&gt;",1,["segbeats::Segbeats"]]],
"segbeats_task3":[["impl&lt;T&gt; !Freeze for <a class=\"struct\" href=\"segbeats_task3/struct.Segbeats.html\" title=\"struct segbeats_task3::Segbeats\">Segbeats</a>&lt;T&gt;",1,["segbeats_task3::Segbeats"]]],
"segtree":[["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"segtree/struct.Segtree.html\" title=\"struct segtree::Segtree\">Segtree</a>&lt;O&gt;",1,["segtree::Segtree"]],["impl&lt;'a, O&gt; Freeze for <a class=\"struct\" href=\"segtree/struct.Entry.html\" title=\"struct segtree::Entry\">Entry</a>&lt;'a, O&gt;",1,["segtree::Entry"]],["impl&lt;K, O&gt; Freeze for <a class=\"struct\" href=\"segtree/struct.SegtreeWithCompression.html\" title=\"struct segtree::SegtreeWithCompression\">SegtreeWithCompression</a>&lt;K, O&gt;",1,["segtree::SegtreeWithCompression"]],["impl&lt;K, L, O&gt; Freeze for <a class=\"struct\" href=\"segtree/struct.Sparse2dSegtree.html\" title=\"struct segtree::Sparse2dSegtree\">Sparse2dSegtree</a>&lt;K, L, O&gt;",1,["segtree::Sparse2dSegtree"]],["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"segtree/struct.Dense2dSegtree.html\" title=\"struct segtree::Dense2dSegtree\">Dense2dSegtree</a>&lt;O&gt;",1,["segtree::Dense2dSegtree"]],["impl&lt;'a, O&gt; Freeze for <a class=\"struct\" href=\"segtree/struct.Dense2dEntry.html\" title=\"struct segtree::Dense2dEntry\">Dense2dEntry</a>&lt;'a, O&gt;",1,["segtree::Dense2dEntry"]]],
"skew_heap":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"skew_heap/struct.SkewHeap.html\" title=\"struct skew_heap::SkewHeap\">SkewHeap</a>&lt;T&gt;",1,["skew_heap::SkewHeap"]]],
"snippetter":[["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.70.0/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"snippetter/struct.CrateMetadata.html\" title=\"struct snippetter::CrateMetadata\">CrateMetadata</a>",1,["snippetter::CrateMetadata"]]],
"sparse_table":[["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"sparse_table/struct.SparseTable.html\" title=\"struct sparse_table::SparseTable\">SparseTable</a>&lt;O&gt;",1,["sparse_table::SparseTable"]],["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"sparse_table/struct.SparseTable2d.html\" title=\"struct sparse_table::SparseTable2d\">SparseTable2d</a>&lt;O&gt;",1,["sparse_table::SparseTable2d"]]],
"splay_tree":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"splay_tree/struct.Nop.html\" title=\"struct splay_tree::Nop\">Nop</a>&lt;T&gt;",1,["splay_tree::Nop"]],["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"splay_tree/struct.NoLazy.html\" title=\"struct splay_tree::NoLazy\">NoLazy</a>&lt;O&gt;",1,["splay_tree::NoLazy"]],["impl&lt;O&gt; !Freeze for <a class=\"struct\" href=\"splay_tree/struct.SplayTree.html\" title=\"struct splay_tree::SplayTree\">SplayTree</a>&lt;O&gt;",1,["splay_tree::SplayTree"]],["impl&lt;'a, O&gt; Freeze for <a class=\"struct\" href=\"splay_tree/struct.Iter.html\" title=\"struct splay_tree::Iter\">Iter</a>&lt;'a, O&gt;",1,["splay_tree::Iter"]],["impl&lt;'a, O&gt; Freeze for <a class=\"struct\" href=\"splay_tree/struct.Entry.html\" title=\"struct splay_tree::Entry\">Entry</a>&lt;'a, O&gt;",1,["splay_tree::Entry"]]],
"suffix_sum":[["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"suffix_sum/struct.SuffixSum.html\" title=\"struct suffix_sum::SuffixSum\">SuffixSum</a>&lt;O&gt;",1,["suffix_sum::SuffixSum"]],["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"suffix_sum/struct.SuffixSum2d.html\" title=\"struct suffix_sum::SuffixSum2d\">SuffixSum2d</a>&lt;O&gt;",1,["suffix_sum::SuffixSum2d"]]],
"swag":[["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"swag/struct.DequeueSwag.html\" title=\"struct swag::DequeueSwag\">DequeueSwag</a>&lt;O&gt;",1,["swag::DequeueSwag"]]],
"tree_fold":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"tree_fold/struct.TwoWayTreeFoldResult.html\" title=\"struct tree_fold::TwoWayTreeFoldResult\">TwoWayTreeFoldResult</a>&lt;T&gt;",1,["tree_fold::TwoWayTreeFoldResult"]]],
"trial":[["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"trial/struct.Divisors.html\" title=\"struct trial::Divisors\">Divisors</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["trial::divisors::Divisors"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"trial/struct.PrimeFactorsRle.html\" title=\"struct trial::PrimeFactorsRle\">PrimeFactorsRle</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["trial::prime_factors::PrimeFactorsRle"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"trial/struct.PrimeFactors.html\" title=\"struct trial::PrimeFactors\">PrimeFactors</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["trial::prime_factors::PrimeFactors"]]],
"trie":[["impl&lt;V&gt; Freeze for <a class=\"struct\" href=\"trie/struct.TrieMap.html\" title=\"struct trie::TrieMap\">TrieMap</a>&lt;V&gt;",1,["trie::trie_map::TrieMap"]],["impl Freeze for <a class=\"struct\" href=\"trie/struct.TrieSet.html\" title=\"struct trie::TrieSet\">TrieSet</a>",1,["trie::trie_set::TrieSet"]]],
"two_sat":[["impl Freeze for <a class=\"struct\" href=\"two_sat/struct.TwoSat.html\" title=\"struct two_sat::TwoSat\">TwoSat</a>",1,["two_sat::TwoSat"]]],
"uf_checklist":[["impl Freeze for <a class=\"struct\" href=\"uf_checklist/struct.UfChecklist.html\" title=\"struct uf_checklist::UfChecklist\">UfChecklist</a>",1,["uf_checklist::UfChecklist"]],["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"uf_checklist/struct.Iter.html\" title=\"struct uf_checklist::Iter\">Iter</a>&lt;'a&gt;",1,["uf_checklist::Iter"]]],
"union_find":[["impl Freeze for <a class=\"enum\" href=\"union_find/enum.EdgeCount.html\" title=\"enum union_find::EdgeCount\">EdgeCount</a>",1,["union_find::EdgeCount"]],["impl Freeze for <a class=\"enum\" href=\"union_find/enum.VertexCount.html\" title=\"enum union_find::VertexCount\">VertexCount</a>",1,["union_find::VertexCount"]],["impl Freeze for <a class=\"enum\" href=\"union_find/enum.HasCycle.html\" title=\"enum union_find::HasCycle\">HasCycle</a>",1,["union_find::HasCycle"]],["impl&lt;O&gt; Freeze for <a class=\"struct\" href=\"union_find/struct.UnionFind.html\" title=\"struct union_find::UnionFind\">UnionFind</a>&lt;O&gt;",1,["union_find::UnionFind"]]],
"veb":[["impl&lt;V&gt; Freeze for <a class=\"struct\" href=\"veb/struct.VebMap.html\" title=\"struct veb::VebMap\">VebMap</a>&lt;V&gt;",1,["veb::VebMap"]],["impl Freeze for <a class=\"enum\" href=\"veb/enum.VebSet.html\" title=\"enum veb::VebSet\">VebSet</a>",1,["veb::VebSet"]]],
"vec_lines":[["impl&lt;T, C&gt; Freeze for <a class=\"struct\" href=\"vec_lines/struct.VecLines.html\" title=\"struct vec_lines::VecLines\">VecLines</a>&lt;T, C&gt;",1,["vec_lines::VecLines"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"vec_lines/struct.Line.html\" title=\"struct vec_lines::Line\">Line</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["vec_lines::Line"]],["impl Freeze for <a class=\"enum\" href=\"vec_lines/enum.DecreasingTilt.html\" title=\"enum vec_lines::DecreasingTilt\">DecreasingTilt</a>",1,["vec_lines::DecreasingTilt"]],["impl Freeze for <a class=\"enum\" href=\"vec_lines/enum.IncreasingTilt.html\" title=\"enum vec_lines::IncreasingTilt\">IncreasingTilt</a>",1,["vec_lines::IncreasingTilt"]]],
"wavelet_matrix":[["impl Freeze for <a class=\"struct\" href=\"wavelet_matrix/struct.WaveletMatrix.html\" title=\"struct wavelet_matrix::WaveletMatrix\">WaveletMatrix</a>",1,["wavelet_matrix::WaveletMatrix"]],["impl Freeze for <a class=\"struct\" href=\"wavelet_matrix/struct.StaticBitVec.html\" title=\"struct wavelet_matrix::StaticBitVec\">StaticBitVec</a>",1,["wavelet_matrix::StaticBitVec"]],["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"wavelet_matrix/struct.Spans.html\" title=\"struct wavelet_matrix::Spans\">Spans</a>&lt;'a&gt;",1,["wavelet_matrix::Spans"]],["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"wavelet_matrix/struct.SpanInNode.html\" title=\"struct wavelet_matrix::SpanInNode\">SpanInNode</a>&lt;'a&gt;",1,["wavelet_matrix::SpanInNode"]]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()