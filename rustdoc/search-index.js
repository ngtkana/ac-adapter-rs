var searchIndex = new Map(JSON.parse('[\
["avl_tree",{"t":"FFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AvlTree","IntoIter","Iter","append","back","back_mut","binary_search","binary_search_by","binary_search_by_key","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","cmp","default","eq","eq","fmt","from","from","from","from_iter","front","front_mut","get","get_mut","hash","index","insert","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","lower_bound","new","next","next","next_back","partial_cmp","partition_point","pop_back","pop_front","push_back","push_front","remove","split_off","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upper_bound"],"q":[[0,"avl_tree"],[68,"core::option"],[69,"core::result"],[70,"core::cmp"],[71,"core::borrow"],[72,"core::ops::function"],[73,"core::clone"],[74,"core::fmt"],[75,"core::iter::traits::collect"],[76,"core::hash"],[77,"core::any"]],"i":[0,0,0,2,2,2,2,2,2,24,25,2,24,25,2,2,2,2,2,2,2,2,2,24,25,2,2,2,2,2,2,2,2,2,24,25,2,24,25,2,2,2,2,2,2,2,24,25,24,2,2,2,2,2,2,2,2,2,24,25,2,24,25,2,24,25,2,2],"f":"```{{{f{b{d{c}}}}{f{b{d{c}}}}}h{}}{{{f{{d{c}}}}}{{j{{f{c}}}}}{}}{{{f{b{d{c}}}}}{{j{{f{bc}}}}}{}}{{{f{{d{e}}}}{f{c}}}{{n{ll}}}A`{{Ab{c}}}}{{{f{{d{c}}}}e}{{n{ll}}}{}{{Ah{{f{c}}}{{Ad{Af}}}}}}{{{f{{d{c}}}}{f{e}}g}{{n{ll}}}{}A`{{Ah{{f{c}}}{{Ad{e}}}}}}{{{f{c}}}{{f{e}}}{}{}}00{{{f{bc}}}{{f{be}}}{}{}}00{{{f{{d{c}}}}}{{d{c}}}Aj}{{{f{c}}{f{be}}}h{}{}}{{{f{c}}}h{}}{{{f{{d{c}}}}{f{{d{c}}}}}AfA`}{{}{{d{c}}}{}}{{{f{{d{c}}}}{f{{d{c}}}}}AlAn}{{{f{{d{e}}}}{f{{B`{c}}}}}Al{}{{An{c}}An}}{{{f{{d{c}}}}{f{bBb}}}BdBf}{cc{}}00{e{{d{c}}}{}{{Bj{}{{Bh{c}}}}}}{{{f{{d{c}}}}}{{j{{f{c}}}}}{}}{{{f{b{d{c}}}}}{{j{{f{bc}}}}}{}}{{{f{{d{c}}}}l}{{j{{f{c}}}}}{}}{{{f{b{d{c}}}}l}{{j{{f{bc}}}}}{}}{{{f{{d{c}}}}{f{be}}}hBlBn}{{{f{{d{c}}}}l}{{f{e}}}{}{}}{{{f{b{d{c}}}}lc}h{}}{ce{}{}}0000{{{f{{d{c}}}}}e{}{}}{{{d{c}}}e{}{}}{{{f{{d{c}}}}}Al{}}{{{f{{d{c}}}}}{{C`{c}}}{}}{{{f{{d{c}}}}}l{}}{{{f{{d{e}}}}{f{c}}}lA`{{Ab{c}}}}{{}{{d{c}}}{}}{{{f{b{C`{c}}}}}{{j{e}}}{}{}}{{{f{b{Cb{c}}}}}{{j{e}}}{}{}}1{{{f{{d{c}}}}{f{{d{c}}}}}{{j{Af}}}Cd}{{{f{{d{c}}}}e}l{}{{Ah{{f{c}}}{{Ad{Al}}}}}}{{{f{b{d{c}}}}}{{j{c}}}{}}0{{{f{b{d{c}}}}c}h{}}0{{{f{b{d{c}}}}l}{{j{c}}}{}}{{{f{b{d{c}}}}l}{{d{c}}}{}}{{{f{c}}}e{}{}}{c{{n{e}}}{}{}}00000{{{f{c}}}Cf{}}00<","D":"Db","p":[[0,"mut"],[5,"AvlTree",0],[1,"reference"],[1,"unit"],[6,"Option",68],[1,"usize"],[6,"Result",69],[10,"Ord",70],[10,"Borrow",71],[17,"Output"],[6,"Ordering",70],[10,"FnMut",72],[10,"Clone",73],[1,"bool"],[10,"PartialEq",70],[1,"slice"],[5,"Formatter",74],[8,"Result",74],[10,"Debug",74],[17,"Item"],[10,"IntoIterator",75],[10,"Hash",76],[10,"Hasher",76],[5,"Iter",0],[5,"IntoIter",0],[10,"PartialOrd",70],[5,"TypeId",77]],"r":[],"b":[[20,"impl-PartialEq-for-AvlTree%3CT%3E"],[21,"impl-PartialEq%3C%5BA%5D%3E-for-AvlTree%3CT%3E"],[39,"impl-IntoIterator-for-%26AvlTree%3CT%3E"],[40,"impl-IntoIterator-for-AvlTree%3CT%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACMABgAKAA0AGwAAACAAAQAmAAMALwAEADoACQA="}],\
["binary",{"t":"KMMMHMH","n":["Pow","is_nonone","is_nonzero","is_odd","operator_binary","shr1","value_binary"],"q":[[0,"binary"],[7,"core::ops::function"]],"i":[0,1,1,1,0,1,0],"f":"`{{{d{b}}}f}00{{cegik}g{}b{}{{j{{d{c}}}{{h{c}}}}}{{j{{d{c}}g}{{h{g}}}}}}{{{d{lb}}}n}{{cecg}c{}b{{j{{d{c}}{d{c}}}{{h{c}}}}}}","D":"A`","p":[[10,"Pow",0],[1,"reference"],[1,"bool"],[17,"Output"],[10,"FnMut",7],[0,"mut"],[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["bitvec",{"t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["BitVec","Iter","bitand_assign","bitor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","fmt","fmt","format","from","from","from_01str","from_iter","hash","into","into","into_iter","into_iter","is_empty","iter","len","new","next","push","set","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","test","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unset"],"q":[[0,"bitvec"],[67,"core::fmt"],[68,"alloc::string"],[69,"core::iter::traits::collect"],[70,"core::hash"],[71,"core::option"],[72,"core::result"],[73,"core::any"]],"i":[0,0,2,2,2,14,2,14,2,2,2,2,2,2,2,2,2,14,2,2,2,2,14,2,14,2,2,2,2,2,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,2,14,2,14,2,2],"f":"``{{{f{bd}}{f{d}}}h}00{{{f{c}}}{{f{e}}}{}{}}0{{{f{bc}}}{{f{be}}}{}{}}0{{{f{d}}}d}{{{f{c}}{f{be}}}h{}{}}{{{f{c}}}h{}}{{}d}{{{f{d}}{f{d}}}j}{{{f{d}}{f{bl}}}n}0{{{f{d}}A`A`}Ab}{cc{}}0{{{f{Ad}}}d}{cd{{Ah{}{{Af{j}}}}}}{{{f{d}}{f{bc}}}hAj}{ce{}{}}00{{{f{d}}}Al}{{{f{d}}}j}1{{{f{d}}}An}{And}{{{f{bAl}}}{{B`{j}}}}{{{f{bd}}j}h}{{{f{bd}}An}h}{{{f{bd}}Bb}h}{{{f{bd}}Bd}h}{{{f{bd}}Bf}h}{{{f{bd}}Bh}h}{{{f{bd}}Bj}h}{{{f{bd}}Bl}h}{{{f{bd}}Bn}h}{{{f{bd}}C`}h}{{{f{bd}}Cb}h}{{{f{bd}}Cd}h}{{{f{bd}}Cf}h};1463529;07:8{{{f{d}}An}j}{{{f{c}}}e{}{}}{{{f{c}}}Ab{}}{c{{Ch{e}}}{}{}}000{{{f{c}}}Cj{}}0{{{f{bd}}An}h}","D":"Bb","p":[[0,"mut"],[5,"BitVec",0],[1,"reference"],[1,"unit"],[1,"bool"],[5,"Formatter",67],[8,"Result",67],[1,"char"],[5,"String",68],[1,"str"],[17,"Item"],[10,"IntoIterator",69],[10,"Hasher",70],[5,"Iter",0],[1,"usize"],[6,"Option",71],[1,"u16"],[1,"i16"],[1,"i8"],[1,"u32"],[1,"i32"],[1,"i64"],[1,"isize"],[1,"u128"],[1,"u64"],[1,"i128"],[1,"u8"],[6,"Result",72],[5,"TypeId",73]],"r":[],"b":[[14,"impl-Display-for-BitVec"],[15,"impl-Debug-for-BitVec"],[33,"impl-ShlAssign%3Cu16%3E-for-BitVec"],[34,"impl-ShlAssign%3Ci16%3E-for-BitVec"],[35,"impl-ShlAssign%3Ci8%3E-for-BitVec"],[36,"impl-ShlAssign%3Cu32%3E-for-BitVec"],[37,"impl-ShlAssign%3Ci32%3E-for-BitVec"],[38,"impl-ShlAssign%3Ci64%3E-for-BitVec"],[39,"impl-ShlAssign%3Cisize%3E-for-BitVec"],[40,"impl-ShlAssign%3Cu128%3E-for-BitVec"],[41,"impl-ShlAssign%3Cu64%3E-for-BitVec"],[42,"impl-ShlAssign%3Ci128%3E-for-BitVec"],[43,"impl-ShlAssign%3Cu8%3E-for-BitVec"],[44,"impl-ShlAssign%3Cusize%3E-for-BitVec"],[45,"impl-ShrAssign%3Ci128%3E-for-BitVec"],[46,"impl-ShrAssign%3Cisize%3E-for-BitVec"],[47,"impl-ShrAssign%3Ci32%3E-for-BitVec"],[48,"impl-ShrAssign%3Cu128%3E-for-BitVec"],[49,"impl-ShrAssign%3Ci64%3E-for-BitVec"],[50,"impl-ShrAssign%3Cu64%3E-for-BitVec"],[51,"impl-ShrAssign%3Ci16%3E-for-BitVec"],[52,"impl-ShrAssign%3Cusize%3E-for-BitVec"],[53,"impl-ShrAssign%3Cu8%3E-for-BitVec"],[54,"impl-ShrAssign%3Cu32%3E-for-BitVec"],[55,"impl-ShrAssign%3Cu16%3E-for-BitVec"],[56,"impl-ShrAssign%3Ci8%3E-for-BitVec"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADIABgADAA0AFQABABkAAQAfAAAAIgAXADsABwA="}],\
["bsgs",{"t":"FNNNNNNNNNNNNNN","n":["Bsgs","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","into","log","new","to_owned","try_from","try_into","type_id"],"q":[[0,"bsgs"],[15,"core::clone"],[16,"core::fmt"],[17,"core::option"],[18,"core::marker"],[19,"core::hash"],[20,"core::cmp"],[21,"core::ops::function"],[22,"core::result"],[23,"core::any"]],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":"`{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{{f{ce}}}}}{{f{ce}}}hh}{{{b{c}}{b{de}}}j{}{}}{{{b{c}}}j{}}{{{b{{f{ce}}}}{b{dl}}}nA`{}}{cc{}}{ce{}{}}{{{b{{f{ce}}}}c}{{Ad{Ab}}}{AfAhAj}{{An{cc}{{Al{c}}}}}}{{cAbegi}{{f{ce}}}{AfAhAj}{{An{cc}{{Al{c}}}}}{{An{c}{{Al{c}}}}}{{An{}{{Al{c}}}}}}{{{b{c}}}e{}{}}{c{{B`{e}}}{}{}}0{{{b{c}}}Bb{}}","D":"l","p":[[1,"reference"],[0,"mut"],[5,"Bsgs",0],[10,"Clone",15],[1,"unit"],[5,"Formatter",16],[8,"Result",16],[10,"Debug",16],[1,"u64"],[6,"Option",17],[10,"Copy",18],[10,"Hash",19],[10,"Eq",20],[17,"Output"],[10,"Fn",21],[6,"Result",22],[5,"TypeId",23]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAkAAgACAAUADAADAA=="}],\
["cht",{"t":"FGGKFFSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["BTreeCht","Concave","Convex","ConvexOrConcave","Quadratic","VecCht","X","add","add","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","default","default","default","eq","eq","eq","eval","eval","eval","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","mul","multieval","multieval","neg","negate_if_concave","negate_if_concave","negate_if_concave","new","new","square","sub","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"cht"],[99,"core::convert"],[100,"core::clone"],[101,"core::default"],[102,"core::cmp"],[103,"core::fmt"],[104,"core::hash"],[105,"alloc::vec"],[106,"core::iter::traits::iterator"],[107,"core::result"],[108,"core::any"]],"i":[0,0,0,0,0,0,0,2,7,4,9,10,2,7,4,9,10,2,7,4,9,10,2,7,4,9,10,2,7,4,9,9,10,10,2,7,4,4,2,7,4,2,7,4,2,7,4,9,10,2,7,4,9,10,2,7,4,4,9,10,2,7,4,9,10,2,7,4,4,2,7,4,6,9,10,2,7,4,4,9,10,2,7,4,9,10,2,7,4,9,10,2,7,4,9,10,2,7,4],"f":"```````{{{f{b{d{c}}}}h}jl}{{{f{b{n{c}}}}h}jl}{{hc}e{{A`{h}}}{}}{{{f{c}}}{{f{e}}}{}{}}0000{{{f{bc}}}{{f{be}}}{}{}}0000{{{f{Ab}}}Ab}{{{f{Ad}}}Ad}{{{f{{d{c}}}}}{{d{c}}}Af}{{{f{{n{c}}}}}{{n{c}}}Af}{{{f{h}}}h}{{{f{c}}{f{be}}}j{}{}}0000{{{f{c}}}j{}}0000000{{}{{d{c}}}Ah}{{}{{n{c}}}Ah}{{}h}{{{f{{d{c}}}}{f{{d{c}}}}}AjAl}{{{f{{n{c}}}}{f{{n{c}}}}}AjAl}{{{f{h}}{f{h}}}Aj}{{{f{b{d{c}}}}An}Anl}{{{f{{n{c}}}}An}Anl}{{hAn}An}{{{f{Ab}}{f{bB`}}}Bb}{{{f{Ad}}{f{bB`}}}Bb}{{{f{{d{c}}}}{f{bB`}}}BbBd}{{{f{{n{c}}}}{f{bB`}}}BbBd}{{{f{h}}{f{bB`}}}Bb}{cc{}}000{Anh}1{{{f{Ab}}{f{bc}}}jBf}{{{f{Ad}}{f{bc}}}jBf}{{{f{{d{c}}}}{f{be}}}jBhBf}{{{f{{n{c}}}}{f{be}}}jBhBf}{{{f{h}}{f{bc}}}jBf}{ce{}{}}0000{{hc}e{{A`{h}}}{}}{{{f{b{d{c}}}}e}{{Bj{An}}}l{{Bn{}{{Bl{An}}}}}}{{{f{{n{c}}}}e}{{Bj{An}}}l{{Bn{}{{Bl{An}}}}}}{hc{}}{AnAn}00{{}{{d{c}}}l}{{}{{n{c}}}l}{hh}7{{{f{c}}}e{}{}}0000{c{{C`{e}}}{}{}}000000000{{{f{c}}}Cb{}}0000","D":"Bd","p":[[0,"mut"],[5,"VecCht",0],[1,"reference"],[5,"Quadratic",0],[1,"unit"],[10,"ConvexOrConcave",0],[5,"BTreeCht",0],[10,"Into",99],[6,"Convex",0],[6,"Concave",0],[10,"Clone",100],[10,"Default",101],[1,"bool"],[10,"PartialEq",102],[1,"i64"],[5,"Formatter",103],[8,"Result",103],[10,"Debug",103],[10,"Hasher",104],[10,"Hash",104],[5,"Vec",105],[17,"Item"],[10,"Iterator",106],[6,"Result",107],[5,"TypeId",108]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFEABAAIACwAOQAAADsABABFAB4A"}],\
["cipolla",{"t":"TTKTH","n":["ONE","TWO","Unsigned","ZERO","cipolla_sqrt"],"q":[[0,"cipolla"],[5,"core::option"]],"i":[2,2,0,2,0],"f":"````{{cc}{{b{c}}}d}","D":"`","p":[[6,"Option",5],[10,"Unsigned",0]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAUAAQAAAAUA"}],\
["convex_hull",{"t":"HHHHH","n":["caliper","ccw","convex_hull","is_convex","sqmag"],"q":[[0,"convex_hull"],[5,"alloc::vec"]],"i":[0,0,0,0,0],"f":"{{{h{{f{{d{b}}}}}}}{{j{b{d{{d{b}}}}}}}}{{{d{b}}{d{b}}{d{b}}}b}{{{h{{f{{d{b}}}}}}}{{l{{d{b}}}}}}{{{h{{f{{d{b}}}}}}}n}{{{d{b}}{d{b}}}b}","D":"j","p":[[1,"i64"],[1,"array"],[1,"slice"],[1,"reference"],[1,"tuple"],[5,"Vec",5],[1,"bool"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAAAEAAAAAAA"}],\
["dinic",{"t":"FFFKNNNNNNNONNNNNNNNNNNNNNNNONNNNNNNONNNNMNNNNNONNNNNNNNNNNNM","n":["Dinic","Edge","EdgeKey","Value","add_edge","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cap","change_edge","clone","clone","clone","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","eq","eq","eq","flow","flow","flow_with_limit","fmt","fmt","fmt","from","from","from","from","get_edge","get_edges","get_excess","get_network","infinity","into","into","into","min_cut","new","to","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":[[0,"dinic"],[61,"core::clone"],[62,"core::cmp"],[63,"core::fmt"],[64,"alloc::vec"],[65,"core::result"],[66,"core::any"]],"i":[0,0,0,0,2,2,9,5,2,9,5,9,2,2,9,5,2,9,5,2,9,9,5,5,2,9,5,2,9,2,2,9,5,2,9,5,9,2,2,2,2,6,2,9,5,2,2,9,2,9,5,2,9,5,2,9,5,2,9,5,6],"f":"````{{{f{b{d{c}}}}hhc}jl}{{{f{c}}}{{f{e}}}{}{}}00{{{f{bc}}}{{f{be}}}{}{}}00`{{{f{b{d{c}}}}jcc}nl}{{{f{{d{c}}}}}{{d{c}}}A`}{{{f{{Ab{c}}}}}{{Ab{c}}}A`}{{{f{j}}}j}{{{f{c}}{f{be}}}n{}{}}00{{{f{c}}}n{}}0000{{{f{{d{c}}}}{f{{d{c}}}}}AdAf}{{{f{{Ab{c}}}}{f{{Ab{c}}}}}AdAf}{{{f{j}}{f{j}}}Ad}{{{f{b{d{c}}}}hh}cl}`{{{f{b{d{c}}}}hhc}cl}{{{f{{d{c}}}}{f{bAh}}}Ajl}{{{f{{Ab{c}}}}{f{bAh}}}AjAl}{{{f{j}}{f{bAh}}}Aj}{cc{}}00`{{{f{{d{c}}}}j}{{Ab{c}}}l}{{{f{{d{c}}}}}{{An{{Ab{c}}}}}l}{{{f{{d{c}}}}}{{An{c}}}l}{{{f{{d{c}}}}}{{An{{An{{Ab{c}}}}}}}l}{{}l}{ce{}{}}00{{{f{{d{c}}}}h}{{An{Ad}}}l}{h{{d{c}}}l}`{{{f{c}}}e{}{}}00{c{{B`{e}}}{}{}}00000{{{f{c}}}Bb{}}006","D":"Cf","p":[[0,"mut"],[5,"Dinic",0],[1,"reference"],[1,"usize"],[5,"EdgeKey",0],[10,"Value",0],[1,"unit"],[10,"Clone",61],[5,"Edge",0],[1,"bool"],[10,"PartialEq",62],[5,"Formatter",63],[8,"Result",63],[10,"Debug",63],[5,"Vec",64],[6,"Result",65],[5,"TypeId",66]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACIABAAGAAUADgANAB8AAgAxAAsA"}],\
["dual_segtree",{"t":"FKRNNNNNNNNNNNNNNNNNMNNNNNMNNNNN","n":["DualSegtree","Ops","Value","apply","borrow","borrow_mut","clone","clone_into","clone_to_uninit","collect_vec","default","eq","fmt","from","from","from_iter","get","get_cloned","get_copied","get_mut","identity","into","into_vec","is_empty","len","new","op","op_assign_from_right","to_owned","try_from","try_into","type_id"],"q":[[0,"dual_segtree"],[32,"core::ops::range"],[33,"core::clone"],[34,"alloc::vec"],[35,"core::default"],[36,"core::cmp"],[37,"core::fmt"],[38,"core::iter::traits::collect"],[39,"core::iter::traits::exact_size"],[40,"core::result"],[41,"core::any"]],"i":[0,0,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,2,2,2,2,2,5,5,2,2,2,2],"f":"```{{{f{b{d{c}}}}ef}hj{{n{l}}}}{{{f{c}}}{{f{e}}}{}{}}{{{f{bc}}}{{f{be}}}{}{}}{{{f{{d{c}}}}}{{d{c}}}{A`j}}{{{f{c}}{f{be}}}h{}{}}{{{f{c}}}h{}}{{{f{b{d{c}}}}}Abj}{{}{{d{c}}}{Adj}}{{{f{{d{c}}}}{f{{d{c}}}}}Af{Ahj}}{{{f{{d{c}}}}{f{bAj}}}Alj}{Ab{{d{c}}}j}{cc{}}{c{{d{e}}}{{B`{}{{An{}}}}}j}{{{f{b{d{c}}}}l}fj}{{{f{b{d{c}}}}l}{}j}0{{{f{b{d{c}}}}l}{{f{b}}}j}{{}c{}}{ce{}{}}{{{d{c}}}Abj}{{{f{{d{c}}}}}Afj}{{{f{{d{c}}}}}lj}{e{{d{g}}}{{Bb{}{{An{}}}}}{{B`{}{{Bd{c}}{An{}}}}}j}{{cc}c{}}{{{f{bc}}c}h{}}{{{f{c}}}e{}{}}{c{{Bf{e}}}{}{}}0{{{f{c}}}Bh{}}","D":"Bf","p":[[0,"mut"],[5,"DualSegtree",0],[1,"reference"],[1,"unit"],[10,"Ops",0],[1,"usize"],[10,"RangeBounds",32],[10,"Clone",33],[5,"Vec",34],[10,"Default",35],[1,"bool"],[10,"PartialEq",36],[5,"Formatter",37],[8,"Result",37],[17,"Item"],[10,"IntoIterator",38],[10,"ExactSizeIterator",39],[17,"IntoIter"],[6,"Result",40],[5,"TypeId",41]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAA0ABAAFAAQACwADABAAAAAdAAMA"}],\
["elim",{"t":"H","n":["column_reduce"],"q":[[0,"elim"],[1,"alloc::vec"]],"i":[0],"f":"{{{j{b{h{{f{d}}}}}}}l}","D":"b","p":[[0,"mut"],[1,"bool"],[5,"Vec",1],[1,"slice"],[1,"reference"],[1,"usize"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAAAEAAAAAAA"}],\
["erato",{"t":"KFKFFFFFFMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNM","n":["Int","LpdSieve","PrimeFactors","PrimeFactorsByLookup","PrimeFactorsByTrialDivision","PrimeNumbers","Rle","Sieve","Unique","as_usize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","default","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from_usize","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_prime","is_prime","len","len","lpd","new","new","next","next","next","next","next","one","prime_factors","prime_factors","prime_numbers","prime_numbers","rle","rle","rle","rle","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique","unique","unique","unique","with_len","with_len","zero"],"q":[[0,"erato"],[110,"erato::int"],[111,"erato::lpd_sieve"],[112,"erato::sieve"],[113,"core::fmt"],[114,"erato::converters"],[115,"core::option"],[116,"erato::sieve_base"],[117,"core::result"],[118,"core::any"]],"i":[0,0,0,0,0,0,0,0,0,1,11,14,15,16,17,5,6,11,14,15,16,17,5,6,5,6,5,6,5,6,5,6,5,6,5,6,11,14,15,16,17,5,6,1,11,14,15,16,17,5,6,11,14,15,16,17,5,6,5,6,5,6,5,5,6,11,14,15,16,17,1,5,6,5,6,13,13,16,17,5,6,11,14,15,16,17,5,6,11,14,15,16,17,5,6,1,11,14,15,16,17,5,6,13,13,16,17,5,6,1],"f":"`````````{bd}{{{f{c}}}{{f{e}}}{}{}}000000{{{f{hc}}}{{f{he}}}{}{}}000000{{{f{j}}}j}{{{f{l}}}l}{{{f{c}}{f{he}}}n{}{}}0{{{f{c}}}n{}}0{{}j}{{}l}{{{f{j}}{f{j}}}A`}{{{f{l}}{f{l}}}A`}{{{f{j}}{f{hAb}}}Ad}{{{f{l}}{f{hAb}}}Ad}{cc{}}000000{db}{ce{}{}}00000000000{{{f{j}}}A`}{{{f{l}}}A`}{{{f{hj}}c}A`b}{{{f{hl}}c}A`b}{{{f{j}}}d}{{{f{l}}}d}{{{f{hj}}c}cb}?>{{{f{h{Af{ce}}}}}{{Ah{g}}}b{{Aj{c}}}{}}{{{f{h{Al{ce}}}}}{{Ah{g}}}b{{Aj{c}}}{}}{{{f{h{An{ce}}}}}{{Ah{g}}}`b{}}{{{f{h{B`{c}}}}}{{Ah{e}}}b{}}{{{f{h{Bb{c}}}}}{{Ah{e}}}b{}}{{}b}{{{f{hj}}c}{{Bb{c}}}b}{{{f{hl}}c}{{B`{c}}}b}{{{f{hj}}}{{An{`c}}}b}{{{f{hl}}}{{An{`c}}}b}{Aj{{Al{cAj}}}b}0{{{B`{c}}}{{Al{c{B`{c}}}}}b}{{{Bb{c}}}{{Al{c{Bb{c}}}}}b}{{{f{c}}}e{}{}}0{c{{Bd{e}}}{}{}}00000000000009{{{f{c}}}Bf{}}000000{Aj{{Af{cAj}}}b}0{{{B`{c}}}{{Af{c{B`{c}}}}}b}{{{Bb{c}}}{{Af{c{Bb{c}}}}}b}{dj}{dl}?","D":"Fd","p":[[10,"Int",0,110],[1,"usize"],[1,"reference"],[0,"mut"],[5,"LpdSieve",0,111],[5,"Sieve",0,112],[1,"unit"],[1,"bool"],[5,"Formatter",113],[8,"Result",113],[5,"Unique",0,114],[6,"Option",115],[10,"PrimeFactors",0,114],[5,"Rle",0,114],[5,"PrimeNumbers",0,116],[5,"PrimeFactorsByTrialDivision",0,116],[5,"PrimeFactorsByLookup",0,116],[6,"Result",117],[5,"TypeId",118]],"r":[[0,110],[1,111],[2,114],[3,116],[4,116],[5,116],[6,114],[7,112],[8,114]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADwABwALABkANAAEAEIABABOAAAAUAAPAGEABgBqAAAA"}],\
["euclid",{"t":"KKKMHMNHHMMMM","n":["Int","Signed","Unsigned","abs","crt","div_euclid","divides","ext_gcd","gcd","increment","one","rem_euclid","zero"],"q":[[0,"euclid"],[13,"core::option"],[14,"euclid::crt"],[15,"euclid::ext_gcd"],[16,"euclid::gcd"]],"i":[0,0,0,1,0,1,1,0,0,1,1,1,1],"f":"```{bb}{{cccc}{{f{{d{cc}}}}}h}{{bb}b}{{bb}j}{{cc}{{d{ccc}}}h}{{cc}cb}{{{n{lb}}}A`}{{}b}50","D":"Aj","p":[[10,"Int",0],[1,"tuple"],[6,"Option",13],[10,"Signed",0],[1,"bool"],[0,"mut"],[1,"reference"],[1,"unit"]],"r":[[4,14],[7,15],[8,16]],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAAAEAAAAAAA"}],\
["fp",{"t":"FFKTFNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNQHNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Factorial","Fp","PrimitiveRoot","VALUE","Zeroed","add","add","add","add","add_assign","add_assign","any_mod_fps_mul","binom","binom_signed","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","div","div","div","div","div_assign","div_assign","div_assign","eq","fact","falling","fft","fmt","fmt","fmt","fp","fps_mul","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","ifft","index","into","into","into","inv","inv_fact","m1pow","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","multinom","multiset_number","neg","new","new","new","one","pow","product","product","sign","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","value"],"q":[[0,"fp"],[108,"core::convert"],[109,"alloc::vec"],[110,"fp::factorial"],[111,"fp::zeroed"],[112,"core::fmt"],[113,"core::hash"],[114,"core::iter::traits::iterator"],[115,"alloc::string"],[116,"core::result"],[117,"core::any"],[118,"fp::fourier"]],"i":[0,0,0,32,0,1,1,1,1,1,1,0,8,8,8,11,1,8,11,1,11,1,11,1,11,11,1,1,1,1,1,1,11,1,1,1,8,8,0,11,1,1,0,0,8,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,8,8,11,1,1,8,1,1,1,1,1,11,1,1,8,8,1,8,11,1,11,1,1,1,1,1,1,1,1,1,1,1,1,11,1,1,8,11,1,8,11,1,8,11,1,11,1],"f":"`````{{{d{b}}{d{b}}}c{}}{{{d{b}}c}e{{f{b}}}{}}{{bc}e{{f{b}}}{}}{{b{d{b}}}c{}}{{{d{hb}}{d{b}}}j}{{{d{hb}}b}j}{{{d{{l{b}}}}{d{{l{b}}}}}{{n{b}}}}{{{d{A`}}AbAb}b}{{{d{A`}}AbAd}b}{{{d{c}}}{{d{e}}}{}{}}00{{{d{hc}}}{{d{he}}}{}{}}00{{{d{Af}}}Af}{{{d{b}}}b}{{{d{c}}{d{he}}}j{}{}}0{{{d{c}}}j{}}000;=><{{{d{hAf}}Ah}j};:{{{d{b}}{d{b}}}Aj}{{{d{A`}}Ab}b}:{{{d{h{l{b}}}}}j}{{{d{Af}}{d{hAl}}}An}{{{d{b}}{d{hAl}}}An}0`{{ce}{{n{b}}}{{B`{{l{b}}}}}{{B`{{l{b}}}}}}{cc{}}0{Ahb}{Adb}{Bbb}{Bdb}{Abb}{Bfb}6{Bhb}{Bjb}{Blb}{Bnb}{C`b}{Cbb}{{{d{b}}{d{hc}}}jCd}{{{d{h{l{b}}}}}j}{{{d{A`}}Ab}{{d{c}}}{}}{ce{}{}}00{bb}{{{d{A`}}Ab}b}={{b{d{b}}}c{}}{{{d{b}}{d{b}}}c{}}{{bc}e{{f{b}}}{}}{{{d{b}}c}e{{f{b}}}{}}{{{d{hAf}}Ah}j}{{{d{hb}}b}j}{{{d{hb}}{d{b}}}j}{{{d{A`}}{d{{l{Ab}}}}}b}{{{d{A`}}AbAb}b}{bc{}}{AbA`}{AhAf}{Ahb}{{}Af}{{bAh}b}{cb{{Ch{}{{Cf{{d{b}}}}}}}}{cb{{Ch{}{{Cf{b}}}}}}{Abb}>?{{{d{b}}{d{b}}}c{}}{{b{d{b}}}c{}}=>43{{{d{c}}}e{}{}}0{{{d{c}}}Cj{}}{c{{Cl{e}}}{}{}}00000{{{d{c}}}Cn{}}00{{{d{Af}}}b}{bAh}","D":"Dd","p":[[5,"Fp",0],[1,"reference"],[10,"Into",108],[0,"mut"],[1,"unit"],[1,"slice"],[5,"Vec",109],[5,"Factorial",0,110],[1,"usize"],[1,"isize"],[5,"Zeroed",0,111],[1,"u64"],[1,"bool"],[5,"Formatter",112],[8,"Result",112],[10,"AsRef",108],[1,"i8"],[1,"i128"],[1,"i32"],[1,"u128"],[1,"i16"],[1,"u8"],[1,"u16"],[1,"i64"],[1,"u32"],[10,"Hasher",113],[17,"Item"],[10,"Iterator",114],[5,"String",115],[6,"Result",116],[5,"TypeId",117],[10,"PrimitiveRoot",0]],"r":[[0,110],[4,111],[11,118],[38,118],[43,118],[60,118]],"b":[[5,"impl-Add%3C%26Fp%3CP%3E%3E-for-%26Fp%3CP%3E"],[6,"impl-Add%3CT%3E-for-%26Fp%3CP%3E"],[7,"impl-Add%3CT%3E-for-Fp%3CP%3E"],[8,"impl-Add%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[9,"impl-AddAssign%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[10,"impl-AddAssign-for-Fp%3CP%3E"],[28,"impl-Div%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[29,"impl-Div%3CT%3E-for-%26Fp%3CP%3E"],[30,"impl-Div%3C%26Fp%3CP%3E%3E-for-%26Fp%3CP%3E"],[31,"impl-Div%3CT%3E-for-Fp%3CP%3E"],[33,"impl-DivAssign%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[34,"impl-DivAssign-for-Fp%3CP%3E"],[40,"impl-Debug-for-Fp%3CP%3E"],[41,"impl-Display-for-Fp%3CP%3E"],[46,"impl-From%3Cu64%3E-for-Fp%3CP%3E"],[47,"impl-From%3Cisize%3E-for-Fp%3CP%3E"],[48,"impl-From%3Ci8%3E-for-Fp%3CP%3E"],[49,"impl-From%3Ci128%3E-for-Fp%3CP%3E"],[50,"impl-From%3Cusize%3E-for-Fp%3CP%3E"],[51,"impl-From%3Ci32%3E-for-Fp%3CP%3E"],[53,"impl-From%3Cu128%3E-for-Fp%3CP%3E"],[54,"impl-From%3Ci16%3E-for-Fp%3CP%3E"],[55,"impl-From%3Cu8%3E-for-Fp%3CP%3E"],[56,"impl-From%3Cu16%3E-for-Fp%3CP%3E"],[57,"impl-From%3Ci64%3E-for-Fp%3CP%3E"],[58,"impl-From%3Cu32%3E-for-Fp%3CP%3E"],[68,"impl-Mul%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[69,"impl-Mul%3C%26Fp%3CP%3E%3E-for-%26Fp%3CP%3E"],[70,"impl-Mul%3CT%3E-for-Fp%3CP%3E"],[71,"impl-Mul%3CT%3E-for-%26Fp%3CP%3E"],[73,"impl-MulAssign-for-Fp%3CP%3E"],[74,"impl-MulAssign%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[83,"impl-Product%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[84,"impl-Product-for-Fp%3CP%3E"],[86,"impl-Sub%3CT%3E-for-%26Fp%3CP%3E"],[87,"impl-Sub%3CT%3E-for-Fp%3CP%3E"],[88,"impl-Sub%3C%26Fp%3CP%3E%3E-for-%26Fp%3CP%3E"],[89,"impl-Sub%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[90,"impl-SubAssign%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[91,"impl-SubAssign-for-Fp%3CP%3E"],[92,"impl-Sum%3C%26Fp%3CP%3E%3E-for-Fp%3CP%3E"],[93,"impl-Sum-for-Fp%3CP%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEoACgAGAAUADwAVACgAAgAvAAUANgAGAD4AAABFAAYATgAAAFQAAQBXABMA"}],\
["fps",{"t":"QHHHHHHH","n":["fps","fps_deriv","fps_exp","fps_int","fps_inv","fps_log","fps_pow","fps_sqrt"],"q":[[0,"fps"],[8,"fp"],[9,"alloc::vec"],[10,"core::convert"]],"i":[0,0,0,0,0,0,0,0],"f":"`{{cb}{{f{d}}}{{j{{h{d}}}}}}0000{{cbb}{{f{d}}}{{j{{h{d}}}}}}1","D":"Ab","p":[[1,"usize"],[5,"Fp",8],[5,"Vec",9],[1,"slice"],[10,"AsRef",10]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["gco",{"t":"FFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNO","n":["Gco","GcoResult","args","binary","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","new","solve","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unary","value"],"q":[[0,"gco"],[38,"core::fmt"],[39,"core::hash"],[40,"core::result"],[41,"core::any"]],"i":[0,0,8,2,2,8,2,8,2,8,2,8,2,8,2,8,2,8,2,8,2,8,2,8,2,8,2,2,2,8,2,8,2,8,2,8,2,8],"f":"```{{{f{bd}}{j{h}}{j{{j{l}}}}}n}{{{f{c}}}{{f{e}}}{}{}}0{{{f{bc}}}{{f{be}}}{}{}}0{{{f{d}}}d}{{{f{A`}}}A`}{{{f{c}}{f{be}}}n{}{}}0{{{f{c}}}n{}}0{{}d}{{}A`}{{{f{d}}{f{d}}}Ab}{{{f{A`}}{f{A`}}}Ab}{{{f{d}}{f{bAd}}}Af}{{{f{A`}}{f{bAd}}}Af}{cc{}}0{{{f{d}}{f{bc}}}nAh}{{{f{A`}}{f{bc}}}nAh}{ce{}{}}0{hd}{{{f{d}}}A`}{{{f{c}}}e{}{}}0{c{{Aj{e}}}{}{}}000{{{f{c}}}Al{}}0{{{f{bd}}h{j{l}}}n}`","D":"Aj","p":[[0,"mut"],[5,"Gco",0],[1,"reference"],[1,"usize"],[1,"array"],[1,"i64"],[1,"unit"],[5,"GcoResult",0],[1,"bool"],[5,"Formatter",38],[8,"Result",38],[10,"Hasher",39],[6,"Result",40],[5,"TypeId",41]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABkAAwAFAA8AFwABAB0ABwA="}],\
["graph",{"t":"FFFNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNN","n":["Csr","Iter","LastMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","boundary","data","default","deref","deref_mut","extend","extend_from_slice","flat_len","fmt","from","from","from","from_edges","from_edges_and_rev","from_iter","from_sections","index","index_mut","into","into","into","into_iter","into_iter","is_empty","iter","kosaraju","last_mut","len","len","new","next","next_back","push","push_empty","push_section","section","section_mut","to_vec","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity"],"q":[[0,"graph"],[57,"graph::csr"],[58,"core::iter::traits::collect"],[59,"core::clone"],[60,"core::fmt"],[61,"core::convert"],[62,"core::option"],[63,"alloc::vec"],[64,"core::result"],[65,"core::any"]],"i":[0,0,0,3,4,17,3,4,17,3,3,3,4,4,4,4,3,3,3,4,17,3,3,3,3,3,3,3,4,17,3,17,3,3,0,3,3,17,3,17,17,4,3,3,3,3,3,3,4,17,3,4,17,3,4,17,3],"f":"```{{{b{c}}}{{b{e}}}{}{}}00{{{b{dc}}}{{b{de}}}{}{}}00``{{}{{f{c}}}{}}{{{b{{h{c}}}}}{{b{e}}}{}{}}{{{b{d{h{c}}}}}{{b{de}}}{}{}}{{{h{c}}e}j{}{{n{}{{l{c}}}}}}{{{b{d{h{c}}}}{b{{A`{c}}}}}jAb}{{{b{{f{c}}}}}Ad{}}{{{b{{f{c}}}}{b{dAf}}}AhAj}{cc{}}00{{Ad{b{{A`{{Al{AdAd}}}}}}}{{f{Ad}}}}{{Ad{b{{A`{{Al{AdAd}}}}}}}{{Al{{f{Ad}}{f{Ad}}}}}}{g{{f{c}}}{}{{n{}{{l{c}}}}}{{n{}{{l{e}}}}}}{{{b{{A`{e}}}}}{{f{c}}}Ab{{An{{A`{c}}}}}}{{{b{{f{c}}}}Ad}{{b{{A`{c}}}}}{}}{{{b{d{f{c}}}}Ad}{{b{d{A`{c}}}}}{}}{ce{}{}}00{{{b{{f{c}}}}}e{}{}}1{{{b{{f{c}}}}}B`{}}{{{b{{f{c}}}}}{{Bb{c}}}{}}9{{{b{d{f{c}}}}}{{h{c}}}{}}={{{b{{Bb{c}}}}}Ad{}}{{}{{f{c}}}{}}{{{b{d{Bb{c}}}}}{{Bd{e}}}{}{}}0{{{h{c}}c}j{}}{{{b{d{f{c}}}}}j{}}{{{b{d{f{c}}}}{b{{A`{c}}}}}jAb}<;{{{b{{f{c}}}}}{{Bf{{Bf{c}}}}}Ab}{c{{Bh{e}}}{}{}}00000{{{b{c}}}Bj{}}00{{AdAd}{{f{c}}}{}}","D":"Cn","p":[[1,"reference"],[0,"mut"],[5,"Csr",0,57],[5,"LastMut",0,57],[1,"unit"],[17,"Item"],[10,"IntoIterator",58],[1,"slice"],[10,"Clone",59],[1,"usize"],[5,"Formatter",60],[8,"Result",60],[10,"Debug",60],[1,"tuple"],[10,"AsRef",61],[1,"bool"],[5,"Iter",0,57],[6,"Option",62],[5,"Vec",63],[6,"Result",64],[5,"TypeId",65]],"r":[[0,57],[1,57],[2,57]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABoACQAEAAUADAACABIAAAAYAAAAGgABAB8AAQAmAAAAKAABADAACAA="}],\
["gss",{"t":"KKTKMMMMHHHHMMMMMM","n":["Float","Golden","INVPHI","Int","abs","as_f64","f64_as","golden_sect","gss_by_absolute_eps","gss_by_count","gss_integer","gss_on_slice","is_finite","max","midpoint_sorted","one","two","zero"],"q":[[0,"gss"],[18,"core::cmp"],[19,"core::fmt"],[20,"core::ops::function"]],"i":[0,0,1,0,1,2,2,4,0,0,0,0,1,1,2,2,1,1],"f":"````{bb}{df}{fd}{{hh}h}{{ccgc}c{bh}{jl}{{A`{c}{{n{e}}}}}}{{ccgAb}c{bh}{jl}{{A`{c}{{n{e}}}}}}{{ccg}c{dh}{jl}{{A`{c}{{n{e}}}}}}{{{Af{{Ad{c}}}}}Ab{jl}}{bAh}{{bb}b}{{dd}d}{{}d}{{}b}0","D":"Bb","p":[[10,"Float",0],[10,"Int",0],[1,"f64"],[10,"Golden",0],[10,"PartialOrd",18],[10,"Debug",19],[17,"Output"],[10,"Fn",20],[1,"usize"],[1,"slice"],[1,"reference"],[1,"bool"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAYABwA="}],\
["heap_slope_trick",{"t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNN","n":["HeapSlopeTrick","Summary","add_abs","add_const","add_cutoff_anti_diagonal","add_cutoff_diagonal","articulation_points","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","cumulative_min_from_left","cumulative_min_from_right","default","default","eq","eval","fmt","fmt","from","from","get_argmin","get_minimum","get_tilt_maximum","get_tilt_minimum","hash","into","into","merge","new","shift","sliding_window_minimum","summary","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"heap_slope_trick"],[47,"alloc::vec"],[48,"core::fmt"],[49,"core::hash"],[50,"core::result"],[51,"core::any"]],"i":[0,0,2,2,2,2,2,2,8,2,8,2,8,2,8,2,8,2,2,2,8,8,2,2,8,2,8,2,2,2,2,8,2,8,0,2,2,2,2,2,8,2,8,2,8,2,8],"f":"``{{{f{bd}}h}j}000{{{f{d}}}{{n{{l{h}}}}}}{{{f{c}}}{{f{e}}}{}{}}0{{{f{bc}}}{{f{be}}}{}{}}0{{{f{d}}}d}{{{f{A`}}}A`}{{{f{c}}{f{be}}}j{}{}}0{{{f{c}}}j{}}0{{{f{bd}}}j}0{{}d}{{}A`}{{{f{A`}}{f{A`}}}Ab}{{{f{d}}h}h}{{{f{d}}{f{bAd}}}Af}{{{f{A`}}{f{bAd}}}Af}{cc{}}0{{{f{d}}}{{l{h}}}}{{{f{d}}}h}00{{{f{A`}}{f{bc}}}jAh}{ce{}{}}0{{dd}d};{{{f{bd}}h}j}{{{f{bd}}hh}j}{{{f{d}}}A`}{{{f{c}}}e{}{}}0{c{{Aj{e}}}{}{}}000{{{f{c}}}Al{}}0","D":"C`","p":[[0,"mut"],[5,"HeapSlopeTrick",0],[1,"reference"],[1,"i64"],[1,"unit"],[1,"array"],[5,"Vec",47],[5,"Summary",0],[1,"bool"],[5,"Formatter",48],[8,"Result",48],[10,"Hasher",49],[6,"Result",50],[5,"TypeId",51]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABcABQAIAAkAFAACABgAAQAgAAAAKAAHAA=="}],\
["heap_tricks",{"t":"FKFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNMNNNMNNNNMNNNMNNNNNNONNNNNNNNNNNNNNNNNN","n":["DoubleHeap","Handler","Nop","RemovableHeap","Sum","balance_left","balance_right","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","collect_left_sorted_vec","collect_right_sorted_vec","collect_sorted_vec","collect_sorted_vec","default","default","default","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","handler","hash","hash","into","into","into","into","is_empty","is_empty","left","left_len","len","len","move_left","move_right","new","new","peek","peek_left","peek_right","pop","pop_left","pop_left","pop_left","pop_left","pop_right","pop_right","pop_right","pop_right","push","push_left","push_left","push_left","push_left","push_right","push_right","push_right","push_right","remove_left_unchecked","remove_right_unchecked","remove_unchecked","right","right_len","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_handler"],"q":[[0,"heap_tricks"],[108,"core::marker"],[109,"core::cmp"],[110,"core::hash"],[111,"core::clone"],[112,"alloc::vec"],[113,"core::default"],[114,"core::fmt"],[115,"core::iter::traits::collect"],[116,"core::option"],[117,"core::ops::arith"],[118,"core::result"],[119,"core::any"]],"i":[0,0,0,0,0,2,2,10,11,2,13,10,11,2,13,10,11,2,13,10,11,2,13,10,10,11,11,2,13,2,2,2,13,10,11,2,13,10,11,10,11,2,13,10,11,2,13,13,2,10,11,10,11,2,13,2,13,11,2,2,13,2,2,2,13,13,2,2,13,9,10,11,2,9,10,11,2,13,9,10,11,2,9,10,11,2,2,2,13,11,2,10,11,2,13,10,11,2,13,10,11,2,13,10,11,2,13,2],"f":"`````{{{f{b{d{ce}}}}h}j{lnA`}{{Ab{c}}}}0{{{f{c}}}{{f{e}}}{}{}}000{{{f{bc}}}{{f{be}}}{}{}}000{{{f{Ad}}}Ad}{{{f{{Af{c}}}}}{{Af{c}}}Ah}{{{f{{d{ce}}}}}{{d{ce}}}AhAh}{{{f{{Aj{c}}}}}{{Aj{c}}}Ah}{{{f{c}}{f{be}}}j{}{}}000{{{f{c}}}j{}}00000{{{f{{d{ce}}}}}{{Al{c}}}{lnA`}{{Ab{c}}}}00{{{f{{Aj{c}}}}}{{Al{c}}}{lnA`}}{{}Ad}{{}{{Af{c}}}An}{{}{{d{cAd}}}{lnA`}}{{}{{Aj{c}}}{lnA`}}{{{f{Ad}}{f{Ad}}}B`}{{{f{{Af{c}}}}{f{{Af{c}}}}}B`Bb}{{{f{Ad}}{f{bBd}}}Bf}{{{f{{Af{c}}}}{f{bBd}}}BfBh}{{{f{{d{ce}}}}{f{bBd}}}Bf{lnA`Bh}{{Ab{c}}Bh}}{{{f{{Aj{c}}}}{f{bBd}}}Bf{lnA`Bh}}{cc{}}000{e{{Aj{c}}}{lnA`}{{Bl{}{{Bj{c}}}}}}{{{f{{d{ce}}}}}{{f{e}}}{lnA`}{{Ab{c}}}}{{{f{Ad}}{f{bc}}}jBn}{{{f{{Af{c}}}}{f{be}}}jA`Bn}{ce{}{}}000{{{f{{d{ce}}}}}B`{lnA`}{{Ab{c}}}}{{{f{{Aj{c}}}}}B`{lnA`}}`{{{f{{d{ce}}}}}h{lnA`}{{Ab{c}}}}0{{{f{{Aj{c}}}}}h{lnA`}}{{{f{b{d{ce}}}}}j{lnA`}{{Ab{c}}}}0{{}{{d{cAd}}}{lnA`}}{{}{{Aj{c}}}{lnA`}}{{{f{{Aj{c}}}}}{{C`{c}}}{lnA`}}{{{f{{d{ce}}}}}{{C`{c}}}{lnA`}{{Ab{c}}}}0{{{f{b{Aj{c}}}}}{{C`{c}}}{lnA`}}{{{f{bAb}}c}j{}}{{{f{bAd}}c}j{}}{{{f{b{Af{c}}}}c}j{CbCd}}{{{f{b{d{ce}}}}}{{C`{c}}}{lnA`}{{Ab{c}}}}3210{{{f{b{Aj{c}}}}c}j{lnA`}}432{{{f{b{d{ce}}}}c}j{lnA`}{{Ab{c}}}}5430001`={{{f{c}}}e{}{}}000{c{{Cf{e}}}{}{}}0000000{{{f{c}}}Ch{}}000{e{{d{ce}}}{lnA`}{{Ab{c}}}}","D":"En","p":[[0,"mut"],[5,"DoubleHeap",0],[1,"reference"],[1,"usize"],[1,"unit"],[10,"Copy",108],[10,"Ord",109],[10,"Hash",110],[10,"Handler",0],[5,"Nop",0],[5,"Sum",0],[10,"Clone",111],[5,"RemovableHeap",0],[5,"Vec",112],[10,"Default",113],[1,"bool"],[10,"PartialEq",109],[5,"Formatter",114],[8,"Result",114],[10,"Debug",114],[17,"Item"],[10,"IntoIterator",115],[10,"Hasher",110],[6,"Option",116],[10,"AddAssign",117],[10,"SubAssign",117],[6,"Result",118],[5,"TypeId",119]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAD0ADAAIABUAIgAJADAAAAAyAAEAOgAAAEAAAABHAAEASwABAFAAAQBUAAEAWgAAAFwADwA="}],\
["hld",{"t":"FFNNNNNNNNNNNOONNNNNNONNNNNNNN","n":["Hld","PathSegments","between","borrow","borrow","borrow_mut","borrow_mut","dist","from","from","from_edge_iterator","from_edges","from_short_parents","head","index","into","into","into_iter","lca","ledacy_iter_v","next","parent","path_segments","path_segments_by_index","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hld"],[30,"alloc::vec"],[31,"core::iter::traits::exact_size"],[32,"core::iter::traits::iterator"],[33,"core::option"],[34,"core::result"],[35,"core::any"]],"i":[0,0,1,1,12,1,12,1,1,12,1,1,1,1,1,1,12,12,1,1,12,1,1,1,1,12,1,12,1,12],"f":"``{{{d{b}}fff}h}{{{d{c}}}{{d{e}}}{}{}}0{{{d{jc}}}{{d{je}}}{}{}}0{{{d{b}}ff}f}{cc{}}0{{fc}{{n{b{l{{l{f}}}}}}}{{Ab{}{{A`{{n{ff}}}}}}}}{{f{d{{Ad{{n{ff}}}}}}}{{n{b{l{{l{f}}}}}}}}{{{l{f}}}{{n{b{l{{l{f}}}}}}}}``{ce{}{}}005{{{d{b}}ff}{{`{{Af{}{{A`{{n{ff}}}}}}}}}}{{{d{jAh}}}{{Aj{c}}}{}}`{{{d{b}}ff}Ah}{{{d{b}}ff}{{`{{Af{}{{A`{{n{ffhh}}}}}}}}}}{c{{Al{e}}}{}{}}000{{{d{c}}}An{}}0","D":"Bf","p":[[5,"Hld",0],[1,"reference"],[1,"usize"],[1,"bool"],[0,"mut"],[5,"Vec",30],[1,"tuple"],[17,"Item"],[10,"ExactSizeIterator",31],[1,"slice"],[10,"Iterator",32],[5,"PathSegments",0],[6,"Option",33],[6,"Result",34],[5,"TypeId",35]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAsABAAEAAMAEgAAABUAAAAZAAUA"}],\
["hopkarp",{"t":"FONNNNNONNNONNHNOONNNN","n":["HopkarpResult","backward","borrow","borrow_mut","clone","clone_into","clone_to_uninit","count","default","eq","fmt","forward","from","hash","hopkarp","into","left","right","to_owned","try_from","try_into","type_id"],"q":[[0,"hopkarp"],[22,"core::fmt"],[23,"core::hash"],[24,"alloc::vec"],[25,"core::result"],[26,"core::any"]],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3],"f":"``{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{f}}}f}{{{b{c}}{b{de}}}h{}{}}{{{b{c}}}h{}}`{{}f}{{{b{f}}{b{f}}}j}{{{b{f}}{b{dl}}}n}`{cc{}}{{{b{f}}{b{dc}}}hA`}{{Ab{b{{Af{{Ad{Ab}}}}}}}f}{ce{}{}}``{{{b{c}}}e{}{}}{c{{Ah{e}}}{}{}}0{{{b{c}}}Aj{}}","D":"l","p":[[1,"reference"],[0,"mut"],[5,"HopkarpResult",0],[1,"unit"],[1,"bool"],[5,"Formatter",22],[8,"Result",22],[10,"Hasher",23],[1,"usize"],[5,"Vec",24],[1,"slice"],[6,"Result",25],[5,"TypeId",26]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABAABAACAAUACQADAA4AAAARAAUA"}],\
["hungarian",{"t":"FKONNNNNNNONHMNOONNNNOM","n":["HungarianResult","Value","backward","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","fmt","forward","from","hungarian","infinity","into","left","right","to_owned","try_from","try_into","type_id","value","zero"],"q":[[0,"hungarian"],[23,"core::clone"],[24,"core::cmp"],[25,"core::fmt"],[26,"alloc::vec"],[27,"core::result"],[28,"core::any"]],"i":[0,0,3,3,3,3,3,3,3,3,3,3,0,5,3,3,3,3,3,3,3,3,5],"f":"```{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{{f{c}}}}}{{f{c}}}{hj}}{{{b{c}}{b{de}}}l{}{}}{{{b{c}}}l{}}{{{b{{f{c}}}}{b{{f{c}}}}}n{A`j}}{{{b{{f{c}}}}{b{dAb}}}Ad{Afj}}`{cc{}}{{{b{{Aj{{Ah{c}}}}}}}{{f{c}}}j}{{}j}{ce{}{}}``{{{b{c}}}e{}{}}{c{{Al{e}}}{}{}}0{{{b{c}}}An{}}`4","D":"Af","p":[[1,"reference"],[0,"mut"],[5,"HungarianResult",0],[10,"Clone",23],[10,"Value",0],[1,"unit"],[1,"bool"],[10,"PartialEq",24],[5,"Formatter",25],[8,"Result",25],[10,"Debug",25],[5,"Vec",26],[1,"slice"],[6,"Result",27],[5,"TypeId",28]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAwABAAEAAYADgAAABIAAwAXAAAA"}],\
["interval_heap",{"t":"FNNNNNNNNNNNNNNNNNNNNNNNN","n":["IntervalHeap","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","extend","fmt","from","from","from_iter","into","into_iter","new","peek_max","peek_min","pop_max","pop_min","push","to_owned","try_from","try_into","type_id"],"q":[[0,"interval_heap"],[25,"core::clone"],[26,"core::cmp"],[27,"core::iter::traits::collect"],[28,"core::fmt"],[29,"alloc::vec"],[30,"core::option"],[31,"core::result"],[32,"core::any"]],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":"`{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{{f{c}}}}}{{f{c}}}{hj}}{{{b{c}}{b{de}}}l{}{}}{{{b{c}}}l{}}{{}{{f{c}}}j}{{{b{{f{c}}}}{b{{f{c}}}}}n{A`j}}{{{b{d{f{c}}}}e}lj{{Ad{}{{Ab{c}}}}}}{{{b{{f{c}}}}{b{dAf}}}Ah{Ajj}}{cc{}}{{{Al{c}}}{{f{c}}}j}{e{{f{c}}}j{{Ad{}{{Ab{c}}}}}}{ce{}{}}{{{f{c}}}ej{}}8{{{b{{f{c}}}}}{{An{{b{c}}}}}j}0{{{b{d{f{c}}}}}{{An{c}}}j}0{{{b{d{f{c}}}}c}lj}{{{b{c}}}e{}{}}{c{{B`{e}}}{}{}}0{{{b{c}}}Bb{}}","D":"Ad","p":[[1,"reference"],[0,"mut"],[5,"IntervalHeap",0],[10,"Clone",25],[10,"Ord",26],[1,"unit"],[1,"bool"],[10,"PartialEq",26],[17,"Item"],[10,"IntoIterator",27],[5,"Formatter",28],[8,"Result",28],[10,"Debug",28],[5,"Vec",29],[6,"Option",30],[6,"Result",31],[5,"TypeId",32]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAA8ABAACAAgADAABAA8AAAAWAAMA"}],\
["io",{"t":"KHM","n":["ParseLine","input","parse_line"],"q":[[0,"io"]],"i":[0,0,1],"f":"`{{}cb}{{{f{d}}}b}","D":"f","p":[[10,"ParseLine",0],[1,"str"],[1,"reference"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAAAEAAAAAMA"}],\
["lagrange",{"t":"HHHH","n":["evaluate","interpolate","interpolate_first_n","interpolate_one_point_first_n"],"q":[[0,"lagrange"],[4,"fp"],[5,"alloc::vec"]],"i":[0,0,0,0],"f":"{{{f{{d{b}}}}b}b}{{{f{{d{{h{b}}}}}}}{{j{b}}}}{{{f{{d{b}}}}}{{j{b}}}}2","D":"j","p":[[5,"Fp",4],[1,"slice"],[1,"reference"],[1,"array"],[5,"Vec",5]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["lazy_segbeats",{"t":"KFNNNNNNNNNNNMMMNHNNNNNNNNM","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","clone_to_uninit","eq","fmt","from","into","max_value","min_value","mul_u32","new","open","query_max","query_min","query_sum","range_add","to_owned","try_from","try_into","type_id","zero"],"q":[[0,"lazy_segbeats"],[27,"core::clone"],[28,"core::ops::range"],[29,"core::cmp"],[30,"core::fmt"],[31,"core::result"],[32,"core::any"]],"i":[0,0,3,3,3,3,3,3,3,3,3,3,3,5,5,5,3,0,3,3,3,3,3,3,3,3,5],"f":"``{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{d{f{c}}}}ec}hj{l{A`{n}}}}0{{{b{{f{c}}}}}{{f{c}}}l}{{{b{c}}{b{de}}}h{}{}}{{{b{c}}}h{}}{{{b{{f{c}}}}{b{{f{c}}}}}AbAd}{{{b{{f{c}}}}{b{dAf}}}AhAj}{cc{}}{ce{}{}}{{}j}0{{{b{j}}Al}j}{{{b{{An{c}}}}}{{f{c}}}j}{{nc}{{B`{n}}}{{A`{n}}}}{{{b{{f{c}}}}e}cj{{A`{n}}}}00<{{{b{c}}}e{}{}}{c{{Bb{e}}}{}{}}0{{{b{c}}}Bd{}}7","D":"d","p":[[1,"reference"],[0,"mut"],[5,"Segbeats",0],[1,"unit"],[10,"Elm",0],[10,"Clone",27],[1,"usize"],[10,"RangeBounds",28],[1,"bool"],[10,"PartialEq",29],[5,"Formatter",30],[8,"Result",30],[10,"Debug",30],[1,"u32"],[1,"slice"],[5,"Range",28],[6,"Result",31],[5,"TypeId",32]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABkAAgAAAAsADgANAA=="}],\
["lazy_segtree",{"t":"FKRRMNNNNNNMNNNNNMMNNMNNNNN","n":["LazySegtree","Op","Operator","Value","apply","borrow","borrow_mut","clone","clone_into","clone_to_uninit","collect","compose","fmt","fold","from","from_iter","get","identity","identity_op","into","new","op","range_apply","to_owned","try_from","try_into","type_id"],"q":[[0,"lazy_segtree"],[27,"core::clone"],[28,"alloc::vec"],[29,"core::fmt"],[30,"core::ops::range"],[31,"core::iter::traits::collect"],[32,"core::result"],[33,"core::any"]],"i":[0,0,5,5,5,3,3,3,3,3,3,5,3,3,3,3,3,5,5,3,3,5,3,3,3,3,3],"f":"````{{{b{c}}{b{e}}}e{}{}}{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{{f{c}}}}}{{f{c}}}{hj}}{{{b{c}}{b{de}}}l{}{}}{{{b{c}}}l{}}{{{b{{f{c}}}}}nj}{{{b{c}}{b{c}}}c{}}{{{b{{f{c}}}}{b{dA`}}}Ab{Adj}}{{{b{d{f{c}}}}e}{}j{{Ah{Af}}}}{cc{}}{c{{f{e}}}{{Al{}{{Aj{}}}}}j}{{{b{{f{c}}}}Af}{}j}{{}c{}}0{ce{}{}}{{{b{An}}}{{f{c}}}j}8{{{b{d{f{c}}}}eb}lj{{Ah{Af}}}}{{{b{c}}}e{}{}}{c{{B`{e}}}{}{}}0{{{b{c}}}Bb{}}","D":"Bb","p":[[1,"reference"],[0,"mut"],[5,"LazySegtree",0],[10,"Clone",27],[10,"Op",0],[1,"unit"],[5,"Vec",28],[5,"Formatter",29],[8,"Result",29],[10,"Debug",29],[1,"usize"],[10,"RangeBounds",30],[17,"Item"],[10,"IntoIterator",31],[1,"slice"],[6,"Result",32],[5,"TypeId",33]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAoABAAGAAQADQAAABAAAAAYAAMA"}],\
["lg",{"t":"HHHHQHQQHQHHQHQ","n":["align_of","bools","format","hmap","hmap","hvec","hvec","lg","remove_ampersand","table","vec2","vmap","vmap","vvec","vvec"],"q":[[0,"lg"],[15,"alloc::string"],[16,"core::borrow"],[17,"core::iter::traits::collect"],[18,"core::fmt"],[19,"core::marker"],[20,"alloc::vec"],[21,"lg::map"],[22,"lg::vecs"],[23,"lg::vec2"]],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"`{ef{{j{h}}}{{n{}{{l{c}}}}}}{{{d{c}}}fA`}`````{{{d{b}}}{{d{b}}}}``````","D":"`","p":[[1,"str"],[1,"reference"],[5,"String",15],[1,"bool"],[10,"Borrow",16],[17,"Item"],[10,"IntoIterator",17],[10,"Debug",18],[10,"Copy",19],[17,"K"],[17,"V"],[5,"Vec",20],[1,"tuple"],[1,"slice"]],"r":[[3,21],[5,22],[10,23],[11,21],[13,22]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAA8AAQAAAA8A"}],\
["lin_ineq",{"t":"FTTKTNNNNNNNMNNNNNNNNNNNNNNHHNNNN","n":["Interval","MAX","MIN","Signed","ZERO","borrow","borrow_mut","clone","clone_into","clone_to_uninit","clone_to_uninit","contains","div_euclid","empty","fmt","from","full","intersection","into","is_empty","mul","mul","mul","mul","normalize","product","product","solve","solve_squeeze","to_owned","try_from","try_into","type_id"],"q":[[0,"lin_ineq"],[33,"core::clone"],[34,"core::fmt"],[35,"core::iter::traits::iterator"],[36,"core::result"],[37,"core::any"]],"i":[0,7,7,0,7,3,3,3,3,3,3,3,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3],"f":"`````{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{{f{c}}}}}{{f{c}}}h}{{{b{c}}{b{de}}}j{}{}}{{{b{c}}}j{}}0{{{f{c}}c}ln}{{nn}n}{{}{{f{c}}}n}{{{b{{f{c}}}}{b{dA`}}}Ab{Adn}}{cc{}}2{{{f{c}}{f{c}}}{{f{c}}}n}{ce{}{}}{{{f{c}}}ln}{{{f{c}}{b{{f{c}}}}}en{}}{{{f{c}}{f{c}}}en{}}{{{b{{f{c}}}}{f{c}}}en{}}{{{b{{f{c}}}}{b{{f{c}}}}}en{}}{{{f{c}}}{{f{c}}}n}{e{{f{c}}}n{{Ah{}{{Af{{b{{f{c}}}}}}}}}}{e{{f{c}}}n{{Ah{}{{Af{{f{c}}}}}}}}{{cc}{{f{c}}}n}{{cc{f{c}}}{{f{c}}}n}{{{b{c}}}e{}{}}{c{{Aj{e}}}{}{}}0{{{b{c}}}Al{}}","D":"Bh","p":[[1,"reference"],[0,"mut"],[5,"Interval",0],[10,"Clone",33],[1,"unit"],[1,"bool"],[10,"Signed",0],[5,"Formatter",34],[8,"Result",34],[10,"Debug",34],[17,"Item"],[10,"Iterator",35],[6,"Result",36],[5,"TypeId",37]],"r":[],"b":[[20,"impl-Mul%3C%26Interval%3CT%3E%3E-for-Interval%3CT%3E"],[21,"impl-Mul-for-Interval%3CT%3E"],[22,"impl-Mul%3CInterval%3CT%3E%3E-for-%26Interval%3CT%3E"],[23,"impl-Mul-for-%26Interval%3CT%3E"],[25,"impl-Product%3C%26Interval%3CT%3E%3E-for-Interval%3CT%3E"],[26,"impl-Product-for-Interval%3CT%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAA0ABAACAAEABQAGAA0AAAAeAAMA"}],\
["link_cut_tree",{"t":"IIFIKRNNNNNNNMNNNMNNNNNNNNNNN","n":["CommutLinkCutTree","LinkCutTree","LinkCutTreeBase","NonCommutLinkCutTree","Op","Value","borrow","borrow_mut","cut","evert","fold","from","from_values","identity","into","lca","link","mul","new","parent","set","try_from","try_into","type_id","undirected_cut","undirected_fold","undirected_has_edge","undirected_is_connected","undirected_link"],"q":[[0,"link_cut_tree"],[29,"link_cut_tree::base"],[30,"core::option"],[31,"core::iter::traits::collect"],[32,"core::ops::function"],[33,"core::result"],[34,"core::any"]],"i":[0,0,0,0,0,14,3,3,3,3,3,3,3,14,3,3,3,14,3,3,3,3,3,3,3,3,3,3,3],"f":"``````{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{d{f{c}}}}h}{{j{h}}}`}{{{b{d{f{c}}}}h}l`}{{{b{d{f{c}}}}h}{}`}{cc{}}{c{{f{e}}}{{A`{}{{n{}}}}}`}{{}c{}}{ce{}{}}{{{b{d{f{c}}}}hh}{{j{h}}}`}{{{b{d{f{c}}}}hh}l`}{{{b{c}}{b{c}}}c{}}{h{{f{c}}}`}:{{{b{d{f{c}}}}he}l`{{Ad{}{{Ab{}}}}}}{c{{Af{e}}}{}{}}0{{{b{c}}}Ah{}}{{{b{d{f{c}}}}hh}Aj`}{{{b{d{f{c}}}}hh}j`}111","D":"Bl","p":[[1,"reference"],[0,"mut"],[5,"LinkCutTreeBase",0,29],[1,"usize"],[6,"Option",30],[1,"unit"],[17,"Item"],[10,"IntoIterator",31],[17,"Output"],[10,"FnMut",32],[6,"Result",33],[5,"TypeId",34],[1,"bool"],[10,"Op",0]],"r":[[2,29]],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAcAEAAAAAYABwAIAA4AEgAWABcAGAA="}],\
["low_link",{"t":"FNNNNNNNNNNNNNNNNNNNNNN","n":["LowLink","add_edge","biconnected_components","borrow","borrow_mut","build","clone","clone_into","clone_to_uninit","default","eq","fmt","from","hash","into","is_articulation_point","is_bridge_unchecked","new","to_owned","try_from","try_into","two_edge_components","type_id"],"q":[[0,"low_link"],[23,"alloc::vec"],[24,"core::fmt"],[25,"core::hash"],[26,"core::result"],[27,"core::any"]],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":"`{{{f{bd}}hh}j}{{{f{d}}}{{n{{n{{l{h}}}}}}}}{{{f{c}}}{{f{e}}}{}{}}{{{f{bc}}}{{f{be}}}{}{}}{{{f{bd}}}j}{{{f{d}}}d}{{{f{c}}{f{be}}}j{}{}}{{{f{c}}}j{}}{{}d}{{{f{d}}{f{d}}}A`}{{{f{d}}{f{bAb}}}Ad}{cc{}}{{{f{d}}{f{bc}}}jAf}{ce{}{}}{{{f{d}}h}A`}{{{f{d}}hh}A`}{hd}{{{f{c}}}e{}{}}{c{{Ah{e}}}{}{}}0{{{f{d}}}{{n{{n{h}}}}}}{{{f{c}}}Aj{}}","D":"Af","p":[[0,"mut"],[5,"LowLink",0],[1,"reference"],[1,"usize"],[1,"unit"],[1,"array"],[5,"Vec",23],[1,"bool"],[5,"Formatter",24],[8,"Result",24],[10,"Hasher",25],[6,"Result",26],[5,"TypeId",27]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAwABQAEAAEABwAFAA4AAAATAAIAFwAAAA=="}],\
["manacher",{"t":"H","n":["manacher"],"q":[[0,"manacher"],[1,"alloc::vec"],[2,"core::cmp"]],"i":[0],"f":"{{{d{{b{c}}}}}{{h{f}}}j}","D":"d","p":[[1,"slice"],[1,"reference"],[1,"usize"],[5,"Vec",1],[10,"Eq",2]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["mincost_flow",{"t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Edge","MinCostFlow","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","default","default","eq","eq","flow","fmt","fmt","from","from","get_edge","hash","hash","into","into","new","slope","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"mincost_flow"],[38,"core::fmt"],[39,"core::hash"],[40,"alloc::vec"],[41,"core::result"],[42,"core::any"]],"i":[0,0,2,6,2,6,2,6,2,6,2,6,6,2,6,2,6,2,2,6,2,6,2,2,6,2,6,2,2,2,6,2,6,2,6,2,6,2],"f":"``{{{f{bd}}hhjj}h}{{{f{c}}}{{f{e}}}{}{}}0{{{f{bc}}}{{f{be}}}{}{}}0{{{f{l}}}l}{{{f{d}}}d}{{{f{c}}{f{be}}}n{}{}}0{{{f{c}}}n{}}00{{}l}{{}d}{{{f{l}}{f{l}}}A`}{{{f{d}}{f{d}}}A`}{{{f{bd}}hhj}{{Ab{jj}}}}{{{f{l}}{f{bAd}}}Af}{{{f{d}}{f{bAd}}}Af}{cc{}}0{{{f{d}}h}l}{{{f{l}}{f{bc}}}nAh}{{{f{d}}{f{bc}}}nAh}{ce{}{}}0{hd}{{{f{bd}}hhj}{{Aj{{Ab{jj}}}}}}{{{f{c}}}e{}{}}0{c{{Al{e}}}{}{}}000{{{f{c}}}An{}}0","D":"Ah","p":[[0,"mut"],[5,"MinCostFlow",0],[1,"reference"],[1,"usize"],[1,"i64"],[5,"Edge",0],[1,"unit"],[1,"bool"],[1,"tuple"],[5,"Formatter",38],[8,"Result",38],[10,"Hasher",39],[5,"Vec",40],[6,"Result",41],[5,"TypeId",42]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABoABAAEAA4AFAABABkAAQAfAAcA"}],\
["monotone_minima",{"t":"HHHHHH","n":["concave_maxplus_convolution","convex_minplus_convolution","monotone_maxima","monotone_maxima_by","monotone_minima","monotone_minima_by"],"q":[[0,"monotone_minima"],[6,"alloc::vec"],[7,"core::marker"],[8,"core::cmp"],[9,"core::ops::arith"],[10,"core::ops::function"]],"i":[0,0,0,0,0,0],"f":"{{{d{{b{c}}}}{d{{b{c}}}}}{{f{c}}}{hj{n{}{{l{}}}}}}0{{A`A`e}{{f{A`}}}j{{Ab{A`A`}{{l{c}}}}}}{{A`A`c}{{f{A`}}}{{Af{A`A`A`}{{l{Ad}}}}h}}10","D":"n","p":[[1,"slice"],[1,"reference"],[5,"Vec",6],[10,"Copy",7],[10,"Ord",8],[17,"Output"],[10,"Add",9],[1,"usize"],[10,"Fn",10],[6,"Ordering",8],[10,"FnMut",10]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["naive_poly",{"t":"HHHHHH","n":["add","div","eval","mul","pow","sub"],"q":[[0,"naive_poly"],[6,"alloc::vec"],[7,"core::marker"],[8,"core::cmp"],[9,"core::iter::traits::accum"],[10,"core::ops::arith"]],"i":[0,0,0,0,0,0],"f":"{{{d{{b{c}}}}{d{{b{c}}}}}{{f{c}}}{hjln}}{{{d{A`{f{c}}}}{d{{b{c}}}}}{{f{c}}}{hjlAb{Af{}{{Ad{}}}}{Ah{}{{Ad{}}}}}}{{{d{{b{c}}}}c}c{hl{Af{}{{Ad{}}}}nAj}}{{{d{{b{c}}}}{d{{b{c}}}}}{{f{c}}}{hl{Af{}{{Ad{}}}}n}}{{{f{c}}Al}{{f{c}}}{}}{{{d{{b{c}}}}{d{{b{c}}}}}{{f{c}}}{hjlnAb{Af{}{{Ad{}}}}}}","D":"n","p":[[1,"slice"],[1,"reference"],[5,"Vec",6],[10,"Copy",7],[10,"PartialEq",8],[10,"Sum",9],[10,"AddAssign",10],[0,"mut"],[10,"SubAssign",10],[17,"Output"],[10,"Mul",10],[10,"Div",10],[10,"MulAssign",10],[1,"u64"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["newton",{"t":"HH","n":["sqrt","triangular_root"],"q":[[0,"newton"]],"i":[0,0],"f":"{bb}0","D":"`","p":[[1,"u64"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAIAEAAAAAAAAQACAA=="}],\
["next_permutation",{"t":"HHHHHHHHHHHHHHH","n":["for_each_pairing","for_each_partition","for_each_partition_rev","for_each_permutation","for_each_shuffle","next_pairing","next_partition","next_permutation","next_shuffle","pairings","partitions","partitions_rev","permutations","prev_partition","shuffles"],"q":[[0,"next_permutation"],[15,"core::ops::function"],[16,"core::cmp"],[17,"alloc::vec"],[18,"core::clone"]],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"{{bc}d{{j{{h{{f{b}}}}}}}}00{{{h{l{f{c}}}}e}dn{{j{{h{{f{c}}}}}}}}{{{h{l{f{c}}}}be}dn{{j{{h{{f{c}}}}}}}}{{{h{l{f{b}}}}}A`}{{{h{l{Ab{b}}}}}A`}{{{h{l{f{c}}}}}A`n}{{{h{l{f{c}}}}b}A`n}{b{{Ab{{Ab{b}}}}}}00{{{Ab{c}}}{{Ab{{Ab{c}}}}}{nAd}}4{{{Ab{c}}b}{{Ab{{Ab{c}}}}}{nAd}}","D":"B`","p":[[1,"usize"],[1,"unit"],[1,"slice"],[1,"reference"],[10,"FnMut",15],[0,"mut"],[10,"Ord",16],[1,"bool"],[5,"Vec",17],[10,"Clone",18]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["numeric_search",{"t":"KTTTTTTTKKTTTHHHHHM","n":["Float","INFINITY","MAX","MIN","NEG_INFINITY","ONE","ONE","ONE","Signed","Unsigned","ZERO","ZERO","ZERO","binary_search_signed","binary_search_unsigned","exp_search_float","exp_search_signed","exp_search_unsigned","sqrt"],"q":[[0,"numeric_search"],[19,"core::ops::function"],[20,"core::option"]],"i":[0,6,1,1,6,6,5,1,0,0,6,5,1,0,0,0,0,0,6],"f":"`````````````{{cce}cb{{h{c}{{d{f}}}}}}{{cce}cj{{h{c}{{d{f}}}}}}{ecl{{h{c}{{d{f}}}}}}{e{{n{c}}}b{{h{c}{{d{f}}}}}}{e{{n{c}}}j{{h{c}{{d{f}}}}}}{ll}","D":"B`","p":[[10,"Signed",0],[17,"Output"],[1,"bool"],[10,"FnMut",19],[10,"Unsigned",0],[10,"Float",0],[6,"Option",20]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAMAEAAAAAMABAAIAA0A"}],\
["partially_persistent_union_find",{"t":"FNNNNNNNNNNNNNNNNNN","n":["PartiallyPersistentUnionFind","borrow","borrow_mut","clone","clone_into","clone_to_uninit","find","fmt","from","into","new","same","size","time","to_owned","try_from","try_into","type_id","union"],"q":[[0,"partially_persistent_union_find"],[19,"core::fmt"],[20,"core::option"],[21,"core::result"],[22,"core::any"]],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":"`{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{f}}}f}{{{b{c}}{b{de}}}h{}{}}{{{b{c}}}h{}}{{{b{f}}jj}j}{{{b{f}}{b{dl}}}n}{cc{}}{ce{}{}}{jf}{{{b{f}}jjj}A`}5{{{b{f}}jj}{{Ab{j}}}}{{{b{c}}}e{}{}}{c{{Ad{e}}}{}{}}0{{{b{c}}}Af{}}{{{b{df}}jjj}A`}","D":"Ad","p":[[1,"reference"],[0,"mut"],[5,"PartiallyPersistentUnionFind",0],[1,"unit"],[1,"usize"],[5,"Formatter",19],[8,"Result",19],[1,"bool"],[6,"Option",20],[6,"Result",21],[5,"TypeId",22]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAkAAwACAAQACAAAAA8AAwA="}],\
["randtools",{"t":"FFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["DistinctTwo","LogUniform","NonEmptySubRange","SimpleDigraph","SimpleDigraphEdges","SimpleGraph","SimpleGraphEdges","SubRange","Tree","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","sample","sample","sample","sample","sample","sample","sample","sample","sample","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"randtools"],[99,"core::fmt"],[100,"rand::rng"],[101,"core::marker"],[102,"core::ops::range"],[103,"alloc::vec"],[104,"core::result"],[105,"core::any"]],"i":[0,0,0,0,0,0,0,0,0,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13,3,6,7,8,9,10,11,12,13],"f":"`````````{{{b{c}}}{{b{e}}}{}{}}00000000{{{b{dc}}}{{b{de}}}{}{}}00000000{{{b{f}}{b{dh}}}j}{{{b{l}}{b{dh}}}j}{{{b{n}}{b{dh}}}j}{{{b{A`}}{b{dh}}}j}{{{b{Ab}}{b{dh}}}j}{{{b{Ad}}{b{dh}}}j}{{{b{Af}}{b{dh}}}j}{{{b{Ah}}{b{dh}}}j}{{{b{Aj}}{b{dh}}}j}{cc{}}00000000{ce{}{}}00000000{{{b{f}}{b{dc}}}Al{AnB`}}{{{b{l}}{b{dc}}}{{Bb{AlAl}}}{AnB`}}{{{b{n}}{b{dc}}}{{Bd{Al}}}{AnB`}}{{{b{A`}}{b{dc}}}{{Bd{Al}}}{AnB`}}{{{b{Ab}}{b{dc}}}{{Bf{{Bf{Al}}}}}{AnB`}}{{{b{Ad}}{b{dc}}}{{Bf{{Bf{Al}}}}}{AnB`}}{{{b{Af}}{b{dc}}}{{Bf{{Bf{Al}}}}}{AnB`}}{{{b{Ah}}{b{dc}}}{{Bf{{Bb{AlAl}}}}}{AnB`}}{{{b{Aj}}{b{dc}}}{{Bf{{Bb{AlAl}}}}}{AnB`}}{c{{Bh{e}}}{}{}}00000000000000000{{{b{c}}}Bj{}}00000000;;;;;;;;;","D":"Bd","p":[[1,"reference"],[0,"mut"],[5,"LogUniform",0],[5,"Formatter",99],[8,"Result",99],[5,"DistinctTwo",0],[5,"SubRange",0],[5,"NonEmptySubRange",0],[5,"Tree",0],[5,"SimpleGraph",0],[5,"SimpleDigraph",0],[5,"SimpleGraphEdges",0],[5,"SimpleDigraphEdges",0],[1,"usize"],[10,"Rng",100],[10,"Sized",101],[1,"tuple"],[5,"Range",102],[5,"Vec",103],[6,"Result",104],[5,"TypeId",105]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFEAAgAAACQANwAsAA=="}],\
["rational",{"t":"FKNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNMNNNNNNNNNNNNNNM","n":["Rational","Signed","add","add","add","add","add_assign","borrow","borrow_mut","clone","clone_into","clone_to_uninit","clone_to_uninit","cmp","decompose","default","div","div","div","div","div_assign","eq","fmt","from","from_str","generic_abs","generic_signum","into","into_f64","mul","mul","mul","mul","mul_assign","neg","new","one","partial_cmp","product","product","sub","sub","sub","sub","sub_assign","sum","sum","to_owned","try_from","try_into","type_id","zero"],"q":[[0,"rational"],[52,"core::clone"],[53,"core::cmp"],[54,"core::default"],[55,"core::fmt"],[56,"core::result"],[57,"core::option"],[58,"core::iter::traits::iterator"],[59,"core::any"]],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3],"f":"``{{{b{c}}{d{{b{c}}}}}ef{}}{{{d{{b{c}}}}{d{{b{c}}}}}ef{}}{{{d{{b{c}}}}{b{c}}}ef{}}{{{b{c}}{b{c}}}{{b{c}}}f}{{{d{h{b{c}}}}{b{c}}}jf}{{{d{c}}}{{d{e}}}{}{}}{{{d{hc}}}{{d{he}}}{}{}}{{{d{{b{c}}}}}{{b{c}}}{lf}}{{{d{c}}{d{he}}}j{}{}}{{{d{c}}}j{}}0{{{d{{b{c}}}}{d{{b{c}}}}}nf}{{{b{c}}}{{A`{c}}}f}{{}{{b{c}}}{Abf}}:9<;8{{{d{{b{c}}}}{d{{b{c}}}}}Adf}{{{d{{b{c}}}}{d{hAf}}}Ahf}{cc{}}{{{d{Aj}}}{{Al{{b{c}}e}}}f{}}{ff}0{ce{}{}}{{{b{c}}}Anf}{{{b{c}}{d{{b{c}}}}}ef{}}{{{d{{b{c}}}}{d{{b{c}}}}}ef{}}{{{d{{b{c}}}}{b{c}}}ef{}}{{{b{c}}{b{c}}}{{b{c}}}f}{{{d{h{b{c}}}}{b{c}}}jf}{{{b{c}}}ef{}}{{cc}{{b{c}}}f}{{}f}{{{d{{b{c}}}}{d{{b{c}}}}}{{B`{n}}}f}{e{{b{c}}}f{{Bd{}{{Bb{{d{{b{c}}}}}}}}}}{e{{b{c}}}f{{Bd{}{{Bb{{b{c}}}}}}}}7:89610{{{d{c}}}e{}{}}{c{{Al{e}}}{}{}}0{{{d{c}}}Bf{}}6","D":"d","p":[[5,"Rational",0],[1,"reference"],[10,"Signed",0],[0,"mut"],[1,"unit"],[10,"Clone",52],[6,"Ordering",53],[1,"array"],[10,"Default",54],[1,"bool"],[5,"Formatter",55],[8,"Result",55],[1,"str"],[6,"Result",56],[1,"f64"],[6,"Option",57],[17,"Item"],[10,"Iterator",58],[5,"TypeId",59]],"r":[],"b":[[2,"impl-Add%3C%26Rational%3CT%3E%3E-for-Rational%3CT%3E"],[3,"impl-Add-for-%26Rational%3CT%3E"],[4,"impl-Add%3CRational%3CT%3E%3E-for-%26Rational%3CT%3E"],[5,"impl-Add-for-Rational%3CM%3E"],[16,"impl-Div%3CRational%3CT%3E%3E-for-%26Rational%3CT%3E"],[17,"impl-Div-for-Rational%3CM%3E"],[18,"impl-Div%3C%26Rational%3CT%3E%3E-for-Rational%3CT%3E"],[19,"impl-Div-for-%26Rational%3CT%3E"],[29,"impl-Mul%3C%26Rational%3CT%3E%3E-for-Rational%3CT%3E"],[30,"impl-Mul-for-%26Rational%3CT%3E"],[31,"impl-Mul%3CRational%3CT%3E%3E-for-%26Rational%3CT%3E"],[32,"impl-Mul-for-Rational%3CM%3E"],[38,"impl-Product%3C%26Rational%3CT%3E%3E-for-Rational%3CT%3E"],[39,"impl-Product-for-Rational%3CT%3E"],[40,"impl-Sub-for-Rational%3CM%3E"],[41,"impl-Sub%3C%26Rational%3CT%3E%3E-for-Rational%3CT%3E"],[42,"impl-Sub%3CRational%3CT%3E%3E-for-%26Rational%3CT%3E"],[43,"impl-Sub-for-%26Rational%3CT%3E"],[45,"impl-Sum%3C%26Rational%3CT%3E%3E-for-Rational%3CT%3E"],[46,"impl-Sum-for-Rational%3CT%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADIAAwAAABcAGQACAB0AFwA="}],\
["rb",{"t":"RFKFFKFRRNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNMNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNN","n":["Acc","Multimap","MultimapOp","MultimapSeg","Multiset","Op","Seg","Value","Value","append","binary_search","binary_search","binary_search","binary_search_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","display","fmt","fmt","fmt","fold","from","from","from","from","from_iter","identity","insert","insert","insert","insert","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","iter","iter","iter","iter","join","len","len","len","len","lower_bound","lower_bound","lower_bound","mul","new","new","new","new","nth","nth","nth","nth","nth_mut","nth_mut","partition_point","partition_point","partition_point","remove","remove","remove","remove","remove_nth","remove_nth","remove_nth","split_off","table","to_acc","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upper_bound","upper_bound","upper_bound"],"q":[[0,"rb"],[104,"rb::seq"],[105,"rb::map"],[106,"core::result"],[107,"core::marker"],[108,"core::cmp"],[109,"core::borrow"],[110,"core::fmt"],[111,"core::ops::range"],[112,"core::iter::traits::collect"],[113,"core::option"],[114,"core::ops::function"],[115,"core::any"]],"i":[13,0,0,0,0,0,0,13,5,2,6,14,15,6,6,14,15,2,6,14,15,2,6,14,15,2,2,14,15,2,2,6,14,15,2,2,5,6,14,15,2,6,14,15,2,6,14,15,2,6,14,15,2,6,14,15,2,13,6,14,15,2,6,14,15,5,6,14,15,2,6,14,15,2,6,2,6,14,15,6,14,15,2,6,14,15,2,2,13,6,14,15,2,6,14,15,2,6,14,15,2,6,14,15],"f":"`````````{{{f{b{d{c}}}}{f{b{d{c}}}}}hj}{{{f{{l{eg}}}}{f{c}}}{{Ab{{A`{fn}}n}}}{AdAf}{Af{Ah{c}}Af}Aj}{{{f{{Al{eg}}}}{f{c}}}{{Ab{{A`{{f{g}}n}}n}}}{AdAf}{Af{Ah{c}}Af}{}}{{{f{{An{e}}}}{f{c}}}{{Ab{nn}}}{AdAf}{Af{Ah{c}}Af}}{{{f{{l{eg}}}}{f{c}}}{{Ab{{A`{{`{{`{eg}}}}n}}n}}}{AdAf}{Af{Ah{c}}Af}Aj}{{{f{c}}}{{f{e}}}{}{}}000{{{f{bc}}}{{f{be}}}{}{}}000{{}{{l{ce}}}AfAj}{{}{{Al{ce}}}Af{}}{{}{{An{c}}}Af}{{}{{d{c}}}j}{{{f{{d{c}}}}}{{`{c}}}j}{{{f{{Al{ce}}}}{f{bB`}}}Bb{AfBd}Bd}{{{f{{An{c}}}}{f{bB`}}}Bb{AfBd}}{{{f{{d{c}}}}{f{bB`}}}Bbj}{{{f{{d{c}}}}e}{}j{{Bf{n}}}}{cc{}}000{c{{d{e}}}{{Bj{}{{Bh{}}}}}j}{{}c{}}{{{f{b{l{ce}}}}c}hAfAj}{{{f{b{Al{ce}}}}ce}hAf{}}{{{f{b{An{c}}}}c}hAf}{{{f{b{d{c}}}}n}hj}{ce{}{}}000{{{f{{l{ce}}}}}gAfAj{}}{{{f{{Al{ce}}}}}gAf{}{}}{{{f{{An{c}}}}}eAf{}}{{{f{{d{c}}}}}ej{}}{{{f{{l{ce}}}}}BlAfAj}{{{f{{Al{ce}}}}}BlAf{}}{{{f{{An{c}}}}}BlAf}{{{f{{d{c}}}}}Blj}{{{f{{l{ce}}}}}{{`{ce}}}AfAj}{{{f{{Al{ce}}}}}{{`{ce}}}Af{}}{{{f{{An{c}}}}}{{`{c}}}Af}{{{f{{d{c}}}}}{{`{c}}}j}{{{Bn{{f{c}}}}{f{e}}{Bn{{f{c}}}}}c{}{}}{{{f{{l{ce}}}}}nAfAj}{{{f{{Al{ce}}}}}nAf{}}{{{f{{An{c}}}}}nAf}{{{f{{d{c}}}}}nj}{{{f{{l{ce}}}}{f{c}}}nAfAj}{{{f{{Al{ce}}}}{f{c}}}nAf{}}{{{f{{An{c}}}}{f{c}}}nAf}{{{f{c}}{f{c}}}c{}}{{}{{l{ce}}}AfAj}{{}{{Al{ce}}}Af{}}{{}{{An{c}}}Af}{{}{{d{c}}}j}{{{f{{l{ce}}}}n}{{A`{{f{c}}f}}}AfAj}{{{f{{Al{ce}}}}n}{{A`{{f{c}}{f{e}}}}}Af{}}{{{f{{An{c}}}}n}{{f{c}}}Af}{{{f{{d{c}}}}n}fj}{{{f{b{l{ce}}}}n}{{A`{{f{c}}{f{b}}}}}AfAj}{{{f{b{d{c}}}}n}{{`{c}}}j}{{{f{{l{ce}}}}g}nAfAj{{Cb{{f{c}}}{{C`{Bl}}}}}}{{{f{{Al{ce}}}}g}nAf{}{{Cb{{f{c}}}{{C`{Bl}}}}}}{{{f{{An{c}}}}e}nAf{{Cb{{f{c}}}{{C`{Bl}}}}}}{{{f{b{l{eg}}}}{f{c}}}{{Bn{{A`{e}}}}}{AdAf}{Af{Ah{c}}Af}Aj}{{{f{b{Al{eg}}}}{f{c}}}{{Bn{{A`{eg}}}}}{AdAf}{Af{Ah{c}}Af}{}}{{{f{b{An{e}}}}{f{c}}}{{Bn{e}}}{AdAf}{Af{Ah{c}}Af}}{{{f{b{d{c}}}}n}{}j}{{{f{b{l{ce}}}}n}{{A`{c}}}AfAj}{{{f{b{Al{ce}}}}n}{{A`{ce}}}Af{}}{{{f{b{An{c}}}}n}cAf}{{{f{b{d{c}}}}n}{{d{c}}}j}{{{f{{d{c}}}}}{{`{c}}}j}{{{f{c}}}e{}{}}{c{{Ab{e}}}{}{}}0000000{{{f{c}}}Cd{}}000{{{f{{l{ce}}}}{f{c}}}nAfAj}{{{f{{Al{ce}}}}{f{c}}}nAf{}}{{{f{{An{c}}}}{f{c}}}nAf}","D":"Ab","p":[[0,"mut"],[5,"Seg",0,104],[1,"reference"],[1,"unit"],[10,"Op",0,104],[5,"MultimapSeg",0,105],[1,"usize"],[1,"tuple"],[6,"Result",106],[10,"Sized",107],[10,"Ord",108],[10,"Borrow",109],[10,"MultimapOp",0,105],[5,"Multimap",0,105],[5,"Multiset",0,105],[5,"Formatter",110],[8,"Result",110],[10,"Debug",110],[10,"RangeBounds",111],[17,"Item"],[10,"IntoIterator",112],[1,"bool"],[6,"Option",113],[17,"Output"],[10,"FnMut",114],[5,"TypeId",115]],"r":[[1,105],[2,105],[3,105],[4,105],[5,104],[6,104]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAF8AAwABAB4AJAAFAC4AOgA="}],\
["rbtree",{"t":"FFKFRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNMNNNNNNNNNNN","n":["Iter","Nop","Op","RbTree","Summary","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","default","delete","eq","fmt","fold","from","from","from","from_iter","get","hash","insert","into","into","into","into_iter","into_iter","is_empty","iter","len","merge","merge3","new","next","op","op","partition_point","push_back","push_front","singleton","split","split3","summarize","summarize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"rbtree"],[59,"core::clone"],[60,"core::cmp"],[61,"core::fmt"],[62,"core::option"],[63,"core::ops::range"],[64,"core::iter::traits::collect"],[65,"core::marker"],[66,"core::hash"],[67,"core::ops::function"],[68,"core::result"],[69,"core::any"]],"i":[0,0,0,0,6,6,3,27,21,3,27,21,3,3,3,3,3,3,3,3,3,27,21,3,3,3,3,3,27,21,3,21,3,3,3,3,3,3,21,6,27,3,3,3,3,3,3,6,27,3,3,27,21,3,27,21,3,27,21],"f":"``````{{{b{c}}}{{b{e}}}{}{}}00{{{b{dc}}}{{b{de}}}{}{}}00{{{b{{f{ce}}}}}{{f{ce}}}h{{l{}{{j{c}}}}}}{{{b{c}}{b{de}}}n{}{}}{{{b{c}}}n{}}{{}{{f{ce}}}{}{{l{}{{j{c}}}}}}{{{b{d{f{ce}}}}A`}c{}{{l{}{{j{c}}}}}}{{{b{{f{ce}}}}{b{{f{ce}}}}}AbAd{{l{}{{j{c}}}}}}{{{b{{f{ce}}}}{b{dAf}}}AhAj{{l{}{{j{c}}}}}}{{{b{{f{ce}}}}g}Al{}{{l{}{{j{c}}}}}{{An{A`}}}}{cc{}}00{e{{f{cg}}}{}{{Bb{}{{B`{c}}}}}{{l{}{{j{c}}}}}}{{{b{d{f{ce}}}}A`}cBd{{l{}{{j{c}}}}}}{{{b{{f{ce}}}}{b{dg}}}nBf{{l{}{{j{c}}}}}Bh}{{{b{d{f{ce}}}}A`c}n{}{{l{}{{j{c}}}}}}{ce{}{}}00{{{b{{f{c}}}}}el{}}1{{{b{{f{ce}}}}}Ab{}{{l{}{{j{c}}}}}}{{{b{{f{ce}}}}}{{Bj{ce}}}{}{{l{}{{j{c}}}}}}{{{b{{f{ce}}}}}A`{}{{l{}{{j{c}}}}}}{{{f{ce}}{f{ce}}}{{f{ce}}}{}{{l{}{{j{c}}}}}}{{{f{ce}}{f{ce}}{f{ce}}}{{f{ce}}}{}{{l{}{{j{c}}}}}}{{}{{f{ce}}}{}{{l{}{{j{c}}}}}}{{{b{d{Bj{ce}}}}}{{Al{g}}}{}{{l{}{{j{c}}}}}{}}{{cc}c{}}0{{{b{{f{ce}}}}g}A`{}{{l{}{{j{c}}}}}{{Bn{b}{{Bl{Ab}}}}}}{{{b{d{f{ce}}}}c}n{}{{l{}{{j{c}}}}}}0{c{{f{ce}}}{}{{l{}{{j{c}}}}}}{{{f{ce}}A`}{{C`{{f{ce}}}}}{}{{l{}{{j{c}}}}}}{{{f{ce}}A`A`}{{C`{{f{ce}}}}}{}{{l{}{{j{c}}}}}}{{{b{c}}}e{}{}}00{c{{Cb{e}}}{}{}}00000{{{b{c}}}Cd{}}00","D":"D`","p":[[1,"reference"],[0,"mut"],[5,"RbTree",0],[10,"Clone",59],[17,"Value"],[10,"Op",0],[1,"unit"],[1,"usize"],[1,"bool"],[10,"PartialEq",60],[5,"Formatter",61],[8,"Result",61],[10,"Debug",61],[6,"Option",62],[10,"RangeBounds",63],[17,"Item"],[10,"IntoIterator",64],[10,"Copy",65],[10,"Hash",66],[10,"Hasher",66],[5,"Iter",0],[17,"Output"],[10,"Fn",67],[1,"array"],[6,"Result",68],[5,"TypeId",69],[5,"Nop",0]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABsABwAHAAkAEgABABoAAAAfAAEAJwAAACkAAAAxAAoA"}],\
["riff",{"t":"TKRTTKKKKKRTNNHHNNNNMMMHNNNNNNNNNNNNMMMNNNNNNNNNNNNNNNNNNNNM","n":["BITS","ChangeMinMax","Item","MAX","ONE","PopIf","SliceAccum","SliceBinarySearch","SliceChunks","Unsigned","Value","ZERO","bit_length","bit_length","bitmask_combinations","bitmask_subsets","change_max","change_max","change_min","change_min","chunk_by","for_each_backward","for_each_forward","i2powm1","lower_bound","lower_bound","lower_bound_by","lower_bound_by","lower_bound_by_key","lower_bound_by_key","lower_bound_value","lower_bound_value","lower_bound_value_by","lower_bound_value_by","lower_bound_value_by_key","lower_bound_value_by_key","partition_point","partition_point_value","pop_if","prefix_sum","prefix_sum","prefix_sum_inv","prefix_sum_inv","suffix_sum","suffix_sum","suffix_sum_inv","suffix_sum_inv","upper_bound","upper_bound","upper_bound_by","upper_bound_by","upper_bound_by_key","upper_bound_by_key","upper_bound_value","upper_bound_value","upper_bound_value_by","upper_bound_value_by","upper_bound_value_by_key","upper_bound_value_by_key","wrapping_neg"],"q":[[0,"riff"],[60,"riff::numeric_traits"],[61,"riff::change_min_max"],[62,"riff::slice_chunks"],[63,"core::ops::function"],[64,"riff::slice_accum"],[65,"riff::slice_binary_search"],[66,"core::cmp"],[67,"core::option"],[68,"riff::pop_if"],[69,"riff::bitmask_iterators"],[70,"riff::bitmask_operations"]],"i":[2,0,8,2,2,0,0,0,0,0,19,2,2,2,0,0,4,4,4,4,8,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,19,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,2],"f":"````````````{{}b}0{{bb}{{`{c}}}d}{c{{`{c}}}d}{{{j{fh}}h}l}000{{{j{{A`{}{{n{c}}}}}}e}{{`{ce}}}{}{{Af{{j{c}}{j{c}}}{{Ab{Ad}}}}}}{{{j{fAh}}e}l{}{{Af{{j{fc}}{j{fc}}}}}}0{bcd}{{{j{Aj}}{j{c}}}AlAn}0{{{j{Aj}}e}Al{}{{Af{{j{c}}}{{Ab{B`}}}}}}0{{{j{Aj}}{j{c}}g}AlAn{}{{Af{{j{e}}}{{Ab{c}}}}}}0{{{j{Aj}}{j{c}}}{{Bb{{j{c}}}}}An}0{{{j{Aj}}e}{{Bb{{j{c}}}}}{}{{Af{{j{c}}}{{Ab{B`}}}}}}0{{{j{Aj}}{j{c}}g}{{Bb{{j{e}}}}}An{}{{Af{{j{e}}}{{Ab{c}}}}}}0{{{j{Aj}}e}Al{}{{Af{{j{c}}}{{Ab{Ad}}}}}}{{{j{Aj}}e}{{Bb{{j{c}}}}}{}{{Af{{j{c}}}{{Ab{Ad}}}}}}{{{j{f{Bf{}{{Bd{c}}}}}}e}{{Bb{c}}}{}{{Bh{{j{fc}}}{{Ab{Ad}}}}}}{{{j{fAh}}}l}0000000998877665544{dd}","D":"Bj","p":[[1,"u32"],[10,"Unsigned",0,60],[0,"mut"],[10,"ChangeMinMax",0,61],[1,"reference"],[1,"unit"],[17,"Item"],[10,"SliceChunks",0,62],[17,"Output"],[1,"bool"],[10,"FnMut",63],[10,"SliceAccum",0,64],[10,"SliceBinarySearch",0,65],[1,"usize"],[10,"Ord",66],[6,"Ordering",66],[6,"Option",67],[17,"Value"],[10,"PopIf",0,68],[10,"FnOnce",63]],"r":[[1,61],[5,68],[6,64],[7,65],[8,62],[9,60],[14,69],[15,69],[23,70]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACcABgABAAAAAwACAAsAAwARAAMAGQAOADAADAA="}],\
["segbeats",{"t":"KFNNNNNNNNNNNMMMNHNNNNNNNM","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","clone_to_uninit","eq","fmt","from","into","max_value","min_value","mul_u32","new","open","query_max","query_min","query_sum","to_owned","try_from","try_into","type_id","zero"],"q":[[0,"segbeats"],[26,"core::clone"],[27,"core::ops::range"],[28,"core::cmp"],[29,"core::fmt"],[30,"core::result"],[31,"core::any"]],"i":[0,0,3,3,3,3,3,3,3,3,3,3,3,5,5,5,3,0,3,3,3,3,3,3,3,5],"f":"``{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{d{f{c}}}}ec}hj{l{A`{n}}}}0{{{b{{f{c}}}}}{{f{c}}}l}{{{b{c}}{b{de}}}h{}{}}{{{b{c}}}h{}}{{{b{{f{c}}}}{b{{f{c}}}}}AbAd}{{{b{{f{c}}}}{b{dAf}}}AhAj}{cc{}}{ce{}{}}{{}j}0{{{b{j}}Al}j}{{{b{{An{c}}}}}{{f{c}}}j}{{nc}{{B`{n}}}{{A`{n}}}}{{{b{{f{c}}}}e}cj{{A`{n}}}}00{{{b{c}}}e{}{}}{c{{Bb{e}}}{}{}}0{{{b{c}}}Bd{}}7","D":"d","p":[[1,"reference"],[0,"mut"],[5,"Segbeats",0],[1,"unit"],[10,"Elm",0],[10,"Clone",26],[1,"usize"],[10,"RangeBounds",27],[1,"bool"],[10,"PartialEq",28],[5,"Formatter",29],[8,"Result",29],[10,"Debug",29],[1,"u32"],[1,"slice"],[5,"Range",27],[6,"Result",30],[5,"TypeId",31]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABgAAgAAAAsADgAMAA=="}],\
["segbeats_task3",{"t":"KFNNNNNNNNNNNNMMMNHNNNNNNNNM","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","clone_to_uninit","count_changes","eq","fmt","from","into","max_value","min_value","mul_u32","new","open","query_max","query_min","query_sum","range_add","to_owned","try_from","try_into","type_id","zero"],"q":[[0,"segbeats_task3"],[28,"core::clone"],[29,"core::ops::range"],[30,"core::cmp"],[31,"core::fmt"],[32,"core::result"],[33,"core::any"]],"i":[0,0,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,3,0,3,3,3,3,3,3,3,3,5],"f":"``{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{d{f{c}}}}ec}hj{l{A`{n}}}}0{{{b{{f{c}}}}}{{f{c}}}l}{{{b{c}}{b{de}}}h{}{}}{{{b{c}}}h{}}{{{b{{f{c}}}}e}Abj{{A`{n}}}}{{{b{{f{c}}}}{b{{f{c}}}}}AdAf}{{{b{{f{c}}}}{b{dAh}}}Ajj}{cc{}}{ce{}{}}{{}j}0{{{b{j}}Al}j}{{{b{{An{c}}}}}{{f{c}}}j}{{nc}{{B`{n}}}{{A`{n}}}}{{{b{{f{c}}}}e}cj{{A`{n}}}}00={{{b{c}}}e{}{}}{c{{Bb{e}}}{}{}}0{{{b{c}}}Bd{}}7","D":"d","p":[[1,"reference"],[0,"mut"],[5,"Segbeats",0],[1,"unit"],[10,"Elm",0],[10,"Clone",28],[1,"usize"],[10,"RangeBounds",29],[1,"u64"],[1,"bool"],[10,"PartialEq",30],[5,"Formatter",31],[8,"Result",31],[1,"u32"],[1,"slice"],[5,"Range",29],[6,"Result",32],[5,"TypeId",33]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABoAAgAAAAwADwANAA=="}],\
["segtree",{"t":"FFFKFFFRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNN","n":["Dense2dEntry","Dense2dSegtree","Entry","Op","Segtree","SegtreeWithCompression","Sparse2dSegtree","Value","apply","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","collect_map","collect_map","collect_vec","deref","deref","deref_mut","deref_mut","drop","drop","entry","entry","entry","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_len","identity","index","index","index","index","index","into","into","into","into","into","into","into_iter","iter","iter","iter","iter","keys","max_right","min_left","mul","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"segtree"],[96,"core::cmp"],[97,"core::clone"],[98,"core::ops::function"],[99,"alloc::collections::btree::map"],[100,"alloc::vec"],[101,"core::fmt"],[102,"core::ops::range"],[103,"core::iter::traits::collect"],[104,"core::slice::iter"],[105,"core::iter::traits::iterator"],[106,"core::result"],[107,"core::any"]],"i":[0,0,0,0,0,0,0,7,2,9,9,16,11,2,14,17,9,16,11,2,14,17,11,2,14,16,17,16,17,16,17,9,11,14,9,16,11,2,14,9,11,2,14,9,16,11,2,14,17,9,11,2,9,7,9,11,2,2,14,9,16,11,2,14,17,9,9,11,2,14,11,9,9,7,9,11,2,14,9,16,11,2,14,17,9,16,11,2,14,17,9,16,11,2,14,17],"f":"````````{{{f{b{d{ceg}}}}{f{c}}{f{e}}i}h{jl}{jl}n{{A`{{f{b}}}}}}{{{f{{Ab{c}}}}}{{f{Ad}}}n}{{{f{c}}}{{f{e}}}{}{}}00000{{{f{bc}}}{{f{be}}}{}{}}00000{{{f{{Af{ce}}}}}{{Ah{c}}}{lj}n}{{{f{{d{ceg}}}}}{{Ah{{Aj{ce}}}}}{ljl}{ljl}n}{{{f{{Al{c}}}}}{{An{An}}}n}{{{f{{B`{c}}}}}{{f{e}}}n{}}{{{f{{Bb{c}}}}}{{f{e}}}n{}}{{{f{b{B`{c}}}}}{{f{be}}}n{}}{{{f{b{Bb{c}}}}}{{f{be}}}n{}}{{{f{b{B`{c}}}}}hn}{{{f{b{Bb{c}}}}}hn}{{{f{b{Ab{c}}}}Bd}{{B`{c}}}n}{{{f{b{Af{ce}}}}{f{c}}}{{B`{e}}}jn}{{{f{b{Al{c}}}}BdBd}{{Bb{c}}}n}{{{f{{Ab{c}}}}{f{bBf}}}Bhn}{{{f{{B`{c}}}}{f{bBf}}}Bhn}{{{f{{Af{ce}}}}{f{bBf}}}BhBjn}{{{f{{d{ceg}}}}{f{bBf}}}BhBjBjn}{{{f{{Al{c}}}}{f{bBf}}}Bhn}{{{f{{Ab{c}}}}e}{}n{{Bl{Bd}}}}{{{f{{Af{ce}}}}g}{}jn{{Bl{c}}}}{{{f{{d{ceg}}}}ik}{}{jl}{jl}n{{Bl{c}}}{{Bl{e}}l}}{{{f{{Al{c}}}}eg}{}n{{Bl{Bd}}}{{Bl{Bd}}}}{cc{}}00000{c{{Ab{e}}}{{C`{}{{Bn{}}}}}n}{e{{Af{cg}}}{lj}{{C`{}{{Bn{{Aj{c}}}}}}}n}{g{{d{cei}}}{jl}{jl}{{C`{}{{Bn{{Aj{ce}}}}}}}n}{Bd{{Ab{c}}}n}{{}c{}}{{{f{{Ab{c}}}}Bd}{{f{e}}}n{}}{{{f{{Af{ce}}}}c}{{f{g}}}jn{}}{{{f{{d{ceg}}}}{Aj{ce}}}{{f{i}}}jjn{}}{{{f{{d{ceg}}}}c}{{f{i}}}jjn{}}{{{f{{Al{c}}}}Bd}{{f{e}}}n{}}{ce{}{}}00000{{{f{{Ab{c}}}}}en{}}{{{f{{Ab{c}}}}}Cbn}{{{f{{Af{ce}}}}}{{`{{Cd{}{{Bn{{Aj{{f{c}}f}}}}}}}}}jn}{{{f{{d{ceg}}}}}{{`{{Cd{}{{Bn{{Aj{{f{c}}{f{e}}f}}}}}}}}}{jl}{jl}n}{{{f{{Al{c}}}}}{{`{{Cd{}{{Bn{{f{Ad}}}}}}}}}n}{{{f{{Af{ce}}}}}{{f{{Ad{c}}}}}jn}{{{f{{Ab{c}}}}Bde}Bdn{{A`{f}{{Cf{Ch}}}}}}0{{{f{c}}{f{c}}}c{}}{{{f{Ad}}}{{Ab{c}}}n}{{{f{{Ad{{Aj{c}}}}}}}{{Af{ce}}}{lj}n}{{{f{{Ad{{Aj{ce}}}}}}}{{d{ceg}}}{jl}{jl}n}{{{f{{Ad{An}}}}}{{Al{c}}}n}{c{{Cj{e}}}{}{}}00000000000{{{f{c}}}Cl{}}00000","D":"En","p":[[0,"mut"],[5,"Sparse2dSegtree",0],[1,"reference"],[1,"unit"],[10,"Ord",96],[10,"Clone",97],[10,"Op",0],[10,"FnMut",98],[5,"Segtree",0],[1,"slice"],[5,"SegtreeWithCompression",0],[5,"BTreeMap",99],[1,"tuple"],[5,"Dense2dSegtree",0],[5,"Vec",100],[5,"Entry",0],[5,"Dense2dEntry",0],[1,"usize"],[5,"Formatter",101],[8,"Result",101],[10,"Debug",101],[10,"RangeBounds",102],[17,"Item"],[10,"IntoIterator",103],[5,"Iter",104],[10,"Iterator",105],[17,"Output"],[1,"bool"],[6,"Result",106],[5,"TypeId",107]],"r":[],"b":[[56,"impl-Index%3C(K,+L)%3E-for-Sparse2dSegtree%3CK,+L,+O%3E"],[57,"impl-Index%3CK%3E-for-Sparse2dSegtree%3CK,+L,+O%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADEABwALAAsAGgAFACMABAAyAAIANwAEAEIAAABPABEA"}],\
["skew_heap",{"t":"FNNNNNNNNNNNNNNNNHNNNNNNNNNN","n":["SkewHeap","borrow","borrow_mut","clear","clone","clone_into","clone_to_uninit","default","eq","extend","extend","fmt","from","from_iter","hash","into","into_sorted_vec","meld","meld","new","peek","pop","push","singleton","to_owned","try_from","try_into","type_id"],"q":[[0,"skew_heap"],[28,"core::cmp"],[29,"core::clone"],[30,"core::marker"],[31,"core::iter::traits::collect"],[32,"core::fmt"],[33,"core::hash"],[34,"alloc::vec"],[35,"core::option"],[36,"core::result"],[37,"core::any"]],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3],"f":"`{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{d{f{c}}}}}hj}{{{b{{f{c}}}}}{{f{c}}}l}{{{b{c}}{b{de}}}h{}{}}{{{b{c}}}h{}}{{}{{f{c}}}j}{{{b{{f{c}}}}{b{{f{c}}}}}nA`}{{{b{d{f{c}}}}e}h{Abj}{{Af{}{{Ad{{b{c}}}}}}}}{{{b{d{f{c}}}}e}hj{{Af{}{{Ad{c}}}}}}{{{b{{f{c}}}}{b{dAh}}}Aj{Alj}}{cc{}}{e{{f{c}}}j{{Af{}{{Ad{c}}}}}}{{{b{{f{c}}}}{b{de}}}hAnB`}{ce{}{}}{{{f{c}}}{{Bb{c}}}j}{{{f{c}}{f{c}}}{{f{c}}}j}{{{b{d{f{c}}}}{f{c}}}hj};{{{b{{f{c}}}}}{{Bd{{b{c}}}}}j}{{{b{d{f{c}}}}}{{Bd{c}}}j}{{{b{d{f{c}}}}c}hj}{c{{f{c}}}j}{{{b{c}}}e{}{}}{c{{Bf{e}}}{}{}}0{{{b{c}}}Bh{}}","D":"Aj","p":[[1,"reference"],[0,"mut"],[5,"SkewHeap",0],[1,"unit"],[10,"Ord",28],[10,"Clone",29],[1,"bool"],[10,"PartialEq",28],[10,"Copy",30],[17,"Item"],[10,"IntoIterator",31],[5,"Formatter",32],[8,"Result",32],[10,"Debug",32],[10,"Hash",33],[10,"Hasher",33],[5,"Vec",34],[6,"Option",35],[6,"Result",36],[5,"TypeId",37]],"r":[],"b":[[9,"impl-Extend%3C%26A%3E-for-SkewHeap%3CA%3E"],[10,"impl-Extend%3CA%3E-for-SkewHeap%3CA%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAA8ABAACAAEABQAHAA4AAQAZAAMA"}],\
["snippetter",{"t":"JFFFJFNNNNNNNNNNNNNNNNNNNNOOONNNNNNNHNNNNNNNNNNNNOHHNOOONNNNNNNNNNNNNNNN","n":["CRATE_METADATAS","CrateMetadata","DescriptionSection","MetadataFile","PROJECT_ROOT","TagsSection","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","dependencies","description","description","deserialize","deserialize","deserialize","eq","eq","eq","eq","find_project_root_path","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","list","main","parse_local_dependencies_from_cargo_toml","serialize","short","tags","tags","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"snippetter"],[72,"core::result"],[73,"serde::de"],[74,"std::path"],[75,"core::fmt"],[76,"alloc::string"],[77,"alloc::vec"],[78,"serde::ser"],[79,"core::any"]],"i":[0,0,0,0,0,0,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,3,4,4,5,6,3,4,5,6,0,3,4,5,6,3,4,5,6,3,4,5,6,5,0,0,3,6,3,4,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6],"f":"``````{{{b{c}}}{{b{e}}}{}{}}000{{{b{dc}}}{{b{de}}}{}{}}000{{{b{f}}}f}{{{b{h}}}h}{{{b{j}}}j}{{{b{l}}}l}{{{b{c}}{b{de}}}n{}{}}000{{{b{c}}}n{}}000```{c{{A`{h}}}Ab}{c{{A`{j}}}Ab}{c{{A`{l}}}Ab}{{{b{f}}{b{f}}}Ad}{{{b{h}}{b{h}}}Ad}{{{b{j}}{b{j}}}Ad}{{{b{l}}{b{l}}}Ad}{{}Af}{{{b{f}}{b{dAh}}}Aj}{{{b{h}}{b{dAh}}}Aj}{{{b{j}}{b{dAh}}}Aj}{{{b{l}}{b{dAh}}}Aj}{cc{}}000{ce{}{}}000`{{}n}{{{b{Al}}}{{B`{An}}}}{{{b{f}}c}A`Bb}```{{{b{c}}}e{}{}}000{c{{A`{e}}}{}{}}0000000{{{b{c}}}Bd{}}000","D":"A`","p":[[1,"reference"],[0,"mut"],[5,"CrateMetadata",0],[5,"MetadataFile",0],[5,"TagsSection",0],[5,"DescriptionSection",0],[1,"unit"],[6,"Result",72],[10,"Deserializer",73],[1,"bool"],[5,"PathBuf",74],[5,"Formatter",75],[8,"Result",75],[1,"str"],[5,"String",76],[5,"Vec",77],[10,"Serializer",78],[5,"TypeId",79]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEAAAgAAACkAMgAWAA=="}],\
["sparse_table",{"t":"KFFRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNN","n":["Op","SparseTable","SparseTable2d","Value","as_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone_from_slice","clone_from_slice","collect_vec","collect_vec","fmt","fmt","fold","fold","from","from","from","from","from","from","from_iter","get","index","inner","inner","into","into","iter","iter","mul","new","new","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"sparse_table"],[42,"alloc::vec"],[43,"core::fmt"],[44,"core::option"],[45,"core::ops::range"],[46,"core::iter::traits::collect"],[47,"core::iter::traits::iterator"],[48,"core::result"],[49,"core::any"]],"i":[0,0,0,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,1,1,5,5,5,1,1,1,1,5,1,5,1,5,4,1,5,1,5,1,5,1,5],"f":"````{{{d{{b{c}}}}}{{d{f}}}h}{{{d{{j{c}}}}}{{d{{f{l}}}}}h}{{{d{c}}}{{d{e}}}{}{}}0{{{d{nc}}}{{d{ne}}}{}{}}0{{{d{f}}}{{b{c}}}h}{{{d{{f{l}}}}}{{j{c}}}h}{{{d{{b{c}}}}}lh}{{{d{{j{c}}}}}{{l{l}}}h}{{{d{{b{c}}}}{d{nA`}}}Abh}{{{d{{j{c}}}}{d{nA`}}}Abh}{{{d{{b{c}}}}e}Adh{{Ah{Af}}}}{{{d{{j{c}}}}eg}Adh{{Ah{Af}}}{{Ah{Af}}}}{l{{b{c}}}h}8{cc{}}08{{{l{l}}}{{j{c}}}h}{c{{b{e}}}{{Al{}{{Aj{}}}}}h}{{{d{{b{c}}}}Af}dh}{{{d{{b{c}}}}Af}{{d{e}}}h{}}{{{d{{b{c}}}}}{{d{{l{l}}}}}h}{{{d{{j{c}}}}}{{d{{l{{l{{l{l}}}}}}}}}h}{ce{}{}}0{{{d{{b{c}}}}}{{`{{An{}{{Aj{d}}}}}}}h}{{{d{{j{c}}}}}{{`{{An{}{{Aj{{d{f}}}}}}}}}h}{{{d{c}}{d{c}}}c{}};9{c{{B`{e}}}{}{}}000{{{d{c}}}Bb{}}0","D":"Cb","p":[[5,"SparseTable",0],[1,"reference"],[1,"slice"],[10,"Op",0],[5,"SparseTable2d",0],[5,"Vec",42],[0,"mut"],[5,"Formatter",43],[8,"Result",43],[6,"Option",44],[1,"usize"],[10,"RangeBounds",45],[17,"Item"],[10,"IntoIterator",46],[10,"Iterator",47],[6,"Result",48],[5,"TypeId",49]],"r":[],"b":[[18,"impl-From%3CVec%3C%3CO+as+Op%3E::Value%3E%3E-for-SparseTable%3CO%3E"],[19,"impl-From%3C%26%5B%3CO+as+Op%3E::Value%5D%3E-for-SparseTable%3CO%3E"],[22,"impl-From%3C%26%5BVec%3C%3CO+as+Op%3E::Value%3E%5D%3E-for-SparseTable2d%3CO%3E"],[23,"impl-From%3CVec%3CVec%3C%3CO+as+Op%3E::Value%3E%3E%3E-for-SparseTable2d%3CO%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABEABgAHAAMADwABABMAAQAXAAIAGwAAACUABQA="}],\
["splay_tree",{"t":"RRFFRKFFKFKRRNMNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNMMNNNNNNNNNNNNNNNNNNNNN","n":["Acc","Acc","Entry","Iter","Lazy","LazyOps","NoLazy","Nop","Ops","SplayTree","Value","Value","Value","act","act_acc","act_acc","act_acc","act_value","act_value","act_value","append","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","cmp","compose","compose","compose","compose_to_option","default","delete","deref","deref_mut","drop","dump","entry","eq","fmt","fold","from","from","from","from","from","from_iter","get","hash","index","insert","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","new","next","next_back","op","op","op","op","partial_cmp","proj","proj","proj","proj","range","reverse","split_off","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"splay_tree"],[100,"core::ops::range"],[101,"core::cmp"],[102,"core::option"],[103,"core::fmt"],[104,"core::iter::traits::collect"],[105,"core::hash"],[106,"core::result"],[107,"core::any"]],"i":[20,5,0,0,5,0,0,0,0,0,0,20,5,2,5,21,22,5,21,22,2,21,22,2,17,10,21,22,2,17,10,2,2,2,2,5,21,22,5,2,2,10,10,2,2,2,2,2,2,21,22,2,17,10,2,2,2,2,2,21,22,2,17,10,2,17,2,2,2,2,17,17,20,5,21,22,2,20,5,21,22,2,2,2,2,21,22,2,17,10,21,22,2,17,10,21,22,2,17,10],"f":"`````````````{{{f{b{d{c}}}}e}hj{{n{l}}}}{{{f{c}}{f{be}}}h{}{}}00000{{{f{b{d{c}}}}{f{{d{c}}}}}hj}{{{f{c}}}{{f{e}}}{}{}}0000{{{f{bc}}}{{f{be}}}{}{}}0000{{{f{{d{c}}}}}{{d{c}}}j}4{{{f{c}}}h{}}{{{f{{d{c}}}}{f{{d{c}}}}}A`j}{{{f{c}}{f{bc}}}h{}}00{{{f{c}}{f{b{Ab{c}}}}}h{}}{{}{{d{c}}}j}{{{f{b{d{c}}}}l}{}j}{{{f{{Ad{c}}}}}{{f{e}}}j{}}{{{f{b{Ad{c}}}}}{{f{be}}}j{}}{{{f{b{d{c}}}}}hj}{{{f{{d{c}}}}}hj}{{{f{b{d{c}}}}l}{{Ab{{Ad{c}}}}}j}{{{f{{d{c}}}}{f{{d{c}}}}}Afj}{{{f{{d{c}}}}{f{bAh}}}Ajj}{{{f{{d{c}}}}e}Abj{{n{l}}}}{cc{}}0000{c{{d{e}}}{{An{}{{Al{}}}}}j}{{{f{{d{c}}}}l}{{Ab{f}}}j}{{{f{{d{c}}}}{f{be}}}hjB`}{{{f{{d{c}}}}l}{{f{e}}}j{}}{{{f{b{d{c}}}}l}hj}{ce{}{}}0000{{{f{{d{c}}}}}ej{}}1{{{f{{d{c}}}}}Afj}{{{f{{d{c}}}}}{{Bb{c}}}j}{{{f{{d{c}}}}}lj}{{}{{d{c}}}j}{{{f{b{Bb{c}}}}}{{Ab{e}}}j{}}0{{{f{c}}{f{c}}}c{}}000{{{f{{d{c}}}}{f{{d{c}}}}}{{Ab{A`}}}j}{{{f{c}}}e{}{}}000{{{f{{d{c}}}}e}{{Bb{c}}}j{{n{l}}}}{{{f{b{d{c}}}}e}hj{{n{l}}}}{{{f{b{d{c}}}}l}{{d{c}}}j}3{c{{Bd{e}}}{}{}}000000000{{{f{c}}}Bf{}}0000","D":"En","p":[[0,"mut"],[5,"SplayTree",0],[1,"reference"],[1,"unit"],[10,"LazyOps",0],[1,"usize"],[10,"RangeBounds",100],[6,"Ordering",101],[6,"Option",102],[5,"Entry",0],[1,"bool"],[5,"Formatter",103],[8,"Result",103],[17,"Item"],[10,"IntoIterator",104],[10,"Hasher",105],[5,"Iter",0],[6,"Result",106],[5,"TypeId",107],[10,"Ops",0],[5,"Nop",0],[5,"NoLazy",0]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADUADgAQAAEAEwABABYADQAlAAEAKAAAACoAAgAvAAEANwAAADkAAQBBAAEARwABAEsAAgBQAAEAVQAPAA=="}],\
["suffix_array",{"t":"HH","n":["lcp_array","suffix_array"],"q":[[0,"suffix_array"],[2,"alloc::vec"],[3,"core::cmp"]],"i":[0,0],"f":"{{{d{{b{c}}}}{d{{b{f}}}}}{{h{f}}}j}{{{d{{b{c}}}}}{{h{f}}}j}","D":"f","p":[[1,"slice"],[1,"reference"],[1,"usize"],[5,"Vec",2],[10,"Ord",3]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["swag",{"t":"FKRNNNNNNNNNNNNNNNNNNNNNNMNNNNNNN","n":["DequeueSwag","Op","Value","as_two_slices","borrow","borrow_mut","clone_from_slice","collect_vec","copy_from_slice","default","extend","fmt","fold","from","from","from_iter","get","index","into","into_iter","into_iter","is_empty","iter","len","new","op","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id"],"q":[[0,"swag"],[33,"alloc::vec"],[34,"core::iter::traits::collect"],[35,"core::fmt"],[36,"core::option"],[37,"core::iter::traits::iterator"],[38,"core::result"],[39,"core::any"]],"i":[0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1],"f":"```{{{d{{b{c}}}}}{{h{{d{f}}{d{f}}}}}j}{{{d{c}}}{{d{e}}}{}{}}{{{d{lc}}}{{d{le}}}{}{}}{{{d{f}}}{{b{c}}}j}{{{d{{b{c}}}}}nj}1{{}{{b{c}}}j}{{{d{l{b{c}}}}e}A`j{{Ad{}{{Ab{}}}}}}{{{d{{b{c}}}}{d{lAf}}}Ahj}{{{d{{b{c}}}}}Ajj}{cc{}}{n{{b{c}}}j}{c{{b{e}}}{{Ad{}{{Ab{}}}}}j}{{{d{{b{c}}}}Al}{{Aj{d}}}j}{{{d{{b{c}}}}Al}{{d{e}}}j{}}{ce{}{}}{{{b{c}}}ej{}}{{{d{{b{c}}}}}ej{}}{{{d{{b{c}}}}}Anj}{{{d{{b{c}}}}}{{`{{B`{}{{Ab{d}}}}}}}j}{{{d{{b{c}}}}}Alj}>{{{d{c}}{d{c}}}c{}}{{{d{l{b{c}}}}}Ajj}0{{{d{l{b{c}}}}}A`j}0{c{{Bb{e}}}{}{}}0{{{d{c}}}Bd{}}","D":"Bj","p":[[5,"DequeueSwag",0],[1,"reference"],[1,"slice"],[1,"tuple"],[10,"Op",0],[0,"mut"],[5,"Vec",33],[1,"unit"],[17,"Item"],[10,"IntoIterator",34],[5,"Formatter",35],[8,"Result",35],[6,"Option",36],[1,"usize"],[1,"bool"],[10,"Iterator",37],[6,"Result",38],[5,"TypeId",39]],"r":[],"b":[[19,"impl-IntoIterator-for-DequeueSwag%3CO%3E"],[20,"impl-IntoIterator-for-%26DequeueSwag%3CO%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAwABgAFAAEACgACAA8AAQASAAAAFAABAB8AAgA="}],\
["tree_fold",{"t":"KFRNNONMNOMNNHNNMO","n":["Op","TwoWayTreeFoldResult","Value","borrow","borrow_mut","branch","from","identity","into","lower","mul","try_from","try_into","two_way_tree_fold","two_way_tree_fold","type_id","up","upper"],"q":[[0,"tree_fold"],[18,"core::clone"],[19,"core::result"],[20,"alloc::vec"],[21,"core::any"]],"i":[0,0,4,10,10,10,10,4,10,10,4,10,10,0,4,10,4,10],"f":"```{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}`{cc{}}{{{b{{h{}{{f{c}}}}}}}cj}{ce{}{}}`{{{b{{h{}{{f{c}}}}}}{b{c}}{b{c}}}cj}{c{{l{e}}}{}{}}0{{{b{c}}{b{{Ab{{A`{n}}}}}}{b{{Ab{n}}}}}Adh}{{{b{{h{}{{f{c}}}}}}{b{{Ab{{A`{n}}}}}}{b{{Ab{n}}}}}{{Ad{c}}}j}{{{b{c}}}Af{}}{{{b{{h{}{{f{c}}}}}}{b{c}}n}cj}`","D":"Al","p":[[1,"reference"],[0,"mut"],[17,"Value"],[10,"Op",0],[10,"Clone",18],[6,"Result",19],[1,"usize"],[5,"Vec",20],[1,"slice"],[5,"TwoWayTreeFoldResult",0],[5,"TypeId",21]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAQAEAAAAAQABQAMAA0AEAA="}],\
["trial",{"t":"FFFKNNNNNNNHHNNNMNNNNNNNNNMHHNNNNNNNNNM","n":["Divisors","PrimeFactors","PrimeFactorsRle","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","divides","divisors","divisors_unordered","from","from","from","increment","into","into","into","into_iter","into_iter","into_iter","next","next","next","one","prime_factors","prime_factors_rle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":[[0,"trial"],[39,"alloc::vec"],[40,"trial::divisors"],[41,"core::option"],[42,"trial::prime_factors"],[43,"core::result"],[44,"core::any"]],"i":[0,0,0,0,6,9,10,6,9,10,3,0,0,6,9,10,3,6,9,10,6,9,10,6,9,10,3,0,0,6,9,10,6,9,10,6,9,10,3],"f":"````{{{b{c}}}{{b{e}}}{}{}}00{{{b{dc}}}{{b{de}}}{}{}}00{{ff}h}{c{{j{c}}}f}{c{{l{c}}}f}{cc{}}00{{{b{df}}}n}{ce{}{}}00000{{{b{d{l{c}}}}}{{A`{e}}}f{}}{{{b{d{Ab{c}}}}}{{A`{e}}}f{}}{{{b{d{Ad{c}}}}}{{A`{e}}}f{}}{{}f}{c{{Ad{c}}}f}{c{{Ab{c}}}f}{c{{Af{e}}}{}{}}00000{{{b{c}}}Ah{}}004","D":"Bf","p":[[1,"reference"],[0,"mut"],[10,"Value",0],[1,"bool"],[5,"Vec",39],[5,"Divisors",0,40],[1,"unit"],[6,"Option",41],[5,"PrimeFactorsRle",0,42],[5,"PrimeFactors",0,42],[6,"Result",43],[5,"TypeId",44]],"r":[[0,40],[1,42],[2,42],[11,40],[12,40],[27,42],[28,42]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABQAAwAFAAUAFQAFAB4ACAA="}],\
["trie",{"t":"SFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["DEGREE","TrieMap","TrieSet","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","contains","default","default","eq","eq","fmt","fmt","for_each","for_each_kv","for_each_prefix","for_each_prefix","from","from","get","get_mut","get_or_insert","get_or_insert_with","insert","insert","into","into","new","new","remove","remove","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"trie"],[46,"trie::trie_map"],[47,"core::clone"],[48,"trie::trie_set"],[49,"core::iter::traits::collect"],[50,"core::cmp"],[51,"core::fmt"],[52,"core::ops::function"],[53,"core::option"],[54,"core::result"],[55,"core::any"]],"i":[0,0,0,3,5,3,5,3,5,3,5,3,5,5,3,5,3,5,3,5,5,3,3,5,3,5,3,3,3,3,3,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5],"f":"```{{{b{c}}}{{b{e}}}{}{}}0{{{b{dc}}}{{b{de}}}{}{}}0{{{b{{f{c}}}}}{{f{c}}}h}{{{b{j}}}j}{{{b{c}}{b{de}}}l{}{}}0{{{b{c}}}l{}}0{{{b{j}}c}n{{Ad{}{{A`{Ab}}}}}}{{}{{f{c}}}{}}{{}j}{{{b{{f{c}}}}{b{{f{c}}}}}nAf}{{{b{j}}{b{j}}}n}{{{b{{f{c}}}}{b{dAh}}}AjAl}{{{b{j}}{b{dAh}}}Aj}{{{b{j}}c}l{{B`{{b{{An{Ab}}}}}}}}{{{b{{f{c}}}}e}l{}{{B`{{b{{An{Ab}}}}{b{c}}}}}}{{{b{{f{c}}}}eg}l{}{{Ad{}{{A`{Ab}}}}}{{B`{{b{{f{c}}}}}}}}{{{b{j}}ce}l{{Ad{}{{A`{Ab}}}}}{{B`{{b{{f{l}}}}}}}}{cc{}}0{{{b{{f{c}}}}e}{{Bb{{b{c}}}}}{}{{Ad{}{{A`{Ab}}}}}}{{{b{d{f{c}}}}e}{{Bb{{b{dc}}}}}{}{{Ad{}{{A`{Ab}}}}}}{{{b{d{f{c}}}}ec}{{b{dc}}}{}{{Ad{}{{A`{Ab}}}}}}{{{b{d{f{c}}}}eg}{{b{dc}}}{}{{Ad{}{{A`{Ab}}}}}{{Bf{}{{Bd{c}}}}}}{{{b{d{f{c}}}}ec}{{Bb{c}}}{}{{Ad{}{{A`{Ab}}}}}}{{{b{dj}}c}n{{Ad{}{{A`{Ab}}}}}}{ce{}{}}0{{}{{f{c}}}{}}{{}j}{{{b{d{f{c}}}}e}{{Bb{c}}}{}{{Ad{}{{A`{Ab}}}}}}4{{{b{c}}}e{}{}}0{c{{Bh{e}}}{}{}}000{{{b{c}}}Bj{}}0","D":"Bn","p":[[1,"reference"],[0,"mut"],[5,"TrieMap",0,46],[10,"Clone",47],[5,"TrieSet",0,48],[1,"unit"],[1,"bool"],[17,"Item"],[1,"usize"],[10,"IntoIterator",49],[10,"PartialEq",50],[5,"Formatter",51],[8,"Result",51],[10,"Debug",51],[1,"slice"],[10,"FnMut",52],[6,"Option",53],[17,"Output"],[10,"FnOnce",52],[6,"Result",54],[5,"TypeId",55]],"r":[[1,46],[2,48]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABcAAwAEAAkADwAFACcABwA="}],\
["uf_checklist",{"t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Iter","UfChecklist","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","clone_to_uninit","fmt","fmt","from","from","into","into","into_iter","is_checked","lower_bound","new","next","range_check","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"uf_checklist"],[29,"core::fmt"],[30,"core::option"],[31,"core::ops::range"],[32,"core::result"],[33,"core::any"]],"i":[0,0,3,9,3,9,3,3,3,3,3,9,3,9,3,9,9,3,3,3,9,3,3,3,9,3,9,3,9],"f":"``{{{b{c}}}{{b{e}}}{}{}}0{{{b{dc}}}{{b{de}}}{}{}}0{{{b{df}}h}j}{{{b{f}}}f}{{{b{c}}{b{de}}}l{}{}}{{{b{c}}}l{}}{{{b{f}}{b{dn}}}A`}{{{b{Ab}}{b{dn}}}A`}{cc{}}0{ce{}{}}00{{{b{f}}h}j}{{{b{f}}h}{{Ad{h}}}}{hf}{{{b{dAb}}}{{Ad{c}}}{}}{{{b{df}}c}Ab{{Af{h}}}}{{{b{c}}}e{}{}}{c{{Ah{e}}}{}{}}000{{{b{c}}}Aj{}}0","D":"Ah","p":[[1,"reference"],[0,"mut"],[5,"UfChecklist",0],[1,"usize"],[1,"bool"],[1,"unit"],[5,"Formatter",29],[8,"Result",29],[5,"Iter",0],[6,"Option",30],[10,"RangeBounds",31],[6,"Result",32],[5,"TypeId",33]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABEABQADAAMACAAEABEAAAAVAAAAFwAGAA=="}],\
["union_find",{"t":"GGKFRGMNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNN","n":["EdgeCount","HasCycle","Op","UnionFind","Value","VertexCount","add_edge","add_edge","add_edge","add_edge","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","default","eq","find","find_mut","fmt","from","from","from","from","from_values","get_value","graft","graft","graft","graft","hash","into","into","into","into","is_root","new","same","singleton","singleton","singleton","singleton","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","value","value_mut"],"q":[[0,"union_find"],[64,"core::clone"],[65,"core::default"],[66,"core::cmp"],[67,"core::fmt"],[68,"alloc::vec"],[69,"core::hash"],[70,"core::result"],[71,"core::any"]],"i":[0,0,0,0,6,0,6,18,19,20,18,19,20,4,18,19,20,4,4,4,4,4,4,4,4,4,18,19,20,4,4,4,6,18,19,20,4,18,19,20,4,4,4,4,6,18,19,20,4,18,19,20,4,18,19,20,4,18,19,20,4,4,4,4],"f":"``````{{{d{bc}}}f{}}000{{{d{c}}}{{d{e}}}{}{}}000{{{d{bc}}}{{d{be}}}{}{}}000{{{d{{h{c}}}}}{{h{c}}}{jl}}{{{d{c}}{d{be}}}f{}{}}{{{d{c}}}f{}}{{}{{h{c}}}{nl}}{{{d{{h{c}}}}{d{{h{c}}}}}A`{Abl}}{{{d{{h{c}}}}Ad}Adl}{{{d{b{h{c}}}}Ad}Adl}{{{d{{h{c}}}}{d{bAf}}}Ahl}{cc{}}000{Aj{{h{c}}}l}{{{d{{h{c}}}}Ad}dl}{{{d{bc}}c}f{}}000{{{d{{h{c}}}}{d{be}}}f{All}An}{ce{}{}}000{{{d{{h{c}}}}Ad}A`l}{Ad{{h{c}}}l}{{{d{{h{c}}}}AdAd}A`l}{{}c{}}000{{{d{c}}}e{}{}}{c{{B`{e}}}{}{}}0000000{{{d{c}}}Bb{}}000{{{d{b{h{c}}}}AdAd}A`l}{{{d{{h{c}}}}Ad}{}l}{{{d{b{h{c}}}}Ad}{{d{b}}}l}","D":"Bb","p":[[0,"mut"],[1,"reference"],[1,"unit"],[5,"UnionFind",0],[10,"Clone",64],[10,"Op",0],[10,"Default",65],[1,"bool"],[10,"PartialEq",66],[1,"usize"],[5,"Formatter",67],[8,"Result",67],[5,"Vec",68],[10,"Hash",69],[10,"Hasher",69],[6,"Result",70],[5,"TypeId",71],[6,"EdgeCount",0],[6,"VertexCount",0],[6,"HasCycle",0]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC8ABgAEAAAACAASAB8AAQAiAAMAKgACAC4AEgA="}],\
["veb",{"t":"PPFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOO","n":["Internal","Leaf","VebMap","VebSet","borrow","borrow","borrow_mut","borrow_mut","collect","collect","contains","contains_key","fmt","fmt","from","from","from_iter","from_iter","get","get_mut","index","index_mut","insert","insert","into","into","is_empty","is_empty","len","len","max","max","max_key","max_value","min","min","min_key","min_value","new","new","pred","pred","pred_eq","pred_eq","pred_eq_key","pred_eq_value","pred_key","pred_value","remove","remove","succ","succ","succ_eq","succ_eq_key","succ_eq_value","succ_key","succ_value","try_from","try_from","try_into","try_into","type_id","type_id","chunks","csize","len","max","min","summary"],"q":[[0,"veb"],[63,"veb::VebSet"],[69,"alloc::vec"],[70,"core::fmt"],[71,"core::iter::traits::collect"],[72,"core::option"],[73,"core::result"],[74,"core::any"]],"i":[7,7,0,0,3,7,3,7,3,7,7,3,3,7,3,7,3,7,3,3,3,3,3,7,3,7,3,7,3,7,3,7,3,3,3,7,3,3,3,7,3,7,3,7,3,3,3,3,3,7,3,7,3,3,3,3,3,3,7,3,7,3,7,17,17,17,17,17,17],"f":"````{{{b{c}}}{{b{e}}}{}{}}0{{{b{dc}}}{{b{de}}}{}{}}0{{{b{{f{c}}}}}{{l{{j{h{b{c}}}}}}}{}}{{{b{n}}}{{l{h}}}}{{{b{n}}h}A`}{{{b{{f{c}}}}h}A`{}}{{{b{{f{c}}}}{b{dAb}}}AdAf}{{{b{n}}{b{dAb}}}Ad}{cc{}}0{e{{f{c}}}{}{{Aj{}{{Ah{{j{hc}}}}}}}}{cn{{Aj{}{{Ah{h}}}}}}{{{b{{f{c}}}}h}{{Al{{b{c}}}}}{}}{{{b{d{f{c}}}}h}{{Al{{b{dc}}}}}{}}{{{b{{f{c}}}}h}{{b{c}}}{}}{{{b{d{f{c}}}}h}{{b{dc}}}{}}{{{b{d{f{c}}}}hc}{{Al{c}}}{}}{{{b{dn}}h}A`}{ce{}{}}0{{{b{{f{c}}}}}A`{}}{{{b{n}}}A`}{{{b{{f{c}}}}}h{}}{{{b{n}}}h}{{{b{{f{c}}}}}{{Al{{j{h{b{c}}}}}}}{}}{{{b{n}}}{{Al{h}}}}{{{b{{f{c}}}}}{{Al{h}}}{}}{{{b{{f{c}}}}}{{Al{{b{c}}}}}{}}3210{h{{f{c}}}{}}{hn}{{{b{{f{c}}}}h}{{Al{{j{h{b{c}}}}}}}{}}{{{b{n}}h}{{Al{h}}}}10{{{b{{f{c}}}}h}{{Al{h}}}{}}{{{b{{f{c}}}}h}{{Al{{b{c}}}}}{}}10{{{b{d{f{c}}}}h}{{Al{c}}}{}}{{{b{dn}}h}A`}5453232{c{{An{e}}}{}{}}000{{{b{c}}}B`{}}0``````","D":"El","p":[[1,"reference"],[0,"mut"],[5,"VebMap",0],[1,"usize"],[1,"tuple"],[5,"Vec",69],[6,"VebSet",0],[1,"bool"],[5,"Formatter",70],[8,"Result",70],[10,"Debug",70],[17,"Item"],[10,"IntoIterator",71],[6,"Option",72],[6,"Result",73],[5,"TypeId",74],[15,"Internal",63]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABcABgABAAEABQADAA0AAQARAAEAFQABADoACwA="}],\
["vec_lines",{"t":"KGGFKFIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNNNN","n":["Constraint","DecreasingTilt","IncreasingTilt","Line","Signed","VecLines","VecLinesDecreasing","VecLinesIncreasing","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","default","default","eq","eq","eq","eq","eval","eval_gcc","fmt","fmt","fmt","fmt","from","from","from","from","get","hash","hash","hash","hash","into","into","into","into","into_coeff","is_empty","iter_copied","len","new","ok","ok","ok","push","strictly_better","strictly_better","strictly_better","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"vec_lines"],[82,"core::clone"],[83,"core::default"],[84,"core::cmp"],[85,"core::option"],[86,"core::fmt"],[87,"core::hash"],[88,"core::iter::traits::iterator"],[89,"core::result"],[90,"core::any"]],"i":[0,0,0,0,0,0,0,0,3,5,6,7,3,5,6,7,3,5,6,7,3,5,6,7,3,5,5,6,7,3,5,3,5,6,7,5,3,3,5,6,7,3,5,6,7,3,3,5,6,7,3,5,6,7,5,3,3,3,3,10,6,7,3,10,6,7,3,5,6,7,3,5,6,7,3,5,6,7,3,5,6,7],"f":"````````{{{b{c}}}{{b{e}}}{}{}}000{{{b{dc}}}{{b{de}}}{}{}}000{{{b{{f{ce}}}}}{{f{ce}}}hh}{{{b{{j{c}}}}}{{j{c}}}h}{{{b{l}}}l}{{{b{n}}}n}{{{b{c}}{b{de}}}A`{}{}}000{{{b{c}}}A`{}}0000{{}{{f{ce}}}AbAd}{{}{{j{c}}}Af}{{{b{{f{ce}}}}{b{{f{ce}}}}}AhAjAj}{{{b{{j{c}}}}{b{{j{c}}}}}AhAj}{{{b{l}}{b{l}}}Ah}{{{b{n}}{b{n}}}Ah}{{{j{c}}c}cAb}{{{b{{f{ce}}}}c}{{Al{c}}}AbAd}{{{b{{f{ce}}}}{b{dAn}}}B`BbBb}{{{b{{j{c}}}}{b{dAn}}}B`Bb}{{{b{l}}{b{dAn}}}B`}{{{b{n}}{b{dAn}}}B`}{cc{}}000{{{b{{f{ce}}}}Bd}{{Al{{j{c}}}}}AbAd}{{{b{{f{ce}}}}{b{dg}}}A`BfBfBh}{{{b{{j{c}}}}{b{de}}}A`BfBh}{{{b{l}}{b{dc}}}A`Bh}{{{b{n}}{b{dc}}}A`Bh}{ce{}{}}000{{{j{c}}}{{Bj{c}}}Ab}{{{b{{f{ce}}}}}AhAbAd}{{{b{{f{ce}}}}}{{`{{Bn{}{{Bl{{j{c}}}}}}}}}AbAd}{{{b{{f{ce}}}}}BdAbAd}{{}{{f{ce}}}AbAd}{{{j{c}}{j{c}}}AhAb}00{{{b{d{f{ce}}}}{Bj{c}}}A`AbAd}{{cc}AhAb}00{{{b{c}}}e{}{}}000{c{{C`{e}}}{}{}}0000000{{{b{c}}}Cb{}}000","D":"Cd","p":[[1,"reference"],[0,"mut"],[5,"VecLines",0],[10,"Clone",82],[5,"Line",0],[6,"DecreasingTilt",0],[6,"IncreasingTilt",0],[1,"unit"],[10,"Signed",0],[10,"Constraint",0],[10,"Default",83],[1,"bool"],[10,"PartialEq",84],[6,"Option",85],[5,"Formatter",86],[8,"Result",86],[10,"Debug",86],[1,"usize"],[10,"Hash",87],[10,"Hasher",87],[1,"array"],[17,"Item"],[10,"Iterator",88],[6,"Result",89],[5,"TypeId",90]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADgABQAJABoAJgADAC8AAwA8AAIAQAASAA=="}],\
["wavelet_matrix",{"t":"FFFFNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNO","n":["SpanInNode","Spans","StaticBitVec","WaveletMatrix","access","access","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","default","default","depth","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","from_iter","from_iter_collect_vec2","from_slice_of_usize_mut","hash","hash","hash","hash","index","into","into","into","into","into_iter","is_empty","is_empty","len","len","next","next_value","prev_value","quantile","range_freq","rank","select","spans","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value"],"q":[[0,"wavelet_matrix"],[84,"core::fmt"],[85,"core::iter::traits::collect"],[86,"alloc::vec"],[87,"core::ops::function"],[88,"core::hash"],[89,"core::option"],[90,"core::ops::range"],[91,"core::result"],[92,"core::any"]],"i":[0,0,0,0,1,4,1,4,7,8,1,4,7,8,1,4,7,8,1,4,7,8,1,4,7,8,1,4,8,1,4,7,8,1,4,7,8,1,4,7,8,1,4,1,1,1,4,7,8,8,1,4,7,8,7,1,4,1,4,7,1,1,1,1,4,4,1,1,4,7,8,1,4,7,8,1,4,7,8,1,4,7,8,8],"f":"````{{{d{b}}f}f}{{{d{h}}f}j}{{{d{c}}}{{d{e}}}{}{}}000{{{d{lc}}}{{d{le}}}{}{}}000{{{d{b}}}b}{{{d{h}}}h}{{{d{n}}}n}{{{d{A`}}}A`}{{{d{c}}{d{le}}}Ab{}{}}000{{{d{c}}}Ab{}}000{{}b}{{}h}`{{{d{b}}{d{b}}}j}{{{d{h}}{d{h}}}j}{{{d{n}}{d{n}}}j}{{{d{A`}}{d{A`}}}j}{{{d{b}}{d{lAd}}}Af}{{{d{h}}{d{lAd}}}Af}{{{d{n}}{d{lAd}}}Af}{{{d{A`}}{d{lAd}}}Af}{cc{}}000{cb{{Aj{}{{Ah{f}}}}}}{ch{{Aj{}{{Ah{j}}}}}}{c{{An{b{Al{{Al{f}}}}}}}{{Aj{}{{Ah{f}}}}}}{{{d{l{B`{f}}}}c}b{{Bb{{d{{B`{f}}}}}}}}{{{d{b}}{d{lc}}}AbBd}{{{d{h}}{d{lc}}}AbBd}{{{d{n}}{d{lc}}}AbBd}{{{d{A`}}{d{lc}}}AbBd}`{ce{}{}}0000{{{d{b}}}j}{{{d{h}}}j}{{{d{b}}}f}{{{d{h}}}f}{{{d{ln}}}{{Bf{c}}}{}}{{{d{b}}ce}{{Bf{f}}}{{Bh{f}}}{{Bh{f}}}}0{{{d{b}}fce}{{Bf{f}}}{{Bh{f}}}{{Bh{f}}}}{{{d{b}}ce}f{{Bh{f}}}{{Bh{f}}}}{{{d{h}}f}f}0{{{d{b}}ce}n{{Bh{f}}}{{Bh{f}}}}{{{d{c}}}e{}{}}000{c{{Bj{e}}}{}{}}0000000{{{d{c}}}Bl{}}000`","D":"Cn","p":[[5,"WaveletMatrix",0],[1,"reference"],[1,"usize"],[5,"StaticBitVec",0],[1,"bool"],[0,"mut"],[5,"Spans",0],[5,"SpanInNode",0],[1,"unit"],[5,"Formatter",84],[8,"Result",84],[17,"Item"],[10,"IntoIterator",85],[5,"Vec",86],[1,"tuple"],[1,"slice"],[10,"FnMut",87],[10,"Hasher",88],[6,"Option",89],[10,"RangeBounds",90],[6,"Result",91],[5,"TypeId",92]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADUABwAHABUAHgAHACoAAQAuAAMANwAAADwAAABEAA8A"}],\
["z_algo",{"t":"H","n":["z_algo"],"q":[[0,"z_algo"],[1,"alloc::vec"],[2,"core::cmp"]],"i":[0],"f":"{{{d{{b{c}}}}}{{h{f}}}j}","D":"b","p":[[1,"slice"],[1,"reference"],[1,"usize"],[5,"Vec",1],[10,"Eq",2]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAAAEAAAAAAA"}],\
["zeta",{"t":"HHHHHHHHHHHHHHHHHH","n":["add","add_inv","add_rinv","aggr","bitand","bitor","bitxor","for_each","max","min","radd","rbitand","rbitor","rbitxor","rmax","rmin","rzeta","zeta"],"q":[[0,"zeta"],[18,"core::marker"],[19,"core::ops::arith"],[20,"alloc::vec"],[21,"core::ops::function"],[22,"core::ops::bit"],[23,"core::cmp"]],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"{{{f{b{d{c}}}}}h{j{n{}{{l{}}}}}}{{{f{b{d{c}}}}}h{j{A`{}{{l{}}}}}}0{{{f{{d{c}}}}ec}{{Ab{c}}}j{{Ad{cc}{{l{c}}}}}}{{{f{b{d{c}}}}}h{j{Af{}{{l{}}}}}}{{{f{b{d{c}}}}}h{j{Ah{}{{l{}}}}}}{{{f{b{d{c}}}}}h{j{Aj{}{{l{}}}}}}{{{f{b{d{c}}}}e}h{}{{Ad{{f{bc}}{f{bc}}}}}}{{{f{b{d{c}}}}}h{jAl}}0743200{{{f{b{d{c}}}}e}hj{{Ad{cc}{{l{c}}}}}}0","D":"Bf","p":[[0,"mut"],[1,"slice"],[1,"reference"],[1,"unit"],[10,"Copy",18],[17,"Output"],[10,"Add",19],[10,"Sub",19],[5,"Vec",20],[10,"Fn",21],[10,"BitAnd",22],[10,"BitOr",22],[10,"BitXor",22],[10,"Ord",23]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
