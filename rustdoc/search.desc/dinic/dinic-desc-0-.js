searchState.loadedDescShard("dinic", 0, "Solves maximum flow problem.\nA struct to execute Dinic’s algorithm.\nA summary of the state of an edge, which is returned by …\nA key object to query an edge.\nAn adapter trait of the capacity.\nInserts a new edge to the network.\nThe capacity of an edge.\nChanges the capacity and the amount of the edge …\nAuguments the flow from <code>s</code> to <code>t</code> as much as possible. It …\nThe value of the flow of the network at this edge.\nAuguments the flow from <code>s</code> to <code>t</code> as much as possible as long …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe vertex-index of the source of an edge.\nReturns the current internal state of the edges.\nCollects all the edges.\nReturens the <code>Vec</code> of excess of all the vertices.\nCollects all the edges and arrange it in adjacent-list …\nReturns the max value of <code>Self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a vector of length <code>n</code>, such that the <code>i</code>-th element …\nCreates a new instance of <code>Dinic</code>\nThe vertex-index of the target of an edge.\nReturns the zero.")