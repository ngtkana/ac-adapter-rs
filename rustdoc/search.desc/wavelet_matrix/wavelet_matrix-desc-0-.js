searchState.loadedDescShard("wavelet_matrix", 0, "ウェーブレット行列\n<code>Spans</code> のアイテム型です。詳しくは …\nイテレータです 詳しくは <code>WaveletMatrix::spans</code> …\n累積和のできる静的なビットベクター\nウェーブレット行列\n<code>i</code> 番目の要素を返します。\n<code>a[i]</code>\nウェーブレット行列内の <code>i</code> 座標\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\n特に高速化の意図がなければ、<code>FromIterator</code> …\nウェーブレット行列内の <code>j</code> 座標の範囲\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n配列が空であれば <code>true</code> を返します。\n<code>a.is_empty()</code>\n配列の長さを返します。\n<code>a.len()</code>\n<code>index</code> により指定された部分列のうち、 <code>value</code> …\n<code>index</code> により指定された部分列のうち、 <code>value</code> …\n<code>index</code> により指定された部分列のうち、 <code>value</code> …\n<code>index</code> により指定された部分列のうち、 <code>value</code> …\n<code>sum(a[..end])</code>\nmin i s.t. <code>target &lt;= sum(a[..i])</code>\n対応する部分を、<code>(depth, index_range, value_range)</code> …\n現在のノードの担当する値の範囲")