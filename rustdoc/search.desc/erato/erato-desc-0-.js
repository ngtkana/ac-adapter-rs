searchState.loadedDescShard("erato", 0, "Use the two types of sieve of eratosthenes to query.\nAbstraction of integers.\nLeast-prime-divisor table.\nAn abstraction of prime factor generator.\nSee the document of <code>crate::LpdSieve::prime_factors</code>\nSee the document of <code>crate::Sieve::prime_factors</code>\nAn iterator to generate all the prime numbers, constructed …\nAn iterator returned by <code>PrimeFactors::rle</code>\nIs-prime table.\nAn iterator returned by <code>PrimeFactors::unique</code>\nConverts into <code>usize</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>usize</code> into <code>Self</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if a sieve is empty.\nReturns <code>true</code> if a sieve is empty.\nReturns <code>true</code> if <code>x</code> is a prime number.\nReturns <code>true</code> if <code>x</code> is a prime number.\nReturns the length of a sieve.\nReturns the length of a sieve.\nReturns the least prime divisor of <code>x</code>.\nConstruct a new empty sieve. No heap allocations is run …\nConstruct a new empty sieve. No heap allocations is run …\nReturns <code>1</code>.\nUse trial-division algorithm to iterate over all the prime …\nUse trial-division algorithm to iterate over all the prime …\nReturns an iterator to generate all the prime numbers in …\nReturns an iterator to generate all the prime numbers in …\nReturns an iterator to generate the pairs of distinct …\nReturns an iterator to generate the pairs of distinct …\nForward <code>crate::PrimeFactors::rle</code>.\nReturns <code>2</code>.\nMake prime factors unique.\nMake prime factors unique.\nForward <code>crate::PrimeFactors::unique</code>.\nConstruct a sieve of given length.\nConstruct a sieve of given length.\nReturns <code>0</code>.")