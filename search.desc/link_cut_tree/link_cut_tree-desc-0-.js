searchState.loadedDescShard("link_cut_tree", 0, "Link-Cut Tree\nLink-Cut Tree with commutative operation\nLink-Cut Tree without aggregation operation\nCommon implementation of Link-Cut Tree. Please do not use …\nLink-Cut Tree with non-commutative operation\nAggregation operation for link-cut tree\nCuts the edge between <code>x</code> and its parent.\nMakes <code>x</code> the root of the tree.\nFolds the path from the root to <code>x</code>.\nReturns the argument unchanged.\nConstructs a new Link-Cut Tree with <code>n</code> nodes, where the …\nCalls <code>U::from(self)</code>.\nReturns the id of the lowest common ancestor of <code>x</code> and <code>y</code>.\nConnects <code>p</code> and <code>c</code> with an edge, preserving the direction.\nConstructs a new Link-Cut Tree with <code>n</code> nodes.\nReturns the id of the parent of <code>x</code>.\nSets the value of <code>x</code> to <code>f(x)</code>.\nCuts the edge between <code>i</code> and <code>j</code>, not preserving the …\nFolds the path from <code>i</code> to <code>j</code>, not preserving the direction.\nReturns <code>true</code> if there is an edge between <code>x</code> and <code>y</code>.\nReturns <code>true</code> if <code>x</code> and <code>y</code> are connected.\nConnects <code>i</code> and <code>j</code> with an edge, not preserving the …")