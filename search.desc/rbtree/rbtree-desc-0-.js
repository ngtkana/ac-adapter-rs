searchState.loadedDescShard("rbtree", 0, "赤黒木\n<code>iter</code> の返す型\n…\n…\n赤黒木です。\n中間ノードに持たせる値\n葉に持たせる値\n<code>i</code> 番目の Nil …\n<code>range</code> の範囲で畳み込みます。\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\n<code>i</code> 番目の要素をコピーして返します。\n<code>i</code> 番目に新しい Nil ノードを挿入します。\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n空ならば <code>true</code>、さもなくば <code>false</code> …\n…\n長さ、すなわち Nil …\n2 つの赤黒木をマージします。\n3 つの赤黒木をマージします。\n空の赤黒木を生成します。\n演算\n中間ノードの情報で二分探索します。\n新しいノードを末尾に挿入します。\n新しいノードを先頭に挿入します。\nNil …\n<code>i</code> 番目で分割します。\n<code>l, r</code> 番目で 3 つに分割します。\n葉の値から中間ノードの値への変換")