window.SIDEBAR_ITEMS = {"enum":[["M1000000007",""],["M1012924417",""],["M924844033",""],["M998244353",""]],"fn":[["anymod_convolution","3 つの NTT-friendly 素数を用いて任意 mod でコンボリューションします。"],["binom_iter","二項係数 binom(n, k) を、n ごとにまとめて返すイテレータを生成します。"],["convolution","[`fft`] を用いて畳み込み（多項式乗算）を行います。"],["fact_build","階乗とその逆数を前計算します。"],["fact_iter","階乗を順に返すイテレータを生成します。"],["fft","長さ２冪の配列のFFT を、ビットリバースを直さずに行います。"],["ifft","[`fft`] の逆関数です。"],["newton_by","指定された漸化式により、x-adic ニュートン法を実行します。"]],"macro":[["define_fp","[`Mod`] を実装した型 `$m` と、型エイリアス `$f = Fp<$m>` を定義します。"],["fp","[`Fp`] 型のオブジェクトを構築します。"],["fps","[`vec!`] と類似の文法で、[`Fpsp`] を構築します。"]],"struct":[["FactTable","[`fact_build`] の戻り値型で、階乗とその逆数のテーブルを管理しています。"],["Fp",""],["Fpsp","算術演算子などの定義された、[`Vec<Fp<M>>`] の透明なラッパーです。"]],"trait":[["Fft","FFT に使えそうな法に実装するトレイトです。[`define_fp!`] マクロを使いましょう。"],["Mod","有限体型の実装するトレイトです。[`define_fp!`] マクロを使いましょう。"]],"type":[["F1000000007",""],["F1012924417",""],["F924844033",""],["F998244353",""],["Fps1012924417",""],["Fps924844033",""],["Fps998244353",""]]};