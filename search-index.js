var searchIndex = JSON.parse('{\
"accum":{"doc":"","t":"DFFFLLLLLLLFFLLLLFFFFLFFFFFFLLLLFF","n":["Skipped","add","add_inv","and","borrow","borrow_mut","clone","clone_into","default","eq","fmt","for_each","for_each_mut","from","hash","into","into_iter","max","min","mul","mul_inv","next","or","rfor_each","rfor_each_mut","skipped","skipped_max","skipped_min","to_owned","try_from","try_into","type_id","xor","xor_inv"],"q":[[0,"accum"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,2,2,2,2,2,2,2,0,0,2,2,2,2,0,0,0,0,2,0,0,0,0,0,0,2,2,2,2,0,0],"f":[0,[[]],[[]],[[]],[[]],[[]],[[[2,[1,1,1]]],[[2,[1,1,1]]]],[[]],[[],[[2,[3,3,3]]]],[[[2,[4,4,4]],[2,[4,4,4]]],5],[[[2,[6,6,6]],7],8],[9],[9],[[]],[[[2,[10,10,10]],11]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[9,9]]],12],[[]],[9],[9],[[9,9],[[2,[9,9]]]],[[[0,[13,14]]],[[15,[[0,[13,14]]]]]],[[[0,[13,14]]],[[15,[[0,[13,14]]]]]],[[]],[[],16],[[],16],[[],17],[[]],[[]]],"c":[],"p":[[8,"Clone"],[3,"Skipped"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"FnMut"],[8,"Hash"],[8,"Hasher"],[4,"Option"],[8,"Copy"],[8,"Ord"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"advance":{"doc":"しゃくとり法ユーティルです。","t":"FF","n":["advance_until","advance_visit_until"],"q":[[0,"advance"]],"d":["<code>checker</code> が <code>true</code> …","<code>advance_until</code> …"],"i":[0,0],"f":[[[1,2]],[[1,2,2]]],"c":[],"p":[[15,"usize"],[8,"FnMut"]]},\
"avl_tree":{"doc":"AVL …","t":"DDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AvlTree","IntoIter","Iter","append","back","back_mut","binary_search","binary_search_by","binary_search_by_key","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","eq","eq","fmt","from","from","from","from_iter","front","front_mut","get","get_mut","hash","index","insert","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","lower_bound","new","next","next","next_back","partial_cmp","partition_point","pop_back","pop_front","push_back","push_front","remove","split_off","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upper_bound"],"q":[[0,"avl_tree"]],"d":["AVL 木本体です。","<code>AvlTree</code> …","<code>AvlTree</code> …","<code>other</code> のすべての要素を <code>self</code> …","列の末尾の要素があれば返し、空なら <code>None</code> …","列の末尾の要素があれば返し、空なら <code>None</code> …","<code>value</code> …","<code>f</code> が <code>Equal</code> …","<code>f</code> が <code>Equal</code> …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","列の先頭の要素があれば返し、空なら <code>None</code> …","列の先頭の要素があれば返し、空なら <code>None</code> …","<code>other</code> の第 <code>index</code> 成分があれば返し、なければ …","<code>other</code> の第 <code>index</code> 成分があれば返し、なければ …","","","<code>other</code> の第 <code>index</code> 成分に <code>value</code> を挿入します。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","空列であれば <code>true</code> を返します。","…","列の要素数を返します。","<code>value</code> …","空列を構築します。","","","","","","…","…","列の末尾に要素を追加します。","列の先頭に要素を追加します。","<code>other</code> の第 <code>index</code> …","<code>other</code> の第 <code>index</code> 成分以降を切り離します。","","","","","","","","","","","<code>value</code> …"],"i":[0,0,0,1,1,1,1,1,1,18,19,1,18,19,1,1,1,1,1,1,1,1,18,19,1,1,1,1,1,1,1,1,1,18,19,1,18,19,1,1,1,1,1,1,1,18,19,18,1,1,1,1,1,1,1,1,1,18,19,1,18,19,1,18,19,1,1],"f":[0,0,0,[[1,1]],[1,2],[1,2],[[[1,[[4,[3]]]],3],[[6,[5,5]]]],[[1,7],[[6,[5,5]]]],[[1,3,7],[[6,[5,5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[1,[8]]],[[1,[8]]]],[[]],[[[1,[3]],[1,[3]]],9],[[],1],[[[1,[[0,[10,10]]]]],11],[[[1,[10]],[1,[10]]],11],[[[1,[12]],13],14],[[]],[[]],[[]],[15,1],[1,2],[1,2],[[1,5],2],[[1,5],2],[[[1,[16]],17]],[[1,5]],[[1,5]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1,11],[1,18],[1,5],[[[1,[[4,[3]]]],3],5],[[],1],[18,2],[19,2],[18,2],[[[1,[20]],[1,[20]]],[[2,[9]]]],[[1,7],5],[1,2],[1,2],[1],[1],[[1,5],2],[[1,5],1],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],21],[[],21],[[],21],[[[1,[[4,[3]]]],3],5]],"c":[],"p":[[3,"AvlTree"],[4,"Option"],[8,"Ord"],[8,"Borrow"],[15,"usize"],[4,"Result"],[8,"FnMut"],[8,"Clone"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[8,"Hash"],[8,"Hasher"],[3,"Iter"],[3,"IntoIter"],[8,"PartialOrd"],[3,"TypeId"]]},\
"bfs":{"doc":"","t":"FFFFF","n":["calc_dist","calc_dist_restore","find_path","tree_diamter","tree_diamter_restore"],"q":[[0,"bfs"]],"d":["一点からの距離配列を作ります。","…","start から end …","…","…"],"i":[0,0,0,0,0],"f":[[1,[[3,[2]]]],[1],[[1,1],[[4,[[3,[1]]]]]],[[]],[[]]],"c":[],"p":[[15,"usize"],[15,"u32"],[3,"Vec"],[4,"Option"]]},\
"bfs01":{"doc":"","t":"NENLLFFLLLLLLLLLLL","n":["One","Weight","Zero","borrow","borrow_mut","calc_dist","calc_dist_restore","clone","clone_into","eq","fmt","from","hash","into","to_owned","try_from","try_into","type_id"],"q":[[0,"bfs01"]],"d":["","","","","","一点からの距離配列を作ります。","…","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[4,0,4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4],"f":[0,0,0,[[]],[[]],[1,[[3,[2]]]],[1],[4,4],[[]],[[4,4],5],[[4,6],7],[[]],[[4,8]],[[]],[[]],[[],9],[[],9],[[],10]],"c":[],"p":[[15,"usize"],[15,"u32"],[3,"Vec"],[4,"Weight"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Result"],[3,"TypeId"]]},\
"binary":{"doc":"二分法（ダブリング）をします。","t":"IKKKFKF","n":["Pow","is_nonone","is_nonzero","is_odd","operator_binary","shr1","value_binary"],"q":[[0,"binary"]],"d":["…","<code>*x != 1</code>","<code>*x != 0</code>","<code>x &amp; 1 == 1</code>","aⁿ(x) を計算します。","<code>self &gt;&gt;= 1</code>","aⁿを計算します。"],"i":[0,2,2,2,0,2,0],"f":[0,[[],1],[[],1],[[],1],[[2,3,3]],[[]],[[2,3]]],"c":[],"p":[[15,"bool"],[8,"Pow"],[8,"FnMut"]]},\
"bitutils":{"doc":"Provides iterator utilities of integer expression of sets.","t":"DDILLLLLLLLLFLLLLLLLLLLLLLLLLKFLLLLLLLLKK","n":["Combinations","Subsets","Unsigned","bit_length","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","combinations","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","into_iter","into_iter","next","next","one","subsets","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","wrapping_neg","zero"],"q":[[0,"bitutils"]],"d":["See the document of <code>combinations</code>","See the document of <code>subsets</code>","Adapter trait of this crate. Already implemented for all …","","","","","","","","","","Returns an iterator over k-subsets of …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns an iterator over subsets of <code>bs</code>.","","","","","","","","","",""],"i":[0,0,0,5,3,4,3,4,3,4,3,4,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,5,0,3,4,3,4,3,4,3,4,5,5],"f":[0,0,0,[[],1],[[]],[[]],[[]],[[]],[[[3,[2]]],[[3,[2]]]],[[[4,[2]]],[[4,[2]]]],[[]],[[]],[[1,1],[[3,[5]]]],[[],[[3,[6]]]],[[],[[4,[6]]]],[[[3,[7]],[3,[7]]],8],[[[4,[7]],[4,[7]]],8],[[[3,[9]],10],11],[[[4,[9]],10],11],[[]],[[]],[[[3,[12]],13]],[[[4,[12]],13]],[[]],[[]],[[]],[[]],[[[3,[5]]],14],[[[4,[5]]],14],[[]],[5,[[4,[5]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]]],"c":[],"p":[[15,"u32"],[8,"Clone"],[3,"Combinations"],[3,"Subsets"],[8,"Unsigned"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"bitvec":{"doc":"Boolean 配列を <code>u64</code> …","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BitVec","Iter","bitand_assign","bitor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","eq","fmt","format","from","from","from_01str","from_iter","hash","into","into","into_iter","into_iter","is_empty","iter","len","new","next","push","set","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","test","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unset"],"q":[[0,"bitvec"]],"d":["Boolean 配列を <code>u64</code> …","ビットを順に <code>bool</code> を返すイテレータです。","","","","","","","","","","","","","指定したフォーマットの <code>String</code> …","Returns the argument unchanged.","Returns the argument unchanged.","“01” 文字列から構築します。","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","長さを返します。","ビットを順に <code>bool</code> …","長さを返します。","サイズを指定して 0 埋め構築します。","","後ろに要素を追架します。","特定のビットを立てます。","","","","","","","","","","","","","","","","","","","","","","","","","特定のビットが立っていれば <code>true</code> …","","","","","","","","","特定のビットをおろします。"],"i":[0,0,1,1,1,10,1,10,1,1,1,1,1,1,1,10,1,1,1,1,10,1,10,1,1,1,1,1,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,1,10,1,10,1,1],"f":[0,0,[[1,1]],[[1,1]],[[1,1]],[[]],[[]],[[]],[[]],[1,1],[[]],[[],1],[[1,1],2],[[1,3],4],[[1,5,5],6],[[]],[[]],[7,1],[8,1],[[1,9]],[[]],[[]],[[]],[1,10],[1,2],[1,10],[1,11],[11,1],[10,[[12,[2]]]],[[1,2]],[[1,11]],[[1,13]],[[1,14]],[[1,15]],[[1,16]],[[1,17]],[[1,18]],[[1,19]],[[1,20]],[[1,21]],[[1,22]],[[1,23]],[[1,11]],[[1,16]],[[1,11]],[[1,22]],[[1,18]],[[1,13]],[[1,19]],[[1,15]],[[1,21]],[[1,17]],[[1,20]],[[1,14]],[[1,23]],[[1,11],2],[[]],[1,6],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[1,11]]],"c":[],"p":[[3,"BitVec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"char"],[3,"String"],[15,"str"],[8,"IntoIterator"],[8,"Hasher"],[3,"Iter"],[15,"usize"],[4,"Option"],[15,"i8"],[15,"i32"],[15,"u8"],[15,"i16"],[15,"u64"],[15,"u32"],[15,"i64"],[15,"i128"],[15,"u128"],[15,"isize"],[15,"u16"],[4,"Result"],[3,"TypeId"]]},\
"bsgs":{"doc":"Baby-step giant-step …","t":"DLLLLLLLLLLLLL","n":["Bsgs","borrow","borrow_mut","clone","clone_into","fmt","from","into","log","new","to_owned","try_from","try_into","type_id"],"q":[[0,"bsgs"]],"d":["Baby-stpp giant-step のソルバーです。","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>x</code> …","新しい BSGS ソルバーを構築します。","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[]],[[[2,[3]],4],5],[[]],[[]],[[[2,[[0,[6,7,8]],9]],[0,[6,7,8]]],[[11,[10]]]],[[[0,[6,7,8]],10,9,9,9],[[2,[[0,[6,7,8]],9]]]],[[]],[[],12],[[],12],[[],13]],"c":[],"p":[[8,"Clone"],[3,"Bsgs"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Copy"],[8,"Hash"],[8,"Eq"],[8,"Fn"],[15,"u64"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"cht":{"doc":"CHT です。","t":"DEEIDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BTreeCht","Concave","Convex","ConvexOrConcave","Quadratic","VecCht","X","add","add","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","eq","eq","eval","eval","eval","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","mul","multieval","multieval","neg","negate_if_concave","negate_if_concave","negate_if_concave","new","new","square","sub","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"cht"]],"d":["ログがつく方","凹関数を管理する方であるというマーカー","凸関数を管理する方であるというマーカー","<code>BTreeCht</code>, <code>VecCht</code> …","二次式","ログがつかない方","変数","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,2,4,3,6,7,2,4,3,6,7,2,4,3,6,7,2,4,3,6,7,2,4,3,2,4,3,2,4,3,2,4,3,6,7,2,4,3,6,7,2,4,3,3,6,7,2,4,3,6,7,2,4,3,3,2,4,3,1,6,7,2,4,3,3,6,7,2,4,3,6,7,2,4,3,6,7,2,4,3,6,7,2,4,3],"f":[0,0,0,0,0,0,0,[[[2,[1]],3]],[[[4,[1]],3]],[[3,[5,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[7,7],[[[2,[8]]],[[2,[8]]]],[[[4,[8]]],[[4,[8]]]],[3,3],[[]],[[]],[[]],[[]],[[]],[[],[[2,[9]]]],[[],[[4,[9]]]],[[],3],[[[2,[10]],[2,[10]]],11],[[[4,[10]],[4,[10]]],11],[[3,3],11],[[[2,[1]],12],12],[[[4,[1]],12],12],[[3,12],12],[[6,13],14],[[7,13],14],[[[2,[15]],13],14],[[[4,[15]],13],14],[[3,13],14],[[]],[[]],[[]],[[]],[12,3],[[]],[[6,16]],[[7,16]],[[[2,[17]],16]],[[[4,[17]],16]],[[3,16]],[[]],[[]],[[]],[[]],[[]],[[3,[5,[3]]]],[[[2,[1]],18],[[19,[12]]]],[[[4,[1]],18],[[19,[12]]]],[3],[12,12],[12,12],[12,12],[[],[[2,[1]]]],[[],[[4,[1]]]],[3,3],[[3,[5,[3]]]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21]],"c":[],"p":[[8,"ConvexOrConcave"],[3,"VecCht"],[3,"Quadratic"],[3,"BTreeCht"],[8,"Into"],[4,"Convex"],[4,"Concave"],[8,"Clone"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[15,"i64"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hasher"],[8,"Hash"],[8,"Iterator"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"cipolla":{"doc":"","t":"SSISF","n":["ONE","TWO","Unsigned","ZERO","cipolla_sqrt"],"q":[[0,"cipolla"]],"d":["","","","",""],"i":[1,1,0,1,0],"f":[0,0,0,0,[[1,1],[[2,[1]]]]],"c":[],"p":[[8,"Unsigned"],[4,"Option"]]},\
"cmpmore":{"doc":"Utility <code>change_{min,max}</code>.","t":"IFLOFLO","n":["CmpMore","change_max","change_max","change_max","change_min","change_min","change_min"],"q":[[0,"cmpmore"]],"d":["Provide method versions of <code>change_min()</code>, <code>change_max()</code>","If <code>lhs</code> is smaller than <code>rhs</code>, override <code>lhs</code> by <code>rhs</code>.","If <code>self</code> is smaller than <code>rhs</code>, override <code>self</code> by <code>rhs</code>.","Macro version of <code>change_max()</code>. This is useful to avoid …","If <code>lhs</code> is larger than <code>rhs</code>, override <code>lhs</code> by <code>rhs</code>.","If <code>self</code> is larger than <code>rhs</code>, override <code>self</code> by <code>rhs</code>.","Macro version of <code>change_min()</code>. This is useful to avoid …"],"i":[0,0,2,0,0,2,0],"f":[0,[[1,1]],[[]],0,[[1,1]],[[]],0],"c":[],"p":[[8,"PartialOrd"],[8,"CmpMore"]]},\
"convex_hull":{"doc":"","t":"FFFFF","n":["caliper","ccw","convex_hull","is_convex","sqmag"],"q":[[0,"convex_hull"]],"d":["凸包を求めます。 …","det(p1 - p0, p2 - p0) を求めます。","凸包を求めます。 …","凸であれば true を返します。","|p0 - p1| ^ 2 を求めます。"],"i":[0,0,0,0,0],"f":[[[]],[[],1],[[],2],[[],3],[[],1]],"c":[],"p":[[15,"i64"],[3,"Vec"],[15,"bool"]]},\
"dfs":{"doc":"","t":"F","n":["calc_reachability"],"q":[[0,"dfs"]],"d":["一点からの到達可能性配列を返します。"],"i":[0],"f":[[1,[[3,[2]]]]],"c":[],"p":[[15,"usize"],[15,"bool"],[3,"Vec"]]},\
"dial":{"doc":"","t":"FF","n":["calc_dist","calc_dist_restore"],"q":[[0,"dial"]],"d":["一点からの距離配列を作ります。","一点からの距離配列を作ります。"],"i":[0,0],"f":[[1,[[3,[2]]]],[1]],"c":[],"p":[[15,"usize"],[15,"u32"],[3,"Vec"]]},\
"dijkstra_radix_heap":{"doc":"CAUTION: <code>RadixHeap</code> fails in testst!","t":"FF","n":["calc_dist","calc_dist_restore"],"q":[[0,"dijkstra_radix_heap"]],"d":["一点からの距離配列を作ります。","一点からの距離配列を作ります。"],"i":[0,0],"f":[[1,[[3,[2]]]],[1]],"c":[0],"p":[[15,"usize"],[15,"u32"],[3,"Vec"]]},\
"dinic":{"doc":"Solves maximum flow problem.","t":"DDDILLLLLLLMLLLLLLLLLLLMLLLLLLLMLLLLKLLLLLMLLLLLLLLLLLLK","n":["Dinic","Edge","EdgeKey","Value","add_edge","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cap","change_edge","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","flow","flow","flow_with_limit","fmt","fmt","fmt","from","from","from","from","get_edge","get_edges","get_excess","get_network","infinity","into","into","into","min_cut","new","to","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":[[0,"dinic"]],"d":["A struct to execute Dinic’s algorithm.","A summary of the state of an edge, which is returned by …","A key object to query an edge.","An adapter trait of the capacity.","Inserts a new edge to the network.","","","","","","","The capacity of an edge.","Changes the capacity and the amount of the edge …","","","","","","","","","","Auguments the flow from <code>s</code> to <code>t</code> as much as possible. It …","The value of the flow of the network at this edge.","Auguments the flow from <code>s</code> to <code>t</code> as much as possible as long …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The vertex-index of the source of an edge.","Returns the current internal state of the edges.","Collects all the edges.","Returens the <code>Vec</code> of excess of all the vertices.","Collects all the edges and arrange it in adjacent-list …","Returns the max value of <code>Self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a vector of length <code>n</code>, such that the <code>i</code>-th element …","Creates a new instance of <code>Dinic</code>","The vertex-index of the target of an edge.","","","","","","","","","","","","","Returns the zero."],"i":[0,0,0,0,2,2,6,4,2,6,4,6,2,2,6,4,2,6,4,2,6,4,2,6,2,2,6,4,2,6,4,6,2,2,2,2,1,2,6,4,2,2,6,2,6,4,2,6,4,2,6,4,2,6,4,1],"f":[0,0,0,0,[[[2,[1]],3,3,1],4],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[2,[1]],4,1,1]],[[[2,[5]]],[[2,[5]]]],[[[6,[5]]],[[6,[5]]]],[4,4],[[]],[[]],[[]],[[[2,[7]],[2,[7]]],8],[[[6,[7]],[6,[7]]],8],[[4,4],8],[[[2,[1]],3,3],1],0,[[[2,[1]],3,3,1],1],[[[2,[1]],9],10],[[[6,[11]],9],10],[[4,9],10],[[]],[[]],[[]],0,[[[2,[1]],4],[[6,[1]]]],[[[2,[1]]],[[12,[[6,[1]]]]]],[[[2,[1]]],[[12,[1]]]],[[[2,[1]]],[[12,[[12,[[6,[1]]]]]]]],[[]],[[]],[[]],[[]],[[[2,[1]],3],[[12,[8]]]],[3,[[2,[1]]]],0,[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[]]],"c":[],"p":[[8,"Value"],[3,"Dinic"],[15,"usize"],[3,"EdgeKey"],[8,"Clone"],[3,"Edge"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"dual_segtree":{"doc":"双対セグメント木（右作用）","t":"DIQLLLLLLLLLLLLLLLLKLLLLLKLLLLL","n":["DualSegtree","Ops","Value","apply","borrow","borrow_mut","clone","clone_into","collect_vec","default","eq","fmt","from","from","from_iter","get","get_cloned","get_copied","get_mut","identity","into","into_vec","is_empty","len","new","op","op_assign_from_right","to_owned","try_from","try_into","type_id"],"q":[[0,"dual_segtree"]],"d":["双対セグメント木（右作用）","演算（右作用）","値型","<code>range</code> に <code>x</code> を作用させます。（右作用）","","","","","<code>Vec</code> に変換します。","","","","","Returns the argument unchanged.","","<code>i</code> 番目の要素への参照を返します。","<code>i</code> 番目の要素をクローンして返します。","<code>i</code> 番目の要素をコピーして返します。","<code>i</code> 番目の要素への可変参照を返します。","<code>op</code> の単位元","Calls <code>U::from(self)</code>.","<code>Vec</code> に変換します。","空なら <code>true</code> を返します。","管理している配列の長さを返します。","<code>ExactSizeIterator</code> から作ります。","作用する演算（右作用）","<code>lhs</code> を <code>op(lhs, rhs)</code> で置き換えます。","","","",""],"i":[0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2],"f":[0,0,0,[[[2,[1]],[4,[3]]]],[[]],[[]],[[[2,[[0,[5,1]]]]],[[2,[[0,[5,1]]]]]],[[]],[[[2,[1]]],6],[[],[[2,[[0,[7,1]]]]]],[[[2,[[0,[8,1]]]],[2,[[0,[8,1]]]]],9],[[[2,[1]],10],11],[6,[[2,[1]]]],[[]],[12,[[2,[1]]]],[[[2,[1]],3]],[[[2,[1]],3]],[[[2,[1]],3]],[[[2,[1]],3]],[[]],[[]],[[[2,[1]]],6],[[[2,[1]]],9],[[[2,[1]]],3],[12,[[2,[1]]]],[[]],[[]],[[]],[[],13],[[],13],[[],14]],"c":[],"p":[[8,"Ops"],[3,"DualSegtree"],[15,"usize"],[8,"RangeBounds"],[8,"Clone"],[3,"Vec"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[4,"Result"],[3,"TypeId"]]},\
"elim":{"doc":"","t":"F","n":["column_reduce"],"q":[[0,"elim"]],"d":["…"],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"usize"]]},\
"erato":{"doc":"Use the two types of sieve of eratosthenes to query.","t":"IDIDDDDDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLK","n":["Int","LpdSieve","PrimeFactors","PrimeFactorsByLookup","PrimeFactorsByTrialDivision","PrimeNumbers","Rle","Sieve","Unique","as_usize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from_usize","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_prime","is_prime","len","len","lpd","new","new","next","next","next","next","next","one","prime_factors","prime_factors","prime_numbers","prime_numbers","rle","rle","rle","rle","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique","unique","unique","unique","with_len","with_len","zero"],"q":[[0,"erato"]],"d":["Abstraction of integers.","Least-prime-divisor table.","An abstraction of prime factor generator.","See the document of <code>crate::LpdSieve::prime_factors</code>","See the document of <code>crate::Sieve::prime_factors</code>","An iterator to generate all the prime numbers, constructed …","An iterator returned by <code>PrimeFactors::rle</code>","Is-prime table.","An iterator returned by <code>PrimeFactors::unique</code>","Converts into <code>usize</code>","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>usize</code> into <code>Self</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if a sieve is empty.","Returns <code>true</code> if a sieve is empty.","Returns <code>true</code> if <code>x</code> is a prime number.","Returns <code>true</code> if <code>x</code> is a prime number.","Returns the length of a sieve.","Returns the length of a sieve.","Returns the least prime divisor of <code>x</code>.","Construct a new empty sieve. No heap allocations is run …","Construct a new empty sieve. No heap allocations is run …","","","","","","Returns <code>1</code>.","Use trial-division algorithm to iterate over all the prime …","Use trial-division algorithm to iterate over all the prime …","Returns an iterator to generate all the prime numbers in …","Returns an iterator to generate all the prime numbers in …","Returns an iterator to generate the pairs of distinct …","Returns an iterator to generate the pairs of distinct …","","Forward <code>crate::PrimeFactors::rle</code>.","","","","","","","","","","","","","","","","","Returns <code>2</code>.","","","","","","","","Make prime factors unique.","Make prime factors unique.","","Forward <code>crate::PrimeFactors::unique</code>.","Construct a sieve of given length.","Construct a sieve of given length.","Returns <code>0</code>."],"i":[0,0,0,0,0,0,0,0,0,7,9,11,12,13,14,2,3,9,11,12,13,14,2,3,2,3,2,3,2,3,2,3,2,3,9,11,12,13,14,2,3,7,9,11,12,13,14,2,3,9,11,12,13,14,2,3,2,3,2,3,2,2,3,9,11,12,13,14,7,2,3,2,3,8,8,13,14,2,3,9,11,12,13,14,2,3,9,11,12,13,14,2,3,7,9,11,12,13,14,2,3,8,8,13,14,2,3,7],"f":[0,0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[3,3],[[]],[[]],[[],2],[[],3],[[2,2],4],[[3,3],4],[[2,5],6],[[3,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,4],[3,4],[[2,7],4],[[3,7],4],[2,1],[3,1],[[2,7],7],[[],2],[[],3],[[[9,[7,[8,[7]]]]],10],[[[11,[7,[8,[7]]]]],10],[[[12,[0,7]]],10],[[[13,[7]]],10],[[[14,[7]]],10],[[]],[[2,7],[[14,[7]]]],[[3,7],[[13,[7]]]],[2,[[12,[0,7]]]],[3,[[12,[0,7]]]],[[],11],[[],11],[[[13,[7]]],[[11,[7,[13,[7]]]]]],[[[14,[7]]],[[11,[7,[14,[7]]]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],9],[[],9],[[[13,[7]]],[[9,[7,[13,[7]]]]]],[[[14,[7]]],[[9,[7,[14,[7]]]]]],[1,2],[1,3],[[]]],"c":[],"p":[[15,"usize"],[3,"LpdSieve"],[3,"Sieve"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Int"],[8,"PrimeFactors"],[3,"Unique"],[4,"Option"],[3,"Rle"],[3,"PrimeNumbers"],[3,"PrimeFactorsByTrialDivision"],[3,"PrimeFactorsByLookup"],[4,"Result"],[3,"TypeId"]]},\
"euclid":{"doc":"","t":"IIIKFKLFFKKKK","n":["Int","Signed","Unsigned","abs","crt","div_euclid","divides","ext_gcd","gcd","increment","one","rem_euclid","zero"],"q":[[0,"euclid"]],"d":["Abstraction of integers.","Abstraction of signed integers.","Abstraction of unsigned integers.","Returns the absolute value.","Returns an integer <code>res2, mod2</code> such that (res0 + mod0 ℤ) …","Calculates the quotient of Euclidean division of self by …","Returns <code>true</code> if and only if <code>self</code> divides <code>n</code>.","Takes two integers <code>x, y</code> and returns <code>a, b, g</code> satisfying …","Returns the greatest common divisor of <code>x</code> and <code>y</code>.","Increment <code>self</code>.","Returns <code>1</code>.","Calculates the least nonnegative remainder of …","Returns <code>0</code>."],"i":[0,0,0,4,0,4,4,0,0,4,4,4,4],"f":[0,0,0,[[]],[[1,1,1,1],2],[[]],[[],3],[[1,1]],[[4,4],4],[[]],[[]],[[]],[[]]],"c":[],"p":[[8,"Signed"],[4,"Option"],[15,"bool"],[8,"Int"]]},\
"filter_position":{"doc":"条件を満たす位置を返すイテレータです。","t":"DILLLLLLLLLLLLLLLLL","n":["FilterPosition","TFilterPosition","borrow","borrow_mut","clone","clone_into","eq","filter_position","filter_position_by","fmt","from","hash","into","into_iter","next","to_owned","try_from","try_into","type_id"],"q":[[0,"filter_position"]],"d":["<code>TFilterPosition::filter_position_by</code> …","…","","","","","","<code>true</code> の位置を返すイテレータを返します。","…","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,2,2,2,2,2,15,15,2,2,2,2,2,2,2,2,2,2],"f":[0,0,[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[]],[[[2,[3,3]],[2,[3,3]]],4],[5,[[2,[5]]]],[6,[[2,[6]]]],[[[2,[7,7]],8],9],[[]],[[[2,[10,10]],11]],[[]],[[]],[[[2,[5,6]]],12],[[]],[[],13],[[],13],[[],14]],"c":[],"p":[[8,"Clone"],[3,"FilterPosition"],[8,"PartialEq"],[15,"bool"],[8,"Iterator"],[8,"Fn"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"TFilterPosition"]]},\
"fp":{"doc":"A library for modular arithmetic.","t":"DDISLLLLLLFLLLLLLLLLLLLLLLLLLFLLOFLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Factorial","Fp","PrimitiveRoot","VALUE","add","add","add","add","add_assign","add_assign","any_mod_fps_mul","binom","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","comb","comb_or_zero","comb_with_reputation","div","div","div","div","div_assign","div_assign","eq","fact","fft","fmt","fmt","fp","fps_mul","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","ifft","index","into","into","inv","inv_fact","mul","mul","mul","mul","mul_assign","mul_assign","neg","new","new","perm","pow","product","product","sign","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value"],"q":[[0,"fp"]],"d":["Precomputes the factorials and their inverses.","A value in $\\\\mathbb{Fp}_p$.","A primitive root of unity.","A primitive root of unity.","","","","","","","Multiplies two polynomials.","Another name for <code>Factorial::comb</code>.","","","","","","","The binominal coefficient $n \\\\choose k$","The binominal coefficient $n \\\\choose k$, but zero if $k &lt; …","The number of $k$-multicombinations of $n$ objects","","","","","","","","The factorial $n!$ <code>Index</code> is implemented for this method.","Fast Fourier transform.","","","Constructs a new instance of <code>Fp</code>","Multiplies two polynomials.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Inverse fast Fourier transform.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the multiplicative inverse.","The inverse of the factorial $n!$","","","","","","","","Constructs a new instance.","Constructs a new instance.","The permutation $P(n, k)$","Returns the $n$-th power.","","","Returns $(-1)^{\\\\text{pow}}$.","","","","","","","","","","","","","","","","","Returns the value."],"i":[0,0,0,26,1,1,1,1,1,1,0,4,4,1,4,1,1,1,4,4,4,1,1,1,1,1,1,1,4,0,1,1,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,4,4,1,1,4,1,1,1,1,1,1,1,4,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,4,1,4,1,1],"f":[0,0,0,0,[[1,1]],[[1,[2,[1]]]],[[1,[2,[1]]]],[[1,1]],[[1,1]],[[1,1]],[[],[[3,[1]]]],[[4,5,5],1],[[]],[[]],[[]],[[]],[1,1],[[]],[[4,5,5],1],[[4,5,6],1],[[4,5,5],1],[[1,[2,[1]]]],[[1,1]],[[1,[2,[1]]]],[[1,1]],[[1,1]],[[1,1]],[[1,1],7],[[4,5],1],[[]],[[1,8],9],[[1,8],9],0,[[10,10],[[3,[1]]]],[[]],[[]],[11,1],[12,1],[5,1],[13,1],[14,1],[15,1],[6,1],[16,1],[17,1],[18,1],[19,1],[20,1],[[1,21]],[[]],[[4,5]],[[]],[[]],[1,1],[[4,5],1],[[1,[2,[1]]]],[[1,[2,[1]]]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[1],[5,4],[20,1],[[4,5,5],1],[[1,20],1],[22,1],[22,1],[5,1],[[1,[2,[1]]]],[[1,1]],[[1,1]],[[1,[2,[1]]]],[[1,1]],[[1,1]],[22,1],[22,1],[[]],[[],23],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[1,20]],"c":[],"p":[[3,"Fp"],[8,"Into"],[3,"Vec"],[3,"Factorial"],[15,"usize"],[15,"isize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"AsRef"],[15,"u32"],[15,"u8"],[15,"i8"],[15,"i16"],[15,"u16"],[15,"i64"],[15,"u128"],[15,"i128"],[15,"i32"],[15,"u64"],[8,"Hasher"],[8,"Iterator"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"PrimitiveRoot"]]},\
"fps":{"doc":"Arithmetic of formal power series.","t":"OFFFFFFF","n":["fps","fps_deriv","fps_exp","fps_int","fps_inv","fps_log","fps_pow","fps_sqrt"],"q":[[0,"fps"]],"d":["Define a formal power series in the same way as <code>vec!</code>.","Returns the derivative of a formal power series.","Returns the exponential of a formal power series.","Returns the integral of a formal power series with zero …","Returns the multiplicative inverse of a formal power …","Returns the logarithm of a formal power series.","Resutns the $n$-th power of a formal power series.","Returns the square root of a formal power series."],"i":[0,0,0,0,0,0,0,0],"f":[0,[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[[1,2,2],[[4,[3]]]],[[1,2],[[4,[3]]]]],"c":[],"p":[[8,"AsRef"],[15,"usize"],[3,"Fp"],[3,"Vec"]]},\
"gco":{"doc":"Solve a submodular graph cut optimizaion problem of degree …","t":"DDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["Gco","GcoResult","args","binary","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","new","solve","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unary","value"],"q":[[0,"gco"]],"d":["A solver of graph cut optimization problems.","The minimum value and and an argmin of $f$.","An argmin","Add a binary term.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize a solver with $n$ terms.","Returns the minimum value and an argmin of $f$.","","","","","","","","","Add a unary term.","The minimum value"],"i":[0,0,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,2,1,2,1,2,1,2,1,2],"f":[0,0,0,[1],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[],1],[[],2],[[1,1],3],[[2,2],3],[[1,4],5],[[2,4],5],[[]],[[]],[[1,6]],[[2,6]],[[]],[[]],[7,1],[1,2],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[1,7]],0],"c":[],"p":[[3,"Gco"],[3,"GcoResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"gridnei":{"doc":"…","t":"QDDDDDDDDDDISLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLFFOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLL","n":["Array","Encode","Grid0","Grid1","Grid2","Grid3","Grid4","Grid5","Grid6","Grid7","Grid8","GridIterator","LEN","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","encode","encode","encode","encode","encode","encode","encode","encode","encode","from","from","from","from","from","from","from","from","from","from","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","grid4","grid4encode","grid_iter","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w","w","w","w","w","w","w","w"],"q":[[0,"gridnei"]],"d":["","…","","","","","","","","","","<code>grid_iter!</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","…","…","新しい <code>Grid*</code> を定義して、<code>GridIterator</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[13,0,0,0,0,0,0,0,0,0,0,0,13,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,13,2,1,1,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,0,0,0,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,13,1,3,4,5,6,7,8,9,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[2,[1]]]],[3,[[2,[3]]]],[4,[[2,[4]]]],[5,[[2,[5]]]],[6,[[2,[6]]]],[7,[[2,[7]]]],[8,[[2,[8]]]],[9,[[2,[9]]]],[10,[[2,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,11,11,11,12]],[[11,11,11,12],[[2,[13]]]],[[11,11,11,11,12],1],[[11,11,11,11,12],1],[[11,11,11,11,12],3],[[11,11,11,11,12],3],[[11,11,11,11,12],4],[[11,11,11,11,12],4],[[11,11,11,11,12],5],[[11,11,11,11,12],5],[[11,11,11,11,12],6],[[11,11,11,11,12],6],[[11,11,11,11,12],7],[[11,11,11,11,12],7],[[11,11,11,11,12],8],[[11,11,11,11,12],8],[[11,11,11,11,12],9],[[11,11,11,11,12],9],[[11,11,11,11,12],10],[[11,11,11,11,12],10],[[11,11,11,11],6],[[11,11,11],[[2,[6]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,[[2,[13]]]],[[11,11],1],[[11,11],3],[[11,11],4],[[11,11],5],[[11,11],6],[[11,11],7],[[11,11],8],[[11,11],9],[[11,11],10],[[[2,[13]]],14],[1,14],[3,14],[4,14],[5,14],[6,14],[7,14],[8,14],[9,14],[10,14],[[[2,[13]]],14],[1,14],[3,14],[4,14],[5,14],[6,14],[7,14],[8,14],[9,14],[10,14],[[[2,[13]]]],[1],[3],[4],[5],[6],[7],[8],[9],[10],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],11],[1,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11]],"c":[],"p":[[3,"Grid0"],[3,"Encode"],[3,"Grid1"],[3,"Grid2"],[3,"Grid3"],[3,"Grid4"],[3,"Grid5"],[3,"Grid6"],[3,"Grid7"],[3,"Grid8"],[15,"usize"],[8,"FnMut"],[8,"GridIterator"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"gss":{"doc":"黄金分割探索をします。","t":"IISIKKKKFFFFKKKKKK","n":["Float","Golden","INVPHI","Int","abs","as_f64","f64_as","golden_sect","gss_by_absolute_eps","gss_by_count","gss_integer","gss_on_slice","is_finite","max","midpoint_sorted","one","two","zero"],"q":[[0,"gss"]],"d":["<code>gss_by_count</code> …","黄金分割をする関数 <code>golden_sect</code> …","1 / φ = 0.6180339887498949","<code>gss_integer</code> …","<code>Self</code> の同名メソッド","","","<code>self</code> と <code>other</code> を φ:1 …","…","回数指定バージョン。<code>count</code> …","整数バージョン。正確な値を返します。","…","<code>Self</code> の同名メソッド","<code>Self</code> の同名メソッド","数学的な <code>floor((self + upper)/2)</code> …","<code>1</code>","2.0","0.0"],"i":[0,0,2,0,2,6,6,3,0,0,0,0,2,2,6,6,2,2],"f":[0,0,0,0,[[]],[[],1],[1],[[]],[[[0,[2,3]],[0,[2,3]],4,[0,[2,3]]],[[0,[2,3]]]],[[[0,[2,3]],[0,[2,3]],4,5],[[0,[2,3]]]],[[[0,[6,3]],[0,[6,3]],4],[[0,[6,3]]]],[[],5],[[],7],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[15,"f64"],[8,"Float"],[8,"Golden"],[8,"Fn"],[15,"usize"],[8,"Int"],[15,"bool"]]},\
"heap_slope_trick":{"doc":"<code>BinaryHeap</code> 二本で slope trick をします。","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLL","n":["HeapSlopeTrick","Summary","add_abs","add_const","add_cutoff_anti_diagonal","add_cutoff_diagonal","articulation_points","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cumulative_min_from_left","cumulative_min_from_right","default","default","eq","eval","fmt","fmt","from","from","get_argmin","get_minimum","get_tilt_maximum","get_tilt_minimum","hash","into","into","merge","new","shift","sliding_window_minimum","summary","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"heap_slope_trick"]],"d":["本体です。","<code>HeapSlopeTrick::summary()</code> の戻り値です。","絶対値関数加算 g(x) = f(x) + |x - a|","定数関数加算 g(x) = f(x) + c","傾き -1 のカットオフ一次関数加算 g(x) = f(x) …","傾き +1 のカットオフ一次関数加算 g(x) = f(x) …","関節点（二階差分が正である点）全体の列 …","","","","","","","","","左から累積最小値 g(x) = min { f(y) | y ∈ ]-∞, x…","右から累積最小値 g(x) = min { f(y) | y ∈ [x, ∞[…","","","","一点評価 f(x)","","","Returns the argument unchanged.","Returns the argument unchanged.","最小値を取る x の集合（と [MIN, MAX] …","最小値取得 min { f(x) | x in ]-∞, ∞[ }","差分の最大値 max { f(x + 1) - f(x) | x ∈ ]-∞, ∞…","差分の最小値 min { f(x + 1) - f(x) | x ∈ ]-∞, ∞…","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","足し算をします。","零関数 f(x) = 0","平行移動 g(x) = f ( x - a )","スライド最小値 g(x) = min { f(y) |  y ∈ [x - b, x …","関節点と差分の範囲を返します。","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,4,1,4,1,4,1,4,1,1,1,4,4,1,1,4,1,4,1,1,1,1,4,1,4,0,1,1,1,1,1,4,1,4,1,4,1,4],"f":[0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],[1,3],[[]],[[]],[[]],[[]],[1,1],[4,4],[[]],[[]],[1],[1],[[],1],[[],4],[[4,4],5],[[1,2],2],[[1,6],7],[[4,6],7],[[]],[[]],[1],[1,2],[1,2],[1,2],[[4,8]],[[]],[[]],[[1,1],1],[[],1],[[1,2]],[[1,2,2]],[1,4],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"c":[],"p":[[3,"HeapSlopeTrick"],[15,"i64"],[3,"Vec"],[3,"Summary"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Result"],[3,"TypeId"]]},\
"heap_tricks":{"doc":"<code>remove_unchecked</code> のできるヒープです。","t":"DIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLKLLLKLLLLKLLLKLLLLLLMLLLLLLLLLLLLLLLLLL","n":["DoubleHeap","Handler","Nop","RemovableHeap","Sum","balance_left","balance_right","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","collect_left_sorted_vec","collect_right_sorted_vec","collect_sorted_vec","collect_sorted_vec","default","default","default","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","handler","hash","hash","into","into","into","into","is_empty","is_empty","left","left_len","len","len","move_left","move_right","new","new","peek","peek_left","peek_right","pop","pop_left","pop_left","pop_left","pop_left","pop_right","pop_right","pop_right","pop_right","push","push_left","push_left","push_left","push_left","push_right","push_right","push_right","push_right","remove_left_unchecked","remove_right_unchecked","remove_unchecked","right","right_len","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_handler"],"q":[[0,"heap_tricks"]],"d":["…","集約操作を指定するためのトレイトです。 …","何も集約しないことを表す型です。 <code>Handler</code> …","論理削除のできるヒープです。","総和を集約するための型です。 <code>Handler</code> …","左側ヒープの要素が <code>k</code> …","右側ヒープの要素が <code>k</code> …","","","","","","","","","","","","","","","","","…","…","…","…","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","ハンドラへの参照を返します。","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ヒープが空ならば <code>true</code> を返します。","ヒープが空ならば <code>true</code> を返します。","","左側ヒープの要素数を返します。","全体の要素数を返します。","ヒープの長さを返します。","…","…","","空のヒープを構築します。","…","左側ヒープの最大要素があれば返します。","右側ヒープの最大要素があれば返します。","…","左側から削除するときのコールバック関数","","","…","右側から削除するときのコールバック関数","","","…","ヒープに新しい要素 <code>x</code> を追加します。","左側に挿入するときのコールバック関数","","","…","右側に挿入するときのコールバック関数","","","…","…","…","ヒープに含まれる要素 <code>x</code> を削除します。 …","","右側ヒープの要素数を返します。","","","","","","","","","","","","","","","","","<code>Handler</code> を指定して構築します。"],"i":[0,0,0,0,0,5,5,7,9,5,10,7,9,5,10,7,9,5,10,7,9,5,10,5,5,5,10,7,9,5,10,7,9,7,9,5,10,7,9,5,10,10,5,7,9,7,9,5,10,5,10,9,5,5,10,5,5,5,10,10,5,5,10,4,7,9,5,4,7,9,5,10,4,7,9,5,4,7,9,5,5,5,10,9,5,7,9,5,10,7,9,5,10,7,9,5,10,7,9,5,10,5],"f":[0,0,0,0,0,[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]],6]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]],6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[[[9,[8]]],[[9,[8]]]],[[[5,[8,8]]],[[5,[8,8]]]],[[[10,[8]]],[[10,[8]]]],[[]],[[]],[[]],[[]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],[[11,[[0,[1,2,3]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],[[11,[[0,[1,2,3]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],[[11,[[0,[1,2,3]]]]]],[[[10,[[0,[1,2,3]]]]],[[11,[[0,[1,2,3]]]]]],[[],7],[[],[[9,[12]]]],[[],[[5,[[0,[1,2,3]],7]]]],[[],[[10,[[0,[1,2,3]]]]]],[[7,7],13],[[[9,[14]],[9,[14]]],13],[[7,15],16],[[[9,[17]],15],16],[[[5,[[0,[1,2,3,17]],[0,[[4,[[0,[1,2,3,17]]]],17]]]],15],16],[[[10,[[0,[1,2,3,17]]]],15],16],[[]],[[]],[[]],[[]],[18,[[10,[[0,[1,2,3]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],[[4,[[0,[1,2,3]]]]]],[[7,19]],[[[9,[3]],19]],[[]],[[]],[[]],[[]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],13],[[[10,[[0,[1,2,3]]]]],13],0,[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],6],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],6],[[[10,[[0,[1,2,3]]]]],6],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]]],[[],[[5,[[0,[1,2,3]],7]]]],[[],[[10,[[0,[1,2,3]]]]]],[[[10,[[0,[1,2,3]]]]],[[20,[[0,[1,2,3]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],[[20,[[0,[1,2,3]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],[[20,[[0,[1,2,3]]]]]],[[[10,[[0,[1,2,3]]]]],[[20,[[0,[1,2,3]]]]]],[[]],[7],[[[9,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]],[0,[[21,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],[[20,[[0,[1,2,3]]]]]],[[]],[7],[[[9,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]],[0,[[21,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],[[20,[[0,[1,2,3]]]]]],[[[10,[[0,[1,2,3]]]],[0,[1,2,3]]]],[[]],[7],[[[9,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]],[0,[[21,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]],[0,[1,2,3]]]],[[]],[7],[[[9,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]],[0,[[21,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]],[22,[[0,[[21,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]],[22,[[0,[[21,[[0,[21,22]]]],[22,[[0,[21,22]]]]]]]]]]]]]]]]]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]],[0,[1,2,3]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]],[0,[1,2,3]]]],[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]],[0,[1,2,3]]]],[[[10,[[0,[1,2,3]]]],[0,[1,2,3]]]],0,[[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]],6],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[[4,[[0,[1,2,3]]]]],[[5,[[0,[1,2,3]],[4,[[0,[1,2,3]]]]]]]]],"c":[],"p":[[8,"Copy"],[8,"Ord"],[8,"Hash"],[8,"Handler"],[3,"DoubleHeap"],[15,"usize"],[3,"Nop"],[8,"Clone"],[3,"Sum"],[3,"RemovableHeap"],[3,"Vec"],[8,"Default"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"IntoIterator"],[8,"Hasher"],[4,"Option"],[8,"AddAssign"],[8,"SubAssign"],[4,"Result"],[3,"TypeId"]]},\
"hld":{"doc":"Heavy-Light Decomposition","t":"DDLLLLLLLLLLLMMLLLLLLMLLLLLLLL","n":["Hld","PathSegments","between","borrow","borrow","borrow_mut","borrow_mut","dist","from","from","from_edge_iterator","from_edges","from_short_parents","head","index","into","into","into_iter","lca","ledacy_iter_v","next","parent","path_segments","path_segments_by_index","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hld"]],"d":["Heavy-Light Decomposition","Iterator","<code>j</code> lies between <code>i</code> and <code>k</code>","","","","","Returns the distance between two vertices","Returns the argument unchanged.","Returns the argument unchanged.","Iterator version of <code>from_edges</code>","From the set of undirected edges $(u _ 0, v _ 0), \\\\dots ( …","From $p _ 1, \\\\dots, p _ { n - 1 }$. Root is always $0$.","vertex id -&gt; head vertex id","vertex id -&gt; vertex index (in the hld order)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the lca","deprecated","","vertex id -&gt; parent vertex id","Decompose the (directed) path <code>from --&gt; to</code> to the path …","Variation of <code>path_segments</code> that returns the <code>index</code>.","","","","","",""],"i":[0,0,1,1,7,1,7,1,1,7,1,1,1,1,1,1,7,7,1,1,7,1,1,1,1,7,1,7,1,7],"f":[0,0,[[1,2,2,2],3],[[]],[[]],[[]],[[]],[[1,2,2],2],[[]],[[]],[[2,4]],[2],[[[5,[2]]]],0,0,[[]],[[]],[[]],[[1,2,2],2],[[1,2,2],6],[7,8],0,[[1,2,2],7],[[1,2,2],6],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"c":[],"p":[[3,"Hld"],[15,"usize"],[15,"bool"],[8,"ExactSizeIterator"],[3,"Vec"],[8,"Iterator"],[3,"PathSegments"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"hopkarp":{"doc":"Finds a maximum cardinality bipartite matching by …","t":"DMLLLLMLLLMLLFLMMLLLL","n":["HopkarpResult","backward","borrow","borrow_mut","clone","clone_into","count","default","eq","fmt","forward","from","hash","hopkarp","into","left","right","to_owned","try_from","try_into","type_id"],"q":[[0,"hopkarp"]],"d":["Summary of the result of Hopcroft―Karp’s algorithm.","","","","","","Cardinality of a maximum cardinality bipartite matching.","","","","","Returns the argument unchanged.","","Takes a <em>forward</em> adjacency list and the length of the right …","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[]],0,[[],1],[[1,1],2],[[1,3],4],0,[[]],[[1,5]],[6,1],[[]],0,0,[[]],[[],7],[[],7],[[],8]],"c":[],"p":[[3,"HopkarpResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"hungarian":{"doc":"Solve an assignment problem by Hungarian algorithm.","t":"DIMLLLLLLMLFKLMMLLLLMK","n":["HungarianResult","Value","backward","borrow","borrow_mut","clone","clone_into","eq","fmt","forward","from","hungarian","infinity","into","left","right","to_owned","try_from","try_into","type_id","value","zero"],"q":[[0,"hungarian"]],"d":["A value object to represent the optimal solution of an …","A trait to adapt a value type to <code>hungarian</code>","Takes the second component of a match and returns the …","","","","","","","Takes the first component of a match and returns the …","Returns the argument unchanged.","See the crate level documentation","","Calls <code>U::from(self)</code>.","A left half of an optimal potential.","A right half of an optimal potential.","","","","","The value of an optimal solution.",""],"i":[0,0,3,3,3,3,3,3,3,3,3,0,2,3,3,3,3,3,3,3,3,2],"f":[0,0,0,[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[4,2]]]],[3,[[0,[4,2]]]]],5],[[[3,[[0,[6,2]]]],7],8],0,[[]],[[],[[3,[2]]]],[[]],[[]],0,0,[[]],[[],9],[[],9],[[],10],0,[[]]],"c":[],"p":[[8,"Clone"],[8,"Value"],[3,"HungarianResult"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"interval_heap":{"doc":"Interval Heaps","t":"DLLLLLLLLLLLLLLLLLLLLLLL","n":["IntervalHeap","borrow","borrow_mut","clone","clone_into","default","eq","extend","fmt","from","from","from_iter","into","into_iter","new","peek_max","peek_min","pop_max","pop_min","push","to_owned","try_from","try_into","type_id"],"q":[[0,"interval_heap"]],"d":["Interval heap (double-ended priority queue)","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Constructs a new, empty interval heap.","Returns $\\\\max(S)$.","Returns $\\\\min(S)$.","Removes and returns $\\\\max(S)$.","Removes and returns $\\\\min(S)$.","$S \\\\leftarrow S \\\\cup \\\\{\\\\!\\\\{x\\\\}\\\\!\\\\}$.","","","",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[],[[3,[2]]]],[[[3,[[0,[4,2]]]],[3,[[0,[4,2]]]]],5],[[[3,[2]],6]],[[[3,[[0,[7,2]]]],8],9],[[]],[[[10,[2]]],[[3,[2]]]],[6,[[3,[2]]]],[[]],[[[3,[2]]]],[[],[[3,[2]]]],[[[3,[2]]],[[11,[2]]]],[[[3,[2]]],[[11,[2]]]],[[[3,[2]]],[[11,[2]]]],[[[3,[2]]],[[11,[2]]]],[[[3,[2]],2]],[[]],[[],12],[[],12],[[],13]],"c":[],"p":[[8,"Clone"],[8,"Ord"],[3,"IntervalHeap"],[8,"PartialEq"],[15,"bool"],[8,"IntoIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"inversion_number":{"doc":"Calculates the number of inversions.","t":"F","n":["inversion_number"],"q":[[0,"inversion_number"]],"d":["Takes a sequence of numbers in <code>0..value_limit</code> and returns …"],"i":[0],"f":[[1,2]],"c":[],"p":[[15,"usize"],[15,"u64"]]},\
"io":{"doc":"Read input from stdin and parse it.","t":"IFK","n":["ParseLine","input","parse_line"],"q":[[0,"io"]],"d":["Trait for types that can be parsed.","Read input from stdin and parse it.",""],"i":[0,0,1],"f":[0,[[],1],[2]],"c":[],"p":[[8,"ParseLine"],[15,"str"]]},\
"itermore":{"doc":"An extension trait of <code>Iterator</code>","t":"DIDDDLLLLLLLLFKLLLLLLLLLLLLLLLLFKLLLLFKLLLLLLLLFKLLLLLLLLLLLLLLLL","n":["ClosedPrefixSum","IterMore","MaxDecrease","MaxIncrease","OpenPrefixSum","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","closed_prefix_sum","closed_prefix_sum","closed_prefix_sum","closed_prefix_sum","closed_prefix_sum","closed_prefix_sum","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_iter","max_decrease","max_decrease","max_decrease","max_decrease","max_decrease","max_decrease","max_increase","max_increase","max_increase","max_increase","max_increase","max_increase","next","next","next","next","open_prefix_sum","open_prefix_sum","open_prefix_sum","open_prefix_sum","open_prefix_sum","open_prefix_sum","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"itermore"]],"d":["Return value of <code>closed_prefix_sum</code>.","An extension trait of <code>Iterator</code>","Return value of <code>max_decrease</code>.","Return value of <code>max_increase</code>.","Return value of <code>open_prefix_sum</code>.","","","","","","","","","Returns $\\\\sum \\\\left \\\\lbrace a _ j \\\\vert 0 \\\\le j \\\\le i …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns $\\\\max \\\\left \\\\lbrace a _ j \\\\vert 0 \\\\le j \\\\le i …","","","","","","Returns $a _ i - \\\\min \\\\left \\\\lbrace a _ j \\\\vert 0 \\\\le j …","","","","","","","","","","Returns $\\\\sum \\\\left \\\\lbrace a _ j \\\\vert 0 \\\\le j \\\\lt i …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,2,4,3,6,2,4,3,0,10,6,2,4,3,6,2,4,3,6,2,4,3,6,2,4,3,0,10,6,2,4,3,0,10,6,2,4,3,6,2,4,3,0,10,6,2,4,3,6,2,4,3,6,2,4,3,6,2,4,3],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,3],[[],3],[[],3],[[],3],[[],3],[[],3],[1,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[6,[5]]],7],[[[2,[5]]],7],[[[4,[5]]],7],[[[3,[5]]],7],[1,6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9]],"c":[],"p":[[8,"IntoIterator"],[3,"ClosedPrefixSum"],[3,"MaxDecrease"],[3,"MaxIncrease"],[8,"Iterator"],[3,"OpenPrefixSum"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"IterMore"]]},\
"lagrange":{"doc":"ラグランジュ補完","t":"FFFF","n":["evaluate","interpolate","interpolate_first_n","interpolate_one_point_first_n"],"q":[[0,"lagrange"]],"d":["多項式の係数から 1 …","x 座標の異なるような N 点の評価から、N - 1 …","0..N の評価から、N - 1 …","0..N での評価から決まる N - 1 …"],"i":[0,0,0,0],"f":[[1,1],[[],[[2,[1]]]],[[],[[2,[1]]]],[1,1]],"c":[],"p":[[3,"Fp"],[3,"Vec"]]},\
"lazy_segbeats":{"doc":"","t":"IDLLLLLLLLLLKKKLLLLLLLLLK","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","eq","fmt","from","into","max_value","min_value","mul_u32","new","query_max","query_min","query_sum","range_add","to_owned","try_from","try_into","type_id","zero"],"q":[[0,"lazy_segbeats"]],"d":["","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,1],"f":[0,0,[[]],[[]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[3]]],[[2,[3]]]],[[]],[[[2,[6]],[2,[6]]],7],[[[2,[8]],9],10],[[]],[[]],[[]],[[]],[11],[[],[[2,[1]]]],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[]],[[],12],[[],12],[[],13],[[]]],"c":[],"p":[[8,"Elm"],[3,"Segbeats"],[8,"Clone"],[15,"usize"],[8,"RangeBounds"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"lazy_segtree":{"doc":"LazySegtree","t":"DIQQKLLLLLKLLLLLKKLLKLLLLL","n":["LazySegtree","Op","Operator","Value","apply","borrow","borrow_mut","clone","clone_into","collect","compose","fmt","fold","from","from_iter","get","identity","identity_op","into","new","op","range_apply","to_owned","try_from","try_into","type_id"],"q":[[0,"lazy_segtree"]],"d":["A lazy segment tree.","Opertions for a lazy segment tree.","The operator type.","The value type.","Applies an operator to a value.","","","","","Returns the values as a vector. It takes $O(n \\\\log n)$ …","Composes two operators. The result of <code>compose(a, b)</code> is …","","Folds a range.","Returns the argument unchanged.","","Returns the value at the index <code>i</code>.","Returns the identity value.","Returns the identity operator.","Calls <code>U::from(self)</code>.","Constructs a new lazy segment tree. You can use <code>from_iter</code> …","Multiplies two values.","Applies an operator to a range.","","","",""],"i":[0,0,2,2,2,3,3,3,3,3,2,3,3,3,3,3,2,2,3,3,2,3,3,3,3,3],"f":[0,0,0,0,[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[2]]],4],[[]],[[[3,[[0,[5,2]]]],6],7],[[[3,[2]],[9,[8]]]],[[]],[10,[[3,[2]]]],[[[3,[2]],8]],[[]],[[]],[[]],[[],[[3,[2]]]],[[]],[[[3,[2]],[9,[8]]]],[[]],[[],11],[[],11],[[],12]],"c":[],"p":[[8,"Clone"],[8,"Op"],[3,"LazySegtree"],[3,"Vec"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[8,"RangeBounds"],[8,"IntoIterator"],[4,"Result"],[3,"TypeId"]]},\
"lg":{"doc":"Provides a macro <code>lg</code> and formatting utils.","t":"DLFLLLOLLLOOOLLLL","n":["Dict","add_row","bools","borrow","borrow_mut","default","dict","fmt","from","into","lg","rows","table","to_string","try_from","try_into","type_id"],"q":[[0,"lg"]],"d":["","","Format a iterator of <code>bool</code>s.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Print the values with the line number.","Print many 1D arrays side-by-side with the line number.","Print the 2D array with the line number.","","","",""],"i":[0,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,1],"f":[0,[[1,[3,[2]],4]],[4,5],[[]],[[]],[[],1],0,[[1,6],7],[[]],[[]],0,0,0,[[],5],[[],8],[[],8],[[],9]],"c":[],"p":[[3,"Dict"],[15,"str"],[8,"AsRef"],[8,"IntoIterator"],[3,"String"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"lin_ineq":{"doc":"一次不等式を解きます。","t":"DSSISLLLLLKLLLLLLLLLLLLLLFFLLLL","n":["Interval","MAX","MIN","Signed","ZERO","borrow","borrow_mut","clone","clone_into","contains","div_euclid","empty","fmt","from","full","intersection","into","is_empty","mul","mul","mul","mul","normalize","product","product","solve","solve_squeeze","to_owned","try_from","try_into","type_id"],"q":[[0,"lin_ineq"]],"d":["閉区間を表す、<code>[T; 2]</code> …","","","符号付き整数です。","","","","","","…","","標準形の空区間を返します。具体的には、…","<code>Interval</code> 型のオブジェクトを human readable …","Returns the argument unchanged.","全区間を返します。具体的には、<code>[MIN, MAX]</code> …","区間の交差を計算します。","Calls <code>U::from(self)</code>.","空区間であるかどうかを判定します。","<code>intersection()</code> を呼び出します。","<code>intersection()</code> を呼び出します。","<code>intersection()</code> を呼び出します。","<code>intersection()</code> を呼び出します。","…","<code>intersection()</code> で畳み込みます。","<code>intersection()</code> で畳み込みます。","基本形 ax &lt;= b","挟み撃ち形 l &lt;= ax + b &lt;= r","","","",""],"i":[0,3,3,0,3,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2],"f":[0,0,0,0,0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[[2,[3]],3],4],[[]],[[],[[2,[3]]]],[[[2,[[0,[5,3]]]],6],7],[[]],[[],[[2,[3]]]],[[[2,[3]],[2,[3]]],[[2,[3]]]],[[]],[[[2,[3]]],4],[[[2,[3]],[2,[3]]]],[[[2,[3]],[2,[3]]]],[[[2,[3]],[2,[3]]]],[[[2,[3]],[2,[3]]]],[[[2,[3]]],[[2,[3]]]],[8,[[2,[3]]]],[8,[[2,[3]]]],[[3,3],[[2,[3]]]],[[3,3,[2,[3]]],[[2,[3]]]],[[]],[[],9],[[],9],[[],10]],"c":[],"p":[[8,"Clone"],[3,"Interval"],[8,"Signed"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[4,"Result"],[3,"TypeId"]]},\
"link_cut_tree":{"doc":"Link-Cut Tree","t":"GGDGIQLLLLLLLKLLLKLLLLLLLLLLL","n":["CommutLinkCutTree","LinkCutTree","LinkCutTreeBase","NonCommutLinkCutTree","Op","Value","borrow","borrow_mut","cut","evert","fold","from","from_values","identity","into","lca","link","mul","new","parent","set","try_from","try_into","type_id","undirected_cut","undirected_fold","undirected_has_edge","undirected_is_connected","undirected_link"],"q":[[0,"link_cut_tree"]],"d":["Link-Cut Tree with commutative operation","Link-Cut Tree without aggregation operation","Common implementation of Link-Cut Tree. Please do not use …","Link-Cut Tree with non-commutative operation","Aggregation operation for link-cut tree","","","","Cuts the edge between <code>x</code> and its parent.","Makes <code>x</code> the root of the tree.","Folds the path from the root to <code>x</code>.","Returns the argument unchanged.","Constructs a new Link-Cut Tree with <code>n</code> nodes, where the …","","Calls <code>U::from(self)</code>.","Returns the id of the lowest common ancestor of <code>x</code> and <code>y</code>.","Connects <code>p</code> and <code>c</code> with an edge, preserving the direction.","","Constructs a new Link-Cut Tree with <code>n</code> nodes.","Returns the id of the parent of <code>x</code>.","Sets the value of <code>x</code> to <code>f(x)</code>.","","","","Cuts the edge between <code>i</code> and <code>j</code>, not preserving the …","Folds the path from <code>i</code> to <code>j</code>, not preserving the direction.","Returns <code>true</code> if there is an edge between <code>x</code> and <code>y</code>.","Returns <code>true</code> if <code>x</code> and <code>y</code> are connected.","Connects <code>i</code> and <code>j</code> with an edge, not preserving the …"],"i":[0,0,0,0,0,9,1,1,1,1,1,1,1,9,1,1,1,9,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,[[]],[[]],[[[1,[0]],2],[[3,[2]]]],[[[1,[0]],2]],[[[1,[0]],2]],[[]],[4,[[1,[0]]]],[[]],[[]],[[[1,[0]],2,2],[[3,[2]]]],[[[1,[0]],2,2]],[[]],[2,[[1,[0]]]],[[[1,[0]],2],[[3,[2]]]],[[[1,[0]],2,5]],[[],6],[[],6],[[],7],[[[1,[0]],2,2],8],[[[1,[0]],2,2],3],[[[1,[0]],2,2],8],[[[1,[0]],2,2],8],[[[1,[0]],2,2],8]],"c":[],"p":[[3,"LinkCutTreeBase"],[15,"usize"],[4,"Option"],[8,"IntoIterator"],[8,"FnMut"],[4,"Result"],[3,"TypeId"],[15,"bool"],[8,"Op"]]},\
"low_link":{"doc":"Low-link を計算します。","t":"DLLLLLLLLLLLLLLLLLLLLL","n":["LowLink","add_edge","biconnected_components","borrow","borrow_mut","build","clone","clone_into","default","eq","fmt","from","hash","into","is_articulation_point","is_bridge_unchecked","new","to_owned","try_from","try_into","two_edge_components","type_id"],"q":[[0,"low_link"]],"d":["Low-link を計算する構造体です。","…","…","","","ビルドします。","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","頂点 <code>x</code> が関節点なら <code>true</code> を返します。","頂点 <code>x</code>, <code>y</code> …","未ビルドの空グラフを構築します。","","","","…",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2,2]],[1,[[3,[3]]]],[[]],[[]],[1],[1,1],[[]],[[],1],[[1,1],4],[[1,5],6],[[]],[[1,7]],[[]],[[1,2],4],[[1,2,2],4],[2,1],[[]],[[],8],[[],8],[1,[[3,[[3,[2]]]]]],[[],9]],"c":[],"p":[[3,"LowLink"],[15,"usize"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Result"],[3,"TypeId"]]},\
"make_graph":{"doc":"…","t":"FFFFFFFFFFFF","n":["array_make_directed","array_make_directed_weighted","array_make_undirected","array_make_undirected_weighted","make_directed_by","make_directed_weighted_by","make_undirected_by","make_undirected_weighted_by","tuple_make_directed","tuple_make_directed_weighted","tuple_make_undirected","tuple_make_undirected_weighted"],"q":[[0,"make_graph"]],"d":["<code>[u, v]</code> …","<code>([u, v], w)</code> …","<code>[u, v]</code> …","<code>([u, v], w)</code> …","…","…","…","…","<code>(u, v)</code> …","<code>(u, v, w)</code> …","<code>(u, v)</code> …","<code>(u, v, w)</code> …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0],"f":[[1,[[2,[[2,[1]]]]]],[1,[[2,[2]]]],[1,[[2,[[2,[1]]]]]],[1,[[2,[2]]]],[[1,3],[[2,[[2,[1]]]]]],[[1,3],[[2,[2]]]],[[1,3],[[2,[[2,[1]]]]]],[[1,3],[[2,[2]]]],[1,[[2,[[2,[1]]]]]],[1,[[2,[2]]]],[1,[[2,[[2,[1]]]]]],[1,[[2,[2]]]]],"c":[],"p":[[15,"usize"],[3,"Vec"],[8,"Fn"]]},\
"manacher":{"doc":"Manacher’s algorithm","t":"F","n":["manacher"],"q":[[0,"manacher"]],"d":["Returns the palindrome array $A$ of the given string $s$."],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[15,"usize"],[3,"Vec"]]},\
"max_flow":{"doc":"Dinic 法で最大流を求めます。","t":"IDLLLKLLLLLLLLK","n":["FlowTrait","MaxFlow","borrow","borrow_mut","from","infinity","insert","insert_from_slice","into","run","try_from","try_into","type_id","with_size_source_sink","zero"],"q":[[0,"max_flow"]],"d":["流量型になれるものです。","Dinic 法で最大流を求めます。","","","Returns the argument unchanged.","<code>std::$ty::MAX</code> を返します。","辺を挿入です。","<code>insert</code> をたくさん呼びます。","Calls <code>U::from(self)</code>.","実行します。","","","","構築です。","<code>0</code> を返します。"],"i":[0,0,2,2,2,1,2,2,2,2,2,2,2,2,1],"f":[0,0,[[]],[[]],[[]],[[]],[[[2,[1]],3,3,1]],[[[2,[1]]]],[[]],[[[2,[1]]],1],[[],4],[[],4],[[],5],[[3,3,3],[[2,[1]]]],[[]]],"c":[],"p":[[8,"FlowTrait"],[3,"MaxFlow"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"mincost_flow":{"doc":"Dijkstra …","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Edge","MinCostFlow","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","flow","fmt","fmt","from","from","get_edge","hash","hash","into","into","new","slope","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"mincost_flow"]],"d":["<code>MinCostFlow::get_edge</code> の戻り値型","Dijkstra …","辺を追加します。","","","","","","","","","","","","","解きます","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code> 番目に挿入した辺を取得します。","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","空グラフを構築します。","解きます","","","","","","","",""],"i":[0,0,1,4,1,4,1,4,1,4,1,4,1,4,1,1,4,1,4,1,1,4,1,4,1,1,1,4,1,4,1,4,1,4,1],"f":[0,0,[[1,2,2,3,3],2],[[]],[[]],[[]],[[]],[4,4],[1,1],[[]],[[]],[[],4],[[],1],[[4,4],5],[[1,1],5],[[1,2,2,3]],[[4,6],7],[[1,6],7],[[]],[[]],[[1,2],4],[[4,8]],[[1,8]],[[]],[[]],[2,1],[[1,2,2,3],9],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"c":[],"p":[[3,"MinCostFlow"],[15,"usize"],[15,"i64"],[3,"Edge"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"monotone_minima":{"doc":"Monotone minima のアルゴリズムと、それによる …","t":"FFFFFF","n":["concave_maxplus_convolution","convex_minplus_convolution","monotone_maxima","monotone_maxima_by","monotone_minima","monotone_minima_by"],"q":[[0,"monotone_minima"]],"d":["concave な列に対して max-plus convolution …","convex な列に対して min-plus convolution …","行列 <code>f(i, j)</code> を受け取って、monotone maxima …","行ごとのセル比較 <code>cmp(i, j, k)</code> …","行列 <code>f(i, j)</code> を受け取って、monotone minima …","行ごとのセル比較 <code>cmp(i, j, k)</code> …"],"i":[0,0,0,0,0,0],"f":[[[],[[4,[[0,[1,2,3]]]]]],[[],[[4,[[0,[1,2,3]]]]]],[[5,5,6],[[4,[5]]]],[[5,5,[0,[7,1]]],[[4,[5]]]],[[5,5,6],[[4,[5]]]],[[5,5,[0,[7,1]]],[[4,[5]]]]],"c":[],"p":[[8,"Copy"],[8,"Ord"],[8,"Add"],[3,"Vec"],[15,"usize"],[8,"Fn"],[8,"FnMut"]]},\
"naive_poly":{"doc":"Naive implementation of polynomial operations","t":"FFFFFF","n":["add","div","eval","mul","pow","sub"],"q":[[0,"naive_poly"]],"d":["Add two polynomials in $O(\\\\max(n, m))$ time.","Divide two polynomials in $O((n - m) m)$ time.","Evaluate a polynomial at a point in $O(n)$ time.","Multiply two polynomials in $O(nm)$ time.","Compute the $e$-th power of a polynomial in $O((en)^2 \\\\log …","Subtract two polynomials in $O(\\\\max(n, m))$ time."],"i":[0,0,0,0,0,0],"f":[[[],[[5,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,3,4]]]],4]]]],4]]]],4]]]]]],[[[5,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,3,6,7,8]]]],6,7,8]]]],6,7,8]]]],6,7,8]]]]],[[5,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,3,6,7,8]]]],6,7,8]]]],6,7,8]]]],6,7,8]]]]]],[[[0,[1,[3,[[0,[1,[3,[[0,[1,[3,[[0,[1,[3,[[0,[1,3,7,4,9]]]],7,4,9]]]],7,4,9]]]],7,4,9]]]],7,4,9]]],[[0,[1,[3,[[0,[1,[3,[[0,[1,[3,[[0,[1,[3,[[0,[1,3,7,4,9]]]],7,4,9]]]],7,4,9]]]],7,4,9]]]],7,4,9]]]],[[],[[5,[[0,[1,[3,[[0,[1,[3,[[0,[1,[3,[[0,[1,3,7,4]]]],7,4]]]],7,4]]]],7,4]]]]]],[[[5,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,3,10,4,7]]]],[10,[[0,[1,2,3,10,4,7]]]],4,7]]]],[10,[[0,[1,2,[3,[[0,[1,2,3,10,4,7]]]],[10,[[0,[1,2,3,10,4,7]]]],4,7]]]],4,7]]]],[10,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,3,10,4,7]]]],[10,[[0,[1,2,3,10,4,7]]]],4,7]]]],[10,[[0,[1,2,[3,[[0,[1,2,3,10,4,7]]]],[10,[[0,[1,2,3,10,4,7]]]],4,7]]]],4,7]]]],4,7]]]],11],[[5,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,3,10,4,7]]]],[10,[[0,[1,2,3,10,4,7]]]],4,7]]]],[10,[[0,[1,2,[3,[[0,[1,2,3,10,4,7]]]],[10,[[0,[1,2,3,10,4,7]]]],4,7]]]],4,7]]]],[10,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,3,10,4,7]]]],[10,[[0,[1,2,3,10,4,7]]]],4,7]]]],[10,[[0,[1,2,[3,[[0,[1,2,3,10,4,7]]]],[10,[[0,[1,2,3,10,4,7]]]],4,7]]]],4,7]]]],4,7]]]]]],[[],[[5,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,[3,[[0,[1,2,3,4,6,7]]]],4,6,7]]]],4,6,7]]]],4,6,7]]]]]]],"c":[],"p":[[8,"Copy"],[8,"PartialEq"],[8,"Sum"],[8,"AddAssign"],[3,"Vec"],[8,"SubAssign"],[8,"Mul"],[8,"Div"],[8,"MulAssign"],[8,"Product"],[15,"u64"]]},\
"newton":{"doc":"","t":"FF","n":["sqrt","triangular_root"],"q":[[0,"newton"]],"d":["",""],"i":[0,0],"f":[[1,1],[1,1]],"c":[],"p":[[15,"u64"]]},\
"next_permutation":{"doc":"A library to enumerate permutations, shuffles, and …","t":"FFFFFFFFFFFFFFF","n":["for_each_pairing","for_each_partition","for_each_partition_rev","for_each_permutation","for_each_shuffle","next_pairing","next_partition","next_permutation","next_shuffle","pairings","partitions","partitions_rev","permutations","prev_partition","shuffles"],"q":[[0,"next_permutation"]],"d":["Calls <code>f</code> for each pairing (ascending …","Calls <code>f</code> for each partition of <code>n</code> in lexicographic order.","Calls <code>f</code> for each partition of <code>n</code> in the reverse of the …","Calls <code>f</code> for each permutation of <code>a</code> in lexicographic order.","Calls <code>f</code> for each $(K, N - K)$-shuffle of <code>a</code> in …","Returns the next pairing (ascending …","Returns the next partition of <code>a</code> in lexicographic order.","Returns the next permutation of <code>a</code> in lexicographic order.","Returns the next $(K, N - K)$-shuffle of <code>a</code> in …","Returns all pairings (ascending $(2,2,\\\\dots,2)$-shuffles) …","Returns all partitions of <code>n</code> in lexicographic order.","Returns all partitions of <code>n</code> in the reverse of the …","Returns all permutations of <code>a</code> in lexicographic order.","Returns the previous partition of <code>a</code> in lexicographic order.","Returns all $(K, N - K)$-shuffles of <code>a</code> in lexicographic …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[1,2]],[[1,2]],[[1,2]],[2],[[1,2]],[[],3],[[[4,[1]]],3],[[],3],[1,3],[1,[[4,[[4,[1]]]]]],[1,[[4,[[4,[1]]]]]],[1,[[4,[[4,[1]]]]]],[[[4,[[0,[5,6]]]]],[[4,[[4,[[0,[5,6]]]]]]]],[[[4,[1]]],3],[[[4,[[0,[5,6]]]],1],[[4,[[4,[[0,[5,6]]]]]]]]],"c":[],"p":[[15,"usize"],[8,"FnMut"],[15,"bool"],[3,"Vec"],[8,"Ord"],[8,"Clone"]]},\
"not_nan":{"doc":"ordered_float::NotNan の劣化版です。","t":"IDLLLLLLLKLLLLLLLLLL","n":["Float","NotNaN","borrow","borrow_mut","clone","clone_into","cmp","default","eq","float_is_nan","fmt","from","from_float","into","into_inner","partial_cmp","to_owned","try_from","try_into","type_id"],"q":[[0,"not_nan"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[2]],[3,[2]]],4],[[],[[3,[[0,[5,2]]]]]],[[[3,[[0,[6,2]]]],[3,[[0,[6,2]]]]],7],[[],7],[[[3,[[0,[8,2]]]],9],10],[[]],[2,[[3,[2]]]],[[]],[[[3,[2]]],2],[[[3,[2]],[3,[2]]],[[11,[4]]]],[[]],[[],12],[[],12],[[],13]],"c":[],"p":[[8,"Clone"],[8,"Float"],[3,"NotNaN"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"numeric_search":{"doc":"Run classic binary or exponential search on integer or …","t":"ISSSSSSSIISSSFFFFFK","n":["Float","INFINITY","MAX","MIN","NEG_INFINITY","ONE","ONE","ONE","Signed","Unsigned","ZERO","ZERO","ZERO","binary_search_signed","binary_search_unsigned","exp_search_float","exp_search_signed","exp_search_unsigned","sqrt"],"q":[[0,"numeric_search"]],"d":["Floating pont number.","$\\\\infty$","","","$-\\\\infty$","$1$","$1$","","Signed integers.","Unsigned integers.","$0$","$0$","","Run a binary search search on signed numbers.","Run a binary search search on unsigned numbers.","Run an exponential search on floating point numbers.","Run an exponential search on unsigned numbers.","Run an exponential search on unsigned numbers.","$x \\\\mapsto \\\\sqrt x$"],"i":[0,4,1,1,4,4,3,1,0,0,4,3,1,0,0,0,0,0,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,2],1],[[3,3,2],3],[2,4],[2,[[5,[1]]]],[2,[[5,[3]]]],[[]]],"c":[],"p":[[8,"Signed"],[8,"FnMut"],[8,"Unsigned"],[8,"Float"],[4,"Option"]]},\
"open":{"doc":"","t":"F","n":["open"],"q":[[0,"open"]],"d":[""],"i":[0],"f":[[[1,[2,[1]]],[[3,[1]]]]],"c":[],"p":[[15,"usize"],[8,"RangeBounds"],[3,"Range"]]},\
"partially_persistent_union_find":{"doc":"…","t":"DLLLLLLLLLLLLLLLLL","n":["PartiallyPersistentUnionFind","borrow","borrow_mut","clone","clone_into","find","fmt","from","into","new","same","size","time","to_owned","try_from","try_into","type_id","union"],"q":[[0,"partially_persistent_union_find"]],"d":["…","","","","","時刻 time の代表の頂点番号を返します。","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","新しくデータ構造を構築します。","時刻 time に i と j …","時刻 time の i …","2 頂点が結合された時刻を返します。","","","","","…"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,2,2],2],[[1,3],4],[[]],[[]],[2,1],[[1,2,2,2],5],[[1,2,2],2],[[1,2,2],[[6,[2]]]],[[]],[[],7],[[],7],[[],8],[[1,2,2,2],5]],"c":[],"p":[[3,"PartiallyPersistentUnionFind"],[15,"usize"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"radix_heap":{"doc":"CAUTION: Failing in tests!","t":"DLLLLLLLLLLLLLLLL","n":["RadixHeap","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","new","pop","push","to_owned","try_from","try_into","type_id"],"q":[[0,"radix_heap"]],"d":["","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[],[[2,[3]]]],[[[2,[4]],[2,[4]]],5],[[[2,[3]],6],7],[[]],[[]],[[],2],[2,8],[[2,9]],[[]],[[],10],[[],10],[[],11]],"c":[0],"p":[[8,"Clone"],[3,"RadixHeap"],[8,"Debug"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"randtools":{"doc":"","t":"DDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DistinctTwo","LogUniform","NonEmptySubRange","SimpleDigraph","SimpleDigraphEdges","SimpleGraph","SimpleGraphEdges","SubRange","Tree","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","sample","sample","sample","sample","sample","sample","sample","sample","sample","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"randtools"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],3],[[4,2],3],[[5,2],3],[[6,2],3],[[7,2],3],[[8,2],3],[[9,2],3],[[10,2],3],[[11,2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,[0,[12,13]]],14],[[4,[0,[12,13]]]],[[5,[0,[12,13]]],[[15,[14]]]],[[6,[0,[12,13]]],[[15,[14]]]],[[7,[0,[12,13]]],[[16,[[16,[14]]]]]],[[8,[0,[12,13]]],[[16,[[16,[14]]]]]],[[9,[0,[12,13]]],[[16,[[16,[14]]]]]],[[10,[0,[12,13]]],16],[[11,[0,[12,13]]],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"LogUniform"],[3,"Formatter"],[6,"Result"],[3,"DistinctTwo"],[3,"SubRange"],[3,"NonEmptySubRange"],[3,"Tree"],[3,"SimpleGraph"],[3,"SimpleDigraph"],[3,"SimpleGraphEdges"],[3,"SimpleDigraphEdges"],[8,"Rng"],[8,"Sized"],[15,"usize"],[3,"Range"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"rational":{"doc":"","t":"DILLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLKLLLLLLLLLLLLLLK","n":["Rational","Signed","add","add","add","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","decompose","default","div","div","div","div","div_assign","eq","fmt","from","from_str","generic_abs","generic_signum","into","into_f64","mul","mul","mul","mul","mul_assign","neg","new","one","partial_cmp","product","product","sub","sub","sub","sub","sub_assign","sum","sum","to_owned","try_from","try_into","type_id","zero"],"q":[[0,"rational"]],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],"f":[0,0,[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],[[[2,[1]],[2,[1]]],4],[[[2,[1]]]],[[],[[2,[[0,[5,1]]]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]],6],[[[2,[1]],7],8],[[]],[9,[[10,[[2,[1]]]]]],[[]],[[]],[[]],[[[2,[1]]],11],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]]]],[[1,1],[[2,[1]]]],[[]],[[[2,[1]],[2,[1]]],[[12,[4]]]],[13,[[2,[1]]]],[13,[[2,[1]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[[[2,[1]],[2,[1]]]],[13,[[2,[1]]]],[13,[[2,[1]]]],[[]],[[],10],[[],10],[[],14],[[]]],"c":[],"p":[[8,"Signed"],[3,"Rational"],[8,"Clone"],[4,"Ordering"],[8,"Default"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Result"],[15,"f64"],[4,"Option"],[8,"Iterator"],[3,"TypeId"]]},\
"rb":{"doc":"Containers for storing data in a red-black tree.","t":"QDIDDIDQQLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLL","n":["Acc","Multimap","MultimapOp","MultimapSeg","Multiset","Op","Seg","Value","Value","append","binary_search","binary_search","binary_search","binary_search_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","display","fmt","fmt","fmt","fold","from","from","from","from","from_iter","identity","insert","insert","insert","insert","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","iter","iter","iter","iter","join","len","len","len","len","lower_bound","lower_bound","lower_bound","mul","new","new","new","new","nth","nth","nth","nth","nth_mut","nth_mut","partition_point","partition_point","partition_point","remove","remove","remove","remove","remove_nth","remove_nth","remove_nth","split_off","table","to_acc","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upper_bound","upper_bound","upper_bound"],"q":[[0,"rb"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,0,0,0,0,0,0,6,1,2,7,10,11,7,7,10,11,2,7,10,11,2,7,10,11,2,2,10,11,2,2,7,10,11,2,2,1,7,10,11,2,7,10,11,2,7,10,11,2,7,10,11,2,7,10,11,2,6,7,10,11,2,7,10,11,1,7,10,11,2,7,10,11,2,7,2,7,10,11,7,10,11,2,7,10,11,2,2,6,7,10,11,2,7,10,11,2,7,10,11,2,7,10,11],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[[7,[[0,[3,[5,[[0,[3,4]]]]]],3,6]],[0,[3,4]]],[[9,[8]]]],[[[10,[[0,[3,[5,[[0,[3,4]]]]]],3]],[0,[3,4]]],[[9,[8]]]],[[[11,[[0,[3,[5,[[0,[3,4]]]]]],3]],[0,[3,4]]],[[9,[8,8]]]],[[[7,[[0,[3,[5,[[0,[3,4]]]]]],3,6]],[0,[3,4]]],[[9,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[7,[3,6]]]],[[],[[10,[3]]]],[[],[[11,[3]]]],[[],[[2,[1]]]],[[[2,[1]]],[[0,[1]]]],[[[10,[[0,[3,12]],12]],13],14],[[[11,[[0,[3,12]]]],13],14],[[[2,[1]],13],14],[[[2,[1]],[15,[8]]]],[[]],[[]],[[]],[[]],[16,[[2,[1]]]],[[]],[[[7,[3,6]],3]],[[[10,[3]],3]],[[[11,[3]],3]],[[[2,[1]],8]],[[]],[[]],[[]],[[]],[[[7,[3,6]]]],[[[10,[3]]]],[[[11,[3]]]],[[[2,[1]]]],[[[7,[3,6]]],17],[[[10,[3]]],17],[[[11,[3]]],17],[[[2,[1]]],17],[[[7,[3,6]]],[[0,[3,6]]]],[[[10,[3]]],[[0,[3]]]],[[[11,[3]]],[[0,[3]]]],[[[2,[1]]],[[0,[1]]]],[[18,18]],[[[7,[3,6]]],8],[[[10,[3]]],8],[[[11,[3]]],8],[[[2,[1]]],8],[[[7,[3,6]],3],8],[[[10,[3]],3],8],[[[11,[3]],3],8],[[]],[[],[[7,[3,6]]]],[[],[[10,[3]]]],[[],[[11,[3]]]],[[],[[2,[1]]]],[[[7,[3,6]],8]],[[[10,[3]],8]],[[[11,[3]],8],3],[[[2,[1]],8]],[[[7,[3,6]],8]],[[[2,[1]],8],[[0,[1]]]],[[[7,[3,6]],19],8],[[[10,[3]],19],8],[[[11,[3]],19],8],[[[7,[[0,[3,[5,[[0,[3,4]]]]]],3,6]],[0,[3,4]]],18],[[[10,[[0,[3,[5,[[0,[3,4]]]]]],3]],[0,[3,4]]],18],[[[11,[[0,[3,[5,[[0,[3,4]]]]]],3]],[0,[3,4]]],[[18,[[0,[3,[5,[[0,[3,4]]]]]],3]]]],[[[2,[1]],8]],[[[7,[3,6]],8]],[[[10,[3]],8]],[[[11,[3]],8],3],[[[2,[1]],8],[[2,[1]]]],[[[2,[1]]],[[0,[1]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],20],[[],20],[[],20],[[],20],[[[7,[3,6]],3],8],[[[10,[3]],3],8],[[[11,[3]],3],8]],"c":[],"p":[[8,"Op"],[3,"Seg"],[8,"Ord"],[8,"Sized"],[8,"Borrow"],[8,"MultimapOp"],[3,"MultimapSeg"],[15,"usize"],[4,"Result"],[3,"Multimap"],[3,"Multiset"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"RangeBounds"],[8,"IntoIterator"],[15,"bool"],[4,"Option"],[8,"FnMut"],[3,"TypeId"]]},\
"rbtree":{"doc":"赤黒木","t":"DDIDQQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLL","n":["Iter","Nop","Op","RbTree","Summary","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","delete","eq","fmt","fold","from","from","from","from_iter","get","hash","insert","into","into","into","into_iter","into_iter","is_empty","iter","len","merge","merge3","new","next","op","op","partition_point","push_back","push_front","singleton","split","split3","summarize","summarize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"rbtree"]],"d":["<code>iter</code> の返す型","…","…","赤黒木です。","中間ノードに持たせる値","葉に持たせる値","","","","","","","","","","<code>i</code> 番目の Nil …","","","<code>range</code> の範囲で畳み込みます。","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","…","<code>i</code> 番目の要素をコピーして返します。","","<code>i</code> 番目に新しい Nil ノードを挿入します。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","空ならば <code>true</code>、さもなくば <code>false</code> …","…","長さ、すなわち Nil …","2 つの赤黒木をマージします。","3 つの赤黒木をマージします。","空の赤黒木を生成します。","","演算","","中間ノードの情報で二分探索します。","新しいノードを末尾に挿入します。","新しいノードを先頭に挿入します。","Nil …","<code>i</code> 番目で分割します。","<code>l, r</code> 番目で 3 つに分割します。","葉の値から中間ノードの値への変換","","","","","","","","","","",""],"i":[0,0,0,0,2,2,3,20,16,3,20,16,3,3,3,3,3,3,3,3,20,16,3,3,3,3,3,20,16,3,16,3,3,3,3,3,3,16,2,20,3,3,3,3,3,3,2,20,3,3,20,16,3,20,16,3,20,16],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]],[[3,[1,2]]]],[[]],[[],[[3,[2]]]],[[[3,[2]],4]],[[[3,[5,2]],[3,[5,2]]],6],[[[3,[7,2]],8],9],[[[3,[2]],[10,[4]]],11],[[]],[[]],[[]],[12,[[3,[2]]]],[[[3,[13,2]],4],13],[[[3,[14,2]],15]],[[[3,[2]],4]],[[]],[[]],[[]],[[[3,[2]]]],[[]],[[[3,[2]]],6],[[[3,[2]]],[[16,[2]]]],[[[3,[2]]],4],[[[3,[2]],[3,[2]]],[[3,[2]]]],[[[3,[2]],[3,[2]],[3,[2]]],[[3,[2]]]],[[],[[3,[2]]]],[[[16,[2]]],11],[[]],[[]],[[[3,[2]],17],4],[[[3,[2]]]],[[[3,[2]]]],[[],[[3,[2]]]],[[[3,[2]],4]],[[[3,[2]],4,4]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19]],"c":[],"p":[[8,"Clone"],[8,"Op"],[3,"RbTree"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"RangeBounds"],[4,"Option"],[8,"IntoIterator"],[8,"Copy"],[8,"Hash"],[8,"Hasher"],[3,"Iter"],[8,"Fn"],[4,"Result"],[3,"TypeId"],[3,"Nop"]]},\
"reverse":{"doc":"std::cmp::Reverse です。","t":"DLLLLLLLLLLLLLLLLLLLL","n":["Reverse","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","ge","gt","hash","into","le","lt","partial_cmp","to_owned","try_from","try_into","type_id"],"q":[[0,"reverse"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[[2,[3]],[2,[3]]],4],[[],[[2,[5]]]],[[[2,[6]],[2,[6]]],7],[[[2,[8]],9],10],[[]],[[[2,[11]],[2,[11]]],7],[[[2,[11]],[2,[11]]],7],[[[2,[12]],13]],[[]],[[[2,[11]],[2,[11]]],7],[[[2,[11]],[2,[11]]],7],[[[2,[11]],[2,[11]]],[[14,[4]]]],[[]],[[],15],[[],15],[[],16]],"c":[],"p":[[8,"Clone"],[3,"Reverse"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"PartialOrd"],[8,"Hash"],[8,"Hasher"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"scc":{"doc":"このライブラリを使える問題","t":"DLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Scc","add_edge","borrow","borrow_mut","build","clone","clone_into","cmp_count","cmp_of","cmp_ofs","default","eq","fmt","from","g","hash","into","is_empty","len","new","ord","quotient_graph","quotient_set","rg","to_owned","try_from","try_into","type_id"],"q":[[0,"scc"]],"d":["本体です。","【Require: 未ビルド】 辺 (from, to) …","","","【Require: 未ビルド】 ビルドします。","","","【Require: ビルド済み】 …","【Require: ビルド済み】 頂点 <code>x</code> …","【Require: ビルド済み】 …","","","","Returns the argument unchanged.","正向きのグラフの隣接リストを返します。","","Calls <code>U::from(self)</code>.","管理しているグラフが空グラフならば、<code>true</code> …","管理しているグラフの頂点数を返します。","頂点数 <code>n</code> …","【Require: ビルド済み】 …","【Require: ビルド済み】 …","【Require: ビルド済み】 …","逆向きのグラフの隣接リストを返します。","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2,2]],[[]],[[]],[1],[1,1],[[]],[1,2],[[1,2],2],[1],[[],1],[[1,1],3],[[1,4],5],[[]],[1],[[1,6]],[[]],[1,3],[1,2],[2,1],[1],[1,[[7,[[7,[2]]]]]],[1,[[7,[[7,[2]]]]]],[1],[[]],[[],8],[[],8],[[],9]],"c":[],"p":[[3,"Scc"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"segbeats":{"doc":"","t":"IDLLLLLLLLLLKKKLLLLLLLLK","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","eq","fmt","from","into","max_value","min_value","mul_u32","new","query_max","query_min","query_sum","to_owned","try_from","try_into","type_id","zero"],"q":[[0,"segbeats"]],"d":["","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,1],"f":[0,0,[[]],[[]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[3]]],[[2,[3]]]],[[]],[[[2,[6]],[2,[6]]],7],[[[2,[8]],9],10],[[]],[[]],[[]],[[]],[11],[[],[[2,[1]]]],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[]],[[],12],[[],12],[[],13],[[]]],"c":[],"p":[[8,"Elm"],[3,"Segbeats"],[8,"Clone"],[15,"usize"],[8,"RangeBounds"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"segbeats_task3":{"doc":"","t":"IDLLLLLLLLLLLKKKLLLLLLLLLK","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","count_changes","eq","fmt","from","into","max_value","min_value","mul_u32","new","query_max","query_min","query_sum","range_add","to_owned","try_from","try_into","type_id","zero"],"q":[[0,"segbeats_task3"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,1],"f":[0,0,[[]],[[]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[3]]],[[2,[3]]]],[[]],[[[2,[1]],[5,[4]]],6],[[[2,[7]],[2,[7]]],8],[[[2,[1]],9],10],[[]],[[]],[[]],[[]],[11],[[],[[2,[1]]]],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[]],[[],12],[[],12],[[],13],[[]]],"c":[],"p":[[8,"Elm"],[3,"Segbeats"],[8,"Clone"],[15,"usize"],[8,"RangeBounds"],[15,"u64"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"segtree":{"doc":"Segment tree and its variants.","t":"DDDIDDDQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLL","n":["Dense2dEntry","Dense2dSegtree","Entry","Op","Segtree","Sparse2dSegtree","SparseSegtree","Value","apply","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","collect_map","collect_map","collect_vec","deref","deref","deref_mut","deref_mut","drop","drop","entry","entry","entry","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_len","identity","index","index","index","index","index","into","into","into","into","into","into","iter","iter","iter","iter","keys","new","new","new","new","op","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"segtree"]],"d":["The result of <code>Dense2dSegtree::entry</code>.","A dense 2D segment tree.","The result of <code>Segtree::entry</code>.","A trait for segment tree operations.","A segment tree.","A segment tree of segment trees (2D segment tree). The …","A sparse (compressed) segment tree.","The value type.","Apply a function to $x_{k, l}$.","Returns a slice of $x_0, x_1, \\\\ldots, x_{n-1}$.","","","","","","","","","","","","","Collects the key-value pairs into a <code>BTreeMap</code>.","Collects the key-value pairs into a <code>BTreeMap</code>.","Collect to a $2$-dimensional vector.","","","","","","","Returns the entry of $x_i$.","Returns the entry of $x_k$. If $k$ is not found, it panics.","Returns the entry of $x_{i, j}$.","","","","","","Returns $x_l \\\\cdot x_{l+1} \\\\cdot \\\\ldots \\\\cdot x_{r-1}$.","Folds $\\\\left \\\\lbrace x_k \\\\mid k \\\\in \\\\text{{range}} \\\\right …","Folds $\\\\left \\\\lbrace x_{k, l} \\\\mid (k, l) \\\\in …","Fold $\\\\left \\\\lbrace x_{i, j} \\\\mid i \\\\in \\\\text{{range}}_i, …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Constructs a new segment tree with the specified length.","Returns the identity value $e$.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator of $x_0, x_1, \\\\ldots, x_{n-1}$.","Returns an iterator of $(k, x_k)$.","Returns the iterator of $(k, l, x_{k, l})$.","Returns an iterator that returns the rows $(x_{i, 0}, x_…","Returns the keys.","Constructs with the specified values.","Constructs with the specified key-value pairs.","Constructs with the specified key-value pairs.","Constructs with the specified values.","Multiplies two values: $x \\\\cdot y$.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,6,6,11,7,4,9,12,6,11,7,4,9,12,7,4,9,11,12,11,12,11,12,6,7,9,6,11,7,4,9,6,7,4,9,6,11,7,4,9,12,6,7,4,6,3,6,7,4,4,9,6,11,7,4,9,12,6,7,4,9,7,6,7,4,9,3,6,11,7,4,9,12,6,11,7,4,9,12,6,11,7,4,9,12],"f":[0,0,0,0,0,0,0,0,[[[4,[[0,[1,2]],[0,[1,2]],3]],[0,[1,2]],[0,[1,2]],5]],[[[6,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[2,1,3]]],[[8,[2,1]]]],[[[4,[2,[0,[1,2]],2,[0,[1,2]],3]]],8],[[[9,[3]]],[[10,[10]]]],[[[11,[3]]]],[[[12,[3]]]],[[[11,[3]]]],[[[12,[3]]]],[[[11,[3]]]],[[[12,[3]]]],[[[6,[3]],13],[[11,[3]]]],[[[7,[1,3]],1],[[11,[3]]]],[[[9,[3]],13,13],[[12,[3]]]],[[[6,[3]],14],15],[[[11,[3]],14],15],[[[7,[16,3]],14],15],[[[4,[16,16,3]],14],15],[[[9,[3]],14],15],[[[6,[3]],[17,[13]]]],[[[7,[1,3]],[17,[1]]]],[[[4,[[0,[1,2]],[0,[1,2]],3]],[17,[[0,[1,2]]]],[0,[[17,[[0,[1,2]]]],2]]]],[[[9,[3]],[17,[13]],[17,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[18,[[6,[3]]]],[18,[[7,[[0,[2,1]],3]]]],[18,[[4,[[0,[1,2]],[0,[1,2]],3]]]],[13,[[6,[3]]]],[[]],[[[6,[3]],13]],[[[7,[1,3]],1]],[[[4,[1,1,3]],1]],[[[4,[1,1,3]]]],[[[9,[3]],13]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[3]]],19],[[[7,[1,3]]],19],[[[4,[[0,[1,2]],[0,[1,2]],3]]],19],[[[9,[3]]],19],[[[7,[1,3]]]],[[],[[6,[3]]]],[[],[[7,[2,1,3]]]],[[],[[4,[[0,[1,2]],[0,[1,2]],3]]]],[[],[[9,[3]]]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21]],"c":[],"p":[[8,"Ord"],[8,"Clone"],[8,"Op"],[3,"Sparse2dSegtree"],[8,"FnMut"],[3,"Segtree"],[3,"SparseSegtree"],[3,"BTreeMap"],[3,"Dense2dSegtree"],[3,"Vec"],[3,"Entry"],[3,"Dense2dEntry"],[15,"usize"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"RangeBounds"],[8,"IntoIterator"],[8,"Iterator"],[4,"Result"],[3,"TypeId"]]},\
"skew_heap":{"doc":"Meld のできるヒープ","t":"DLLLLLLLLLLLLLLLFLLLLLLLLLL","n":["SkewHeap","borrow","borrow_mut","clear","clone","clone_into","default","eq","extend","extend","fmt","from","from_iter","hash","into","into_sorted_vec","meld","meld","new","peek","pop","push","singleton","to_owned","try_from","try_into","type_id"],"q":[[0,"skew_heap"]],"d":["Meld のできるヒープ","","","中身を殻にします。","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","ソート済みの <code>Vec</code> に変換します。","2 つの <code>SkewHeap</code> …","2 つの <code>SkewHeap</code> …","新しく構築します。","…","…","要素を一つ、追加します。","要素一つからなる <code>SkewHeap</code> を構築します。","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]]],[[[2,[3]]],[[2,[3]]]],[[]],[[],[[2,[1]]]],[[[2,[4]],[2,[4]]],5],[[[2,[[0,[6,1]]]],7]],[[[2,[1]],7]],[[[2,[[0,[8,1]]]],9],10],[[]],[7,[[2,[1]]]],[[[2,[11]],12]],[[]],[[[2,[1]]],[[13,[1]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]]],[[14,[1]]]],[[[2,[1]]],[[14,[1]]]],[[[2,[1]],1]],[1,[[2,[1]]]],[[]],[[],15],[[],15],[[],16]],"c":[],"p":[[8,"Ord"],[3,"SkewHeap"],[8,"Clone"],[8,"PartialEq"],[15,"bool"],[8,"Copy"],[8,"IntoIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[3,"Vec"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"slicemore":{"doc":"<code>{lower,upper}_bound</code> and <code>partition_point</code>","t":"IFKFKFKFKFKFKFK","n":["SliceMore","lower_bound","lower_bound","lower_bound_by","lower_bound_by","lower_bound_by_key","lower_bound_by_key","partition_point","partition_point","upper_bound","upper_bound","upper_bound_by","upper_bound_by","upper_bound_by_key","upper_bound_by_key"],"q":[[0,"slicemore"]],"d":["Method versions of functions.","Find $i$ s.t. $a _ { i - 1 } \\\\lt b \\\\le a _ i$.","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\in \\\\left \\\\lbrace …","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\lt b \\\\le f ( a _ i )$.","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\land \\\\neg f ( a _ i )$.","","Find $i$ s.t. $a _ { i - 1 } \\\\le b \\\\lt a _ i$.","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\in \\\\left \\\\lbrace …","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\le b \\\\lt f ( a _ i )$.",""],"i":[0,0,4,0,4,0,4,0,4,0,4,0,4,0,4],"f":[0,[1,2],[1,2],[3,2],[3,2],[[1,3],2],[[1,3],2],[3,2],[3,2],[1,2],[1,2],[3,2],[3,2],[[1,3],2],[[1,3],2]],"c":[],"p":[[8,"Ord"],[15,"usize"],[8,"FnMut"],[8,"SliceMore"]]},\
"snippetter":{"doc":"","t":"HDHLLLLMLFLLLFFLMLLLL","n":["CRATE_METADATAS","CrateMetadata","PROJECT_ROOT","borrow","borrow_mut","clone","clone_into","dependencies","eq","find_project_root_path","fmt","from","into","main","parse_local_dependencies_from_cargo_toml","serialize","tags","to_owned","try_from","try_into","type_id"],"q":[[0,"snippetter"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1],"f":[0,0,0,[[]],[[]],[1,1],[[]],0,[[1,1],2],[[],3],[[1,4],5],[[]],[[]],[[]],[6,[[8,[7]]]],[[1,9],10],0,[[]],[[],10],[[],10],[[],11]],"c":[],"p":[[3,"CrateMetadata"],[15,"bool"],[3,"PathBuf"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"],[3,"Vec"],[8,"Serializer"],[4,"Result"],[3,"TypeId"]]},\
"sort_tree":{"doc":"根付き木をトポロジカルソートします。","t":"FFFF","n":["remove_parent","sort_tree","sort_tree_by","sort_tree_remove_parent"],"q":[[0,"sort_tree"]],"d":["親を消します","根付き木をトポロジカルソートします。","根付き木をトポロジカルソートします。","…"],"i":[0,0,0,0],"f":[[[]],[1],[[1,2]],[1]],"c":[],"p":[[15,"usize"],[8,"Fn"]]},\
"space":{"doc":"","t":"FF","n":["implode","implode_space"],"q":[[0,"space"]],"d":["<code>separator</code> 区切りの文字列にします。","スペース区切りの文字列にします。"],"i":[0,0],"f":[[[1,2],3],[1,3]],"c":[],"p":[[8,"IntoIterator"],[15,"str"],[3,"String"]]},\
"sparse_table":{"doc":"Sparse Table","t":"IDDQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLL","n":["Op","SparseTable","SparseTable2d","Value","as_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone_from_slice","clone_from_slice","collect_vec","collect_vec","fmt","fmt","fold","fold","from","from","from","from","from","from","from_iter","get","index","inner","inner","into","into","iter","iter","mul","new","new","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"sparse_table"]],"d":["A trait for the operation used in sparse tables.","A sparse table for 1-dimensional range queries.","A sparse table for 2-dimensional range queries.","The type of the values.","Returns a slice of the values.","Returns a slice of the values.","","","","","Constructs a sparse table from a slice of values.","Constructs a sparse table from a slice of values.","Collects the values into a vector.","Collects the values into a vector of vectors.","","","Returns $x_l \\\\cdot x_{l+1} \\\\cdot \\\\ldots \\\\cdot x_{r-1}$, or …","Returns $(x_{i_0, j_0} \\\\cdot \\\\dots \\\\cdot x_{i_1-1, j_0}) …","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the value at the given index.","","Returns the inner table.","Returns the inner table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator over the values.","Returns that yields the row of the table.","Multiplies two values: $x \\\\cdot y$.","Constructs a sparse table from a vector of values.","Constructs a sparse table from a vector of values.","","","","","",""],"i":[0,0,0,1,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,3,3,3,2,2,2,2,3,2,3,2,3,1,2,3,2,3,2,3,2,3],"f":[0,0,0,0,[[[2,[1]]]],[[[3,[1]]]],[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[[2,[1]]],4],[[[3,[1]]],[[4,[4]]]],[[[2,[1]],5],6],[[[3,[1]],5],6],[[[2,[1]],[8,[7]]],9],[[[3,[1]],[8,[7]],[8,[7]]],9],[[]],[4,[[2,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[[4,[4]]],[[3,[1]]]],[[]],[10,[[2,[1]]]],[[[2,[1]],7]],[[[2,[1]],7]],[[[2,[1]]],[[4,[4]]]],[[[3,[1]]],[[4,[[4,[[4,[4]]]]]]]],[[]],[[]],[[[2,[1]]],11],[[[3,[1]]],11],[[]],[4,[[2,[1]]]],[[[4,[4]]],[[3,[1]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"c":[],"p":[[8,"Op"],[3,"SparseTable"],[3,"SparseTable2d"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[15,"usize"],[8,"RangeBounds"],[4,"Option"],[8,"IntoIterator"],[8,"Iterator"],[4,"Result"],[3,"TypeId"]]},\
"splay_tree":{"doc":"スプレー木です。","t":"QQDDQIDDIDIQQLKLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLKKLLLLLLLLLLLLLLLLLLLLL","n":["Acc","Acc","Entry","Iter","Lazy","LazyOps","NoLazy","Nop","Ops","SplayTree","Value","Value","Value","act","act_acc","act_acc","act_acc","act_value","act_value","act_value","append","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","compose","compose","compose","compose_to_option","default","delete","deref","deref_mut","drop","dump","entry","eq","fmt","fold","from","from","from","from","from","from_iter","get","hash","index","insert","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","new","next","next_back","op","op","op","op","partial_cmp","proj","proj","proj","proj","range","reverse","split_off","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"splay_tree"]],"d":["集約値型","集約値型","<code>SplayTree::entry</code> の戻り値型です。","<code>SplayTree::iter</code>, <code>SplayTree::range</code> の戻り値型です。","作用値型","集約と作用のトレイト","<code>Ops</code> を実装する型をラップして <code>LazyOps</code> …","集約も作用もなしの場合に使うトレイト","作用なしの場合に使うトレイト","スプレー木","<code>Sized</code>, <code>Debug</code>, <code>Clone</code> をまとめたトレイト","頂点重み型","頂点重み型","指定した範囲の要素すべてに作用します。","集約値への作用","","","頂点重みへの作用","","","…","","","","","","","","","","","","","","作用の合成","","","Option へ作用の合成","","指定した場所の要素を削除します。","","","","内部情報をダンプします。","…","","","指定した範囲の要素を畳み込みます。","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","…","","","指定した場所に挿入します。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","空ならば <code>true</code> を返します。","要素を順番に返すイテレータを返します。","要素数を返します。","空のスプレー木を構築します。","","","集約演算","集約演算","","","","集約化","集約化","","","…","指定した範囲の要素を逆順にします。","指定した場所以降を切り離して返します。","","","","","","","","","","","","","","","",""],"i":[16,1,0,0,1,0,0,0,0,0,0,16,1,2,1,17,18,1,17,18,2,17,18,2,13,7,17,18,2,13,7,2,2,2,1,17,18,1,2,2,7,7,2,2,2,2,2,2,17,18,2,13,7,2,2,2,2,2,17,18,2,13,7,2,13,2,2,2,2,13,13,16,1,17,18,2,16,1,17,18,2,2,2,2,17,18,2,13,7,17,18,2,13,7,17,18,2,13,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[4,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[[2,[1]],[2,[1]]],5],[[]],[[]],[[]],[6],[[],[[2,[1]]]],[[[2,[1]],3]],[[[7,[1]]]],[[[7,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]],3],[[6,[[7,[1]]]]]],[[[2,[1]],[2,[1]]],8],[[[2,[1]],9],10],[[[2,[1]],[4,[3]]],6],[[]],[[]],[[]],[[]],[[]],[11,[[2,[1]]]],[[[2,[1]],3],6],[[[2,[1]],12]],[[[2,[1]],3]],[[[2,[1]],3]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]]],[[]],[[[2,[1]]],8],[[[2,[1]]],[[13,[1]]]],[[[2,[1]]],3],[[],[[2,[1]]]],[[[13,[1]]],6],[[[13,[1]]],6],[[]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[[2,[1]],[4,[3]]],[[13,[1]]]],[[[2,[1]],[4,[3]]]],[[[2,[1]],3],[[2,[1]]]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15]],"c":[],"p":[[8,"LazyOps"],[3,"SplayTree"],[15,"usize"],[8,"RangeBounds"],[4,"Ordering"],[4,"Option"],[3,"Entry"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[8,"Hasher"],[3,"Iter"],[4,"Result"],[3,"TypeId"],[8,"Ops"],[3,"Nop"],[3,"NoLazy"]]},\
"suffix_array":{"doc":"Suffix Array を計算します。","t":"FF","n":["lcp_array","suffix_array"],"q":[[0,"suffix_array"]],"d":["LCP 配列を計算します。","Surrix Array を計算します。"],"i":[0,0],"f":[[[],[[2,[1]]]],[[],[[2,[1]]]]],"c":[],"p":[[15,"usize"],[3,"Vec"]]},\
"suffix_sum":{"doc":"Suffix Sum","t":"IDDQLLLLLLKLLLLLLLLLLLKLLLLKLLLLLLLL","n":["Op","SuffixSum","SuffixSum2d","Value","borrow","borrow","borrow_mut","borrow_mut","collect_vec","collect_vec","div","fmt","fmt","fold","fold","from","from","from","from","from_iter","get","get","identity","inner","inner","into","into","mul","new","new","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"suffix_sum"]],"d":["A trait for segment tree operations.","A structure that stores the suffix sum of a sequence.","A structure that stores the suffix sum of a 2D sequence.","The value type.","","","","","Collects the values to a vector.","Collects the values to a vector.","Divides two values: $x \\\\cdot y^{-1}$.","","","Returns $x_l \\\\cdot x_{l+1} \\\\cdot \\\\ldots \\\\cdot x_{r-1}$.","Returns $\\\\left ( x_{i_0, j_0} \\\\cdot \\\\dots \\\\cdot x_{i_0, …","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns $x_i$.","Returns $x_{i,j}$.","Returns the identity value $e$.","Returns a reference to the inner values.","Returns a reference to the inner values.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Multiplies two values: $x \\\\cdot y$.","Constructs a new instance.","Constructs a new instance.","","","","","",""],"i":[0,0,0,1,2,4,2,4,2,4,1,2,4,2,4,2,2,4,4,2,2,4,1,2,4,2,4,1,2,4,2,4,2,4,2,4],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[[4,[1]]],[[3,[3]]]],[[]],[[[2,[1]],5],6],[[[4,[1]],5],6],[[[2,[1]],[8,[7]]]],[[[4,[1]],[8,[7]],[8,[7]]]],[[]],[3,[[2,[1]]]],[[[3,[3]]],[[4,[1]]]],[[]],[9,[[2,[1]]]],[[[2,[1]],7]],[[[4,[1]],7,7]],[[]],[[[2,[1]]]],[[[4,[1]]],[[3,[3]]]],[[]],[[]],[[]],[[],[[2,[1]]]],[[],[[4,[1]]]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"c":[],"p":[[8,"Op"],[3,"SuffixSum"],[3,"Vec"],[3,"SuffixSum2d"],[3,"Formatter"],[6,"Result"],[15,"usize"],[8,"RangeBounds"],[8,"IntoIterator"],[4,"Result"],[3,"TypeId"]]},\
"swag":{"doc":"Sliding Window Aggregation (SWAG)","t":"DIQLLLLLLLLLLLLLLLLLLLLLLKLLLLLLL","n":["DequeueSwag","Op","Value","as_two_slices","borrow","borrow_mut","clone_from_slice","collect_vec","copy_from_slice","default","extend","fmt","fold","from","from","from_iter","get","index","into","into_iter","into_iter","is_empty","iter","len","new","op","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id"],"q":[[0,"swag"]],"d":["DequeueSwag","Operations","Value type","Returns two slices, joining that is exactly the all …","","","Constructs a new <code>DequeueSwag</code> from a slice.","Collects the <code>DequeueSwag</code> into a <code>Vec</code>.","Constructs a new <code>DequeueSwag</code> from a slice.","","","","Fold the <code>DequeueSwag</code>. Returns <code>None</code> if the <code>DequeueSwag</code> is …","Returns the argument unchanged.","","","Returns the element at the index.","","Calls <code>U::from(self)</code>.","","","Returns whether the <code>DequeueSwag</code> is empty.","Returns an iterator over the <code>DequeueSwag</code>.","Returns the length of the <code>DequeueSwag</code>.","Constructs a new <code>DequeueSwag</code>.","Associative operation","Pop an element from the back. Returns <code>None</code> if the …","Pop an element from the front. Returns <code>None</code> if the …","Append an element to the back.","Append an element to the front.","","",""],"i":[0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2],"f":[0,0,0,[[[2,[1]]]],[[]],[[]],[[],[[2,[1]]]],[[[2,[1]]],3],[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],4]],[[[2,[1]],5],6],[[[2,[1]]],7],[[]],[3,[[2,[1]]]],[4,[[2,[1]]]],[[[2,[1]],8],7],[[[2,[1]],8]],[[]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]],9],[[[2,[1]]],10],[[[2,[1]]],8],[[],[[2,[1]]]],[[]],[[[2,[1]]],7],[[[2,[1]]],7],[[[2,[1]]]],[[[2,[1]]]],[[],11],[[],11],[[],12]],"c":[],"p":[[8,"Op"],[3,"DequeueSwag"],[3,"Vec"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"usize"],[15,"bool"],[8,"Iterator"],[4,"Result"],[3,"TypeId"]]},\
"tree_dp":{"doc":"Re-rooted tree DP.","t":"QIQQKKKKF","n":["Acc","Op","Value","VertexWeight","f","g","identity","mul","rerooted_tree_dp"],"q":[[0,"tree_dp"]],"d":["$A$: The type of the monoid of converted values.","An operation for re-rooted tree DP.","$X$: The type of the DP value.","$W$: The type of the vertex weight.","$f: X \\\\to A$: Conversion.","$g ^ w: A \\\\to X \\\\ (w \\\\in W)$: Conversion.","$1 \\\\in A$: The identity element of the monoid of converted …","$a \\\\cdot b$: The operation of the monoid of converted …","Given a tree $G = (V, E; \\\\ r)$ and vertex weights $W$, …"],"i":[2,0,2,2,2,2,2,2,0],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[1]],"c":[],"p":[[15,"usize"],[8,"Op"]]},\
"trial":{"doc":"Execute the trial-division algorithm.","t":"DDDILLLLLLLFFLLLKLLLLLLLLLKFFLLLLLLLLLK","n":["Divisors","PrimeFactors","PrimeFactorsRle","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","divides","divisors","divisors_unordered","from","from","from","increment","into","into","into","into_iter","into_iter","into_iter","next","next","next","one","prime_factors","prime_factors_rle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":[[0,"trial"]],"d":["See the document of a function <code>divisors_unordered</code>","See the document of a function <code>prime_factors</code>","See the document of a function <code>prime_factors_rle</code>","Abstraction of unsigned integers.","","","","","","","Returns <code>true</code> if and only if <code>self</code> divides <code>n</code>.","Returns a <code>Vec</code> of the divisors. The divisors is guaranteed …","Takes an unsigned integer and returns an iterator to yield …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Increment <code>self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns <code>1</code>.","Takes an unsigned integer and returns an iterator to yield …","Takes an unsigned integer and returns an iterator to yield …","","","","","","","","","","Returns <code>0</code>."],"i":[0,0,0,0,4,6,7,4,6,7,2,0,0,4,6,7,2,4,6,7,4,6,7,4,6,7,2,0,0,4,6,7,4,6,7,4,6,7,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[2,[[3,[2]]]],[2,[[4,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[2]]],5],[[[6,[2]]],5],[[[7,[2]]],5],[[]],[2,[[7,[2]]]],[2,[[6,[2]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[]]],"c":[],"p":[[15,"bool"],[8,"Value"],[3,"Vec"],[3,"Divisors"],[4,"Option"],[3,"PrimeFactorsRle"],[3,"PrimeFactors"],[4,"Result"],[3,"TypeId"]]},\
"trie":{"doc":"A set and map data structure on trie.","t":"RDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DEGREE","TrieMap","TrieSet","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","default","default","eq","eq","fmt","fmt","for_each","for_each_kv","for_each_prefix","for_each_prefix","from","from","get","get_mut","get_or_insert","get_or_insert_with","insert","insert","into","into","new","new","remove","remove","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"trie"]],"d":["Tries here have the fixed branching number 26.","A map base on a trie.","A set base on a trie.","","","","","","","","","Returns <code>true</code> if the set contains a value.","","","","","","","Visits all the values of a values in the trie, in …","Visits all the pairs of a key of a values in the trie, in …","Visits all the “existing” nodes corresponding to the …","Visits all the “existing” nodes corresponding to the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns a mutable reference to the value corresponding to …","Inserts a <code>value</code> at <code>key</code> if it is <code>None</code>, then returns a …","Inserts a value computed from <code>f</code> at <code>key</code> if it is <code>None</code>, then …","Inserts a key-value pair into the map.","Adds a value to the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Makes a new empty TrieMap.","Makes a new empty TrieMap.","Removes a key from the map, returning the stored key and …","Removes a value from the set. Returns whether the value was","","","","","","","",""],"i":[0,0,0,2,3,2,3,2,3,2,3,3,2,3,2,3,2,3,3,2,2,3,2,3,2,2,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3],"f":[0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[3,3],[[]],[[]],[[3,4],5],[[],2],[[],3],[[[2,[6]],[2,[6]]],5],[[3,3],5],[[[2,[7]],8],9],[[3,8],9],[[3,10]],[[2,10]],[[2,4,10]],[[3,4,10]],[[]],[[]],[[2,4],11],[[2,4],11],[[2,4]],[[2,4,12]],[[2,4],11],[[3,4],5],[[]],[[]],[[],2],[[],3],[[2,4],11],[[3,4],5],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14]],"c":[],"p":[[8,"Clone"],[3,"TrieMap"],[3,"TrieSet"],[8,"IntoIterator"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"FnMut"],[4,"Option"],[8,"FnOnce"],[4,"Result"],[3,"TypeId"]]},\
"two_sat":{"doc":"2-SAT を解きます。","t":"DLLLLLLLLLLLLLLLLLL","n":["TwoSat","borrow","borrow_mut","build","clone","clone_into","default","eq","fmt","from","hash","implies","into","new","solve","to_owned","try_from","try_into","type_id"],"q":[[0,"two_sat"]],"d":["2-SAT の本体です。","","","","","","","","","Returns the argument unchanged.","","<code>(x == a) -&gt; (y == b)</code> をかつでつなぎます。","Calls <code>U::from(self)</code>.","<code>n</code> 個の不定元を持つ Always true を作ります。","充足する割り当てがあれば返し、なければ …","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1],[1,1],[[]],[[],1],[[1,1],2],[[1,3],4],[[]],[[1,5]],[[1,6,2,6,2]],[[]],[6,1],[1,[[8,[[7,[2]]]]]],[[]],[[],9],[[],9],[[],10]],"c":[],"p":[[3,"TwoSat"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[15,"usize"],[3,"Vec"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"uf_checklist":{"doc":"Union-find …","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Iter","UfChecklist","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","fmt","fmt","from","from","into","into","into_iter","is_checked","lower_bound","new","next","range_check","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"uf_checklist"]],"d":["<code>UfChecklist::range_check</code> が返すイテレータです。","…","","","","","指定した場所をチェックします。","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","指定した場所がチェック済みならば <code>true</code> …","…","区間 [0, n[ …","","区間 <code>range</code> …","","","","","","",""],"i":[0,0,1,6,1,6,1,1,1,1,6,1,6,1,6,6,1,1,1,6,1,1,1,6,1,6,1,6],"f":[0,0,[[]],[[]],[[]],[[]],[[1,2],3],[1,1],[[]],[[1,4],5],[[6,4],5],[[]],[[]],[[]],[[]],[[]],[[1,2],3],[[1,2],[[7,[2]]]],[2,1],[6,7],[[1,[8,[2]]],6],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"c":[],"p":[[3,"UfChecklist"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Iter"],[4,"Option"],[8,"RangeBounds"],[4,"Result"],[3,"TypeId"]]},\
"union_find":{"doc":"Union Find です。","t":"EEIDQEKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLL","n":["EdgeCount","HasCycle","Op","UnionFind","Value","VertexCount","add_edge","add_edge","add_edge","add_edge","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","eq","find","find_mut","fmt","from","from","from","from","from_values","get_value","graft","graft","graft","graft","hash","into","into","into","into","is_root","new","same","singleton","singleton","singleton","singleton","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","value","value_mut"],"q":[[0,"union_find"]],"d":["辺の本数","サイクルがあるとき、<code>true</code>","…","","頂点重み型","頂点の個数","連結成分に辺を１本追加したとき","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","…","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","<code>UnionFind::new()</code> で構築したときのデフォルト値","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,2,0,2,15,16,17,15,16,17,3,15,16,17,3,3,3,3,3,3,3,3,15,16,17,3,3,3,2,15,16,17,3,15,16,17,3,3,3,3,2,15,16,17,3,15,16,17,3,15,16,17,3,15,16,17,3,3,3,3],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[],[[3,[[0,[4,2]]]]]],[[[3,[[0,[5,2]]]],[3,[[0,[5,2]]]]],6],[[[3,[2]],7],7],[[[3,[2]],7],7],[[[3,[2]],8],9],[[]],[[]],[[]],[[]],[10,[[3,[2]]]],[[[3,[2]],7]],[[]],[[]],[[]],[[]],[[[3,[[0,[11,2]]]],12]],[[]],[[]],[[]],[[]],[[[3,[2]],7],6],[7,[[3,[2]]]],[[[3,[2]],7,7],6],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[[3,[2]],7,7],6],[[[3,[2]],7]],[[[3,[2]],7]]],"c":[],"p":[[8,"Clone"],[8,"Op"],[3,"UnionFind"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[8,"Hash"],[8,"Hasher"],[4,"Result"],[3,"TypeId"],[4,"EdgeCount"],[4,"VertexCount"],[4,"HasCycle"]]},\
"veb":{"doc":"A predecessor data structure based on van Emde Boas trees.","t":"NNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMM","n":["Internal","Leaf","VebMap","VebSet","borrow","borrow","borrow_mut","borrow_mut","collect","collect","contains","contains_key","fmt","fmt","from","from","from_iter","from_iter","get","get_mut","index","index_mut","insert","insert","into","into","is_empty","is_empty","len","len","max","max","max_key","max_value","min","min","min_key","min_value","new","new","pred","pred","pred_eq","pred_eq","pred_eq_key","pred_eq_value","pred_key","pred_value","remove","remove","succ","succ","succ_eq","succ_eq_key","succ_eq_value","succ_key","succ_value","try_from","try_from","try_into","try_into","type_id","type_id","chunks","csize","len","max","min","summary"],"q":[[0,"veb"],[63,"veb::VebSet"]],"d":["","","A van Emde Boas tree-based map. The map is implemented as …","A van Emde Boas tree.","","","","","Returns the elements in the map in ascending order. The …","Returns the elements in the set in ascending order. The …","Returns <code>true</code> if the set contains the given element. …","Returns <code>true</code> if the map contains the given key.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the value corresponding to the key.","Returns a mutable reference to the value corresponding to …","","","Inserts an element into the map. Returns the previous …","Inserts an element into the set. Returns <code>true</code> if the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the map is empty.","Returns <code>true</code> if the set is empty. Returns <code>false</code> if the set …","Returns $|S|$.","Returns the number of elements in the set.","Returns the entry at $\\\\max \\\\left( S \\\\right)$.","Returns the maximum element in the set. Returns <code>None</code> if …","Returns the key $\\\\max \\\\left( S \\\\right)$.","Returns the value at $\\\\max \\\\left( S \\\\right)$.","Returns the entry at $\\\\min \\\\left( S \\\\right)$.","Returns the minimum element in the set. Returns <code>None</code> if …","Returns the key $\\\\min \\\\left( S \\\\right)$.","Returns the value at $\\\\min \\\\left( S \\\\right)$.","Creates a new van Emde Boas tree-based map with the given …","Creates a new van Emde Boas tree with the given capacity.","Returns the entry at $\\\\max \\\\left (i^▽ \\\\right)$.","Returns $\\\\min{j \\\\in S \\\\mid j \\\\le i}$.","Returns the entry at $\\\\max \\\\left (i^▲ \\\\right)$.","Returns $\\\\max{j \\\\in S \\\\mid j \\\\leq i}$.","Returns the key $\\\\max \\\\left (i^▲ \\\\right)$.","Returns the value at $\\\\max \\\\left (i^▲ \\\\right)$.","Returns the key $\\\\max \\\\left (i^▽ \\\\right)$.","Returns the value at $\\\\max \\\\left (i^▽ \\\\right)$.","Returns the value at $i$.","Removes an element from the set. Returns <code>true</code> if the …","Returns the entry at $\\\\min \\\\left (i^△ \\\\right)$.","Returns the minimum element greater than given element. …","Returns the entry at $\\\\min \\\\left (i^▲ \\\\right)$.","Returns the key $\\\\min \\\\left (i^▲ \\\\right)$.","Returns the value at $\\\\min \\\\left (i^▲ \\\\right)$.","Returns the key $\\\\min \\\\left (i^△ \\\\right)$.","Returns the value at $\\\\min \\\\left (i^△ \\\\right)$.","","","","","","","","","","","",""],"i":[3,3,0,0,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1,1,1,1,1,3,1,3,1,3,1,3,1,3,1,1,1,3,1,1,1,3,1,3,1,3,1,1,1,1,1,3,1,3,1,1,1,1,1,1,3,1,3,1,3,13,13,13,13,13,13],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[1,2],[3,[[2,[4]]]],[[3,4],5],[[1,4],5],[[[1,[6]],7],8],[[3,7],8],[[]],[[]],[9,1],[9,3],[[1,4],10],[[1,4],10],[[1,4]],[[1,4]],[[1,4],10],[[3,4],5],[[]],[[]],[1,5],[3,5],[1,4],[3,4],[1,10],[3,[[10,[4]]]],[1,[[10,[4]]]],[1,10],[1,10],[3,[[10,[4]]]],[1,[[10,[4]]]],[1,10],[4,1],[4,3],[[1,4],10],[[3,4],[[10,[4]]]],[[1,4],10],[[3,4],[[10,[4]]]],[[1,4],[[10,[4]]]],[[1,4],10],[[1,4],[[10,[4]]]],[[1,4],10],[[1,4],10],[[3,4],5],[[1,4],10],[[3,4],[[10,[4]]]],[[1,4],10],[[1,4],[[10,[4]]]],[[1,4],10],[[1,4],[[10,[4]]]],[[1,4],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,0,0],"c":[],"p":[[3,"VebMap"],[3,"Vec"],[4,"VebSet"],[15,"usize"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[4,"Option"],[4,"Result"],[3,"TypeId"],[13,"Internal"]]},\
"vec_lines":{"doc":"傾き単調な直線の列を <code>Vec</code> で管理します。","t":"IEEDIDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLL","n":["Constraint","DecreasingTilt","IncreasingTilt","Line","Signed","VecLines","VecLinesDecreasing","VecLinesIncreasing","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","eq","eq","eq","eq","eval","eval_gcc","fmt","fmt","fmt","fmt","from","from","from","from","get","hash","hash","hash","hash","into","into","into","into","into_coeff","is_empty","iter_copied","len","new","ok","ok","ok","push","strictly_better","strictly_better","strictly_better","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"vec_lines"]],"d":["…","傾き単調減少を意味するマーカー","傾き単調増加を意味するマーカー","一次関数 $ax + b$ を、<code>[a, b]</code> …","符号つき整数","傾き単調な直線の列を <code>Vec</code> で管理します。","傾きが単調減少な直線の列を管理します。","傾きが単調増加な直線の列を管理します。","","","","","","","","","","","","","","","","","","","","","","","特定の x 座標における値を計算します。","黄金分割探索で最適値を計算します。","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","index 番目の直線を返します。","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","係数を返します。","管理している直線が 0 本のとき <code>true</code>…","…","管理している直線の本数を返します。","傾き単調な直線の列を <code>Vec</code> で管理します。","","","","後ろに直線を挿入します。","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,2,3,2,3,4,5,3,2,2,3,4,5,2,3,4,5,2,2,3,4,5,2,3,4,5,3,2,2,2,2,7,4,5,2,7,4,5,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[[3,[1]]],[[3,[1]]]],[4,4],[5,5],[[]],[[]],[[]],[[]],[[],[[2,[6,7]]]],[[],[[3,[8]]]],[[[2,[9,9]],[2,[9,9]]],10],[[[3,[9]],[3,[9]]],10],[[4,4],10],[[5,5],10],[[[3,[6]],6],6],[[[2,[6,7]],6],[[11,[6]]]],[[[2,[12,12]],13],14],[[[3,[12]],13],14],[[4,13],14],[[5,13],14],[[]],[[]],[[]],[[]],[[[2,[6,7]],15],[[11,[[3,[6]]]]]],[[[2,[16,16]],17]],[[[3,[16]],17]],[[4,17]],[[5,17]],[[]],[[]],[[]],[[]],[[[3,[6]]]],[[[2,[6,7]]],10],[[[2,[6,7]]],18],[[[2,[6,7]]],15],[[],[[2,[6,7]]]],[[[3,[6]],[3,[6]]],10],[[[3,[6]],[3,[6]]],10],[[[3,[6]],[3,[6]]],10],[[[2,[6,7]]]],[[6,6],10],[[6,6],10],[[6,6],10],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20]],"c":[],"p":[[8,"Clone"],[3,"VecLines"],[3,"Line"],[4,"DecreasingTilt"],[4,"IncreasingTilt"],[8,"Signed"],[8,"Constraint"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[4,"Option"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[8,"Hash"],[8,"Hasher"],[8,"Iterator"],[4,"Result"],[3,"TypeId"]]},\
"wavelet_matrix":{"doc":"ウェーブレット行列","t":"DDDDLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["SpanInNode","Spans","StaticBitVec","WaveletMatrix","access","access","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","depth","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","from_iter","from_iter_collect_vec2","from_slice_of_usize_mut","hash","hash","hash","hash","index","into","into","into","into","into_iter","is_empty","is_empty","len","len","next","next_value","prev_value","quantile","range_freq","rank","select","spans","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value"],"q":[[0,"wavelet_matrix"]],"d":["<code>Spans</code> のアイテム型です。詳しくは …","イテレータです 詳しくは <code>WaveletMatrix::spans</code> …","累積和のできる静的なビットベクター","ウェーブレット行列","<code>i</code> 番目の要素を返します。","<code>a[i]</code>","","","","","","","","","","","","","","","","","","","ウェーブレット行列内の <code>i</code> 座標","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","…","特に高速化の意図がなければ、<code>FromIterator</code> …","","","","","ウェーブレット行列内の <code>j</code> 座標の範囲","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","配列が空であれば <code>true</code> を返します。","<code>a.is_empty()</code>","配列の長さを返します。","<code>a.len()</code>","","<code>index</code> により指定された部分列のうち、 <code>value</code> …","<code>index</code> により指定された部分列のうち、 <code>value</code> …","<code>index</code> により指定された部分列のうち、 <code>value</code> …","<code>index</code> により指定された部分列のうち、 <code>value</code> …","<code>sum(a[..end])</code>","min i s.t. <code>target &lt;= sum(a[..i])</code>","対応する部分を、<code>(depth, index_range, value_range)</code> …","","","","","","","","","","","","","","","","","現在のノードの担当する値の範囲"],"i":[0,0,0,0,1,3,1,3,5,6,1,3,5,6,1,3,5,6,1,3,5,6,1,3,6,1,3,5,6,1,3,5,6,1,3,5,6,1,3,1,1,1,3,5,6,6,1,3,5,6,5,1,3,1,3,5,1,1,1,1,3,3,1,1,3,5,6,1,3,5,6,1,3,5,6,1,3,5,6,6],"f":[0,0,0,0,[[1,2],2],[[3,2],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[3,3],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],1],[[],3],0,[[1,1],4],[[3,3],4],[[5,5],4],[[6,6],4],[[1,7],8],[[3,7],8],[[5,7],8],[[6,7],8],[[]],[[]],[[]],[[]],[9,1],[9,3],[9],[10,1],[[1,11]],[[3,11]],[[5,11]],[[6,11]],0,[[]],[[]],[[]],[[]],[[]],[1,4],[3,4],[1,2],[3,2],[5,12],[[1,[13,[2]],[13,[2]]],[[12,[2]]]],[[1,[13,[2]],[13,[2]]],[[12,[2]]]],[[1,2,[13,[2]],[13,[2]]],[[12,[2]]]],[[1,[13,[2]],[13,[2]]],2],[[3,2],2],[[3,2],2],[[1,[13,[2]],[13,[2]]],5],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],0],"c":[],"p":[[3,"WaveletMatrix"],[15,"usize"],[3,"StaticBitVec"],[15,"bool"],[3,"Spans"],[3,"SpanInNode"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[8,"FnMut"],[8,"Hasher"],[4,"Option"],[8,"RangeBounds"],[4,"Result"],[3,"TypeId"]]},\
"z_algo":{"doc":"","t":"F","n":["z_algo"],"q":[[0,"z_algo"]],"d":["Z-algorithm"],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[15,"usize"],[3,"Vec"]]},\
"zeta":{"doc":"…","t":"FFFFFFFFFFFFFFFFFF","n":["add","add_inv","add_rinv","aggr","bitand","bitor","bitxor","for_each","max","min","radd","rbitand","rbitor","rbitxor","rmax","rmin","rzeta","zeta"],"q":[[0,"zeta"]],"d":["+ でゼータ変換","(+, -) でメビウス変換","反転束において (+, -) でメビウス変換","すべての添字集合に関して (二項演算 f, …","bit-and でゼータ変換","bit-or でゼータ変換","bit-xor でゼータ変換","…","max でゼータ変換","min でゼータ変換","反転束において + でゼータ変換","反転束において bit-and でメビウス変換","反転束において bit-or でメビウス変換","反転束において bit-xor でメビウス変換","反転束において max でメビウス変換","反転束において min でメビウス変換","反転束において、<code>f</code> …","<code>f</code> を加法とするゼータ変換をします。"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[]],[[]],[[]],[[1,2],[[3,[2]]]],[[]],[[]],[[]],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1]],"c":[],"p":[[8,"Fn"],[8,"Copy"],[3,"Vec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
