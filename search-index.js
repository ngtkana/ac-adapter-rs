var searchIndex = JSON.parse('{\
"accum":{"doc":"","t":"DFFFLLLLLLLFFLLLLFFFFLFFFFFFLLLLFF","n":["Skipped","add","add_inv","and","borrow","borrow_mut","clone","clone_into","default","eq","fmt","for_each","for_each_mut","from","hash","into","into_iter","max","min","mul","mul_inv","next","or","rfor_each","rfor_each_mut","skipped","skipped_max","skipped_min","to_owned","try_from","try_into","type_id","xor","xor_inv"],"q":["accum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,2,2,2,2,2,2,2,0,0,2,2,2,2,0,0,0,0,2,0,0,0,0,0,0,2,2,2,2,0,0],"f":[0,[[]],[[]],[[]],[[]],[[]],[[[2,[1,1,1]]],[[2,[1,1,1]]]],[[]],[[],[[2,[3,3,3]]]],[[[2,[4,4,4]],2],5],[[[2,[6,6,6]],7],8],[9],[9],[[]],[[[2,[10,10,10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[2,11],[[]],[9],[9],[[],2],[[[0,[12,13]]],[[14,[[0,[12,13]]]]]],[[[0,[12,13]]],[[14,[[0,[12,13]]]]]],[[]],[[],15],[[],15],[[],16],[[]],[[]]],"p":[[8,"Clone"],[3,"Skipped"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"FnMut"],[8,"Hash"],[4,"Option"],[8,"Copy"],[8,"Ord"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"advance":{"doc":"しゃくとり法ユーティルです。","t":"FF","n":["advance_until","advance_visit_until"],"q":["advance",""],"d":["<code>checker</code> が <code>true</code> …","<code>advance_until</code> …"],"i":[0,0],"f":[[[1,2]],[[1,2,2]]],"p":[[15,"usize"],[8,"FnMut"]]},\
"avl_tree":{"doc":"AVL …","t":"DDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AvlTree","IntoIter","Iter","append","back","back_mut","binary_search","binary_search_by","binary_search_by_key","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","eq","eq","fmt","from","from","from","from_iter","front","front_mut","get","get_mut","hash","index","insert","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","lower_bound","new","next","next","next_back","partial_cmp","partition_point","pop_back","pop_front","push_back","push_front","remove","split_off","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upper_bound"],"q":["avl_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["AVL 木本体です。","<code>AvlTree</code> …","<code>AvlTree</code> …","<code>other</code> のすべての要素を <code>self</code> …","列の末尾の要素があれば返し、空なら <code>None</code> …","列の末尾の要素があれば返し、空なら <code>None</code> …","<code>value</code> …","<code>f</code> が <code>Equal</code> …","<code>f</code> が <code>Equal</code> …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","列の先頭の要素があれば返し、空なら <code>None</code> …","列の先頭の要素があれば返し、空なら <code>None</code> …","<code>other</code> の第 <code>index</code> 成分があれば返し、なければ …","<code>other</code> の第 <code>index</code> 成分があれば返し、なければ …","","","<code>other</code> の第 <code>index</code> 成分に <code>value</code> を挿入します。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","空列であれば <code>true</code> を返します。","…","列の要素数を返します。","<code>value</code> …","空列を構築します。","","","","","","…","…","列の末尾に要素を追加します。","列の先頭に要素を追加します。","<code>other</code> の第 <code>index</code> …","<code>other</code> の第 <code>index</code> 成分以降を切り離します。","","","","","","","","","","","<code>value</code> …"],"i":[0,0,0,1,1,1,1,1,1,16,17,1,16,17,1,1,1,1,1,1,1,1,16,17,1,1,1,1,1,1,1,1,1,16,17,1,16,17,1,1,1,1,1,1,1,16,17,16,1,1,1,1,1,1,1,1,1,16,17,1,16,17,1,16,17,1,1],"f":[0,0,0,[[1,1]],[1,2],[1,2],[1,[[4,[3,3]]]],[[1,5],[[4,[3,3]]]],[[1,5],[[4,[3,3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[1,[6]]],[[1,[6]]]],[[]],[[[1,[7]],[1,[7]]],8],[[],1],[1,9],[[[1,[10]],[1,[10]]],9],[[[1,[11]],12],13],[[]],[[]],[[]],[14,1],[1,2],[1,2],[[1,3],2],[[1,3],2],[[[1,[15]]]],[[1,3]],[[1,3]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1,9],[1,16],[1,3],[1,3],[[],1],[16,2],[17,2],[16,2],[[[1,[18]],[1,[18]]],[[2,[8]]]],[[1,5],3],[1,2],[1,2],[1],[1],[[1,3],2],[[1,3],1],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],19],[[],19],[[],19],[1,3]],"p":[[3,"AvlTree"],[4,"Option"],[15,"usize"],[4,"Result"],[8,"FnMut"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[8,"Hash"],[3,"Iter"],[3,"IntoIter"],[8,"PartialOrd"],[3,"TypeId"]]},\
"bfs":{"doc":"","t":"FFFFF","n":["calc_dist","calc_dist_restore","find_path","tree_diamter","tree_diamter_restore"],"q":["bfs","","","",""],"d":["一点からの距離配列を作ります。","…","start から end …","…","…"],"i":[0,0,0,0,0],"f":[[1,[[3,[2]]]],[1],[[1,1],[[4,[[3,[1]]]]]],[[]],[[]]],"p":[[15,"usize"],[15,"u32"],[3,"Vec"],[4,"Option"]]},\
"bfs01":{"doc":"","t":"NENLLFFLLLLLLLLLLL","n":["One","Weight","Zero","borrow","borrow_mut","calc_dist","calc_dist_restore","clone","clone_into","eq","fmt","from","hash","into","to_owned","try_from","try_into","type_id"],"q":["bfs01","","","","","","","","","","","","","","","","",""],"d":["","","","","","一点からの距離配列を作ります。","…","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[4,0,4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4],"f":[0,0,0,[[]],[[]],[1,[[3,[2]]]],[1],[4,4],[[]],[[4,4],5],[[4,6],7],[[]],[4],[[]],[[]],[[],8],[[],8],[[],9]],"p":[[15,"usize"],[15,"u32"],[3,"Vec"],[4,"Weight"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"binary":{"doc":"二分法（ダブリング）をします。","t":"IKKKFKF","n":["Pow","is_nonone","is_nonzero","is_odd","operator_binary","shr1","value_binary"],"q":["binary","","","","","",""],"d":["…","<code>*x != 1</code>","<code>*x != 0</code>","<code>x &amp; 1 == 1</code>","aⁿ(x) を計算します。","<code>self &gt;&gt;= 1</code>","aⁿを計算します。"],"i":[0,2,2,2,0,2,0],"f":[0,[[],1],[[],1],[[],1],[[2,3,3]],[[]],[[2,3]]],"p":[[15,"bool"],[8,"Pow"],[8,"FnMut"]]},\
"bitutils":{"doc":"Provides iterator utilities of integer expression of sets.","t":"DDILLLLLLLLLFLLLLLLLLLLLLLLLLKFLLLLLLLLKK","n":["Combinations","Subsets","Unsigned","bit_length","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","combinations","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","into_iter","into_iter","next","next","one","subsets","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","wrapping_neg","zero"],"q":["bitutils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["See the document of <code>combinations</code>","See the document of <code>subsets</code>","Adapter trait of this crate. Already implemented for all …","","","","","","","","","","Returns an iterator over k-subsets of …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns an iterator over subsets of <code>bs</code>.","","","","","","","","","",""],"i":[0,0,0,5,3,4,3,4,3,4,3,4,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,5,0,3,4,3,4,3,4,3,4,5,5],"f":[0,0,0,[[],1],[[]],[[]],[[]],[[]],[[[3,[2]]],[[3,[2]]]],[[[4,[2]]],[[4,[2]]]],[[]],[[]],[[1,1],[[3,[5]]]],[[],[[3,[6]]]],[[],[[4,[6]]]],[[[3,[7]],3],8],[[[4,[7]],4],8],[[[3,[9]],10],11],[[[4,[9]],10],11],[[]],[[]],[[[3,[12]]]],[[[4,[12]]]],[[]],[[]],[[]],[[]],[[[3,[5]]],13],[[[4,[5]]],13],[[]],[5,[[4,[5]]]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[]],[[]]],"p":[[15,"u32"],[8,"Clone"],[3,"Combinations"],[3,"Subsets"],[8,"Unsigned"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"bitvec":{"doc":"Boolean 配列を <code>u64</code> …","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BitVec","Iter","bitand_assign","bitor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","eq","fmt","format","from","from","from_01str","from_iter","hash","into","into","into_iter","is_empty","iter","len","new","next","push","set","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","test","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unset"],"q":["bitvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Boolean 配列を <code>u64</code> …","ビットを順に <code>bool</code> を返すイテレータです。","","","","","","","","","","","","","指定したフォーマットの <code>String</code> …","Returns the argument unchanged.","Returns the argument unchanged.","“01” 文字列から構築します。","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","長さを返します。","ビットを順に <code>bool</code> …","長さを返します。","サイズを指定して 0 埋め構築します。","","後ろに要素を追架します。","特定のビットを立てます。","","","","","","","","","","","","","","","","","","","","","","","","","特定のビットが立っていれば <code>true</code> …","","","","","","","","","特定のビットをおろします。"],"i":[0,0,1,1,1,9,1,9,1,1,1,1,1,1,1,9,1,1,1,1,9,1,9,1,1,1,1,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,9,1,9,1,1],"f":[0,0,[[1,1]],[[1,1]],[[1,1]],[[]],[[]],[[]],[[]],[1,1],[[]],[[],1],[[1,1],2],[[1,3],4],[[1,5,5],6],[[]],[[]],[7,1],[8,1],[1],[[]],[[]],[[]],[1,2],[1,9],[1,10],[10,1],[9,[[11,[2]]]],[[1,2]],[[1,10]],[[1,12]],[[1,13]],[[1,14]],[[1,15]],[[1,16]],[[1,10]],[[1,17]],[[1,18]],[[1,19]],[[1,20]],[[1,21]],[[1,22]],[[1,10]],[[1,13]],[[1,14]],[[1,22]],[[1,17]],[[1,18]],[[1,16]],[[1,19]],[[1,20]],[[1,21]],[[1,15]],[[1,12]],[[1,10],2],[[]],[1,6],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[1,10]]],"p":[[3,"BitVec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"char"],[3,"String"],[15,"str"],[8,"IntoIterator"],[3,"Iter"],[15,"usize"],[4,"Option"],[15,"i8"],[15,"u64"],[15,"u32"],[15,"u128"],[15,"u8"],[15,"i64"],[15,"isize"],[15,"u16"],[15,"i16"],[15,"i32"],[15,"i128"],[4,"Result"],[3,"TypeId"]]},\
"box_segtree":{"doc":"<code>Box</code> …","t":"DIDDQLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLL","n":["Iter","Ops","Segtree","SegtreeDebugList","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","debug_list","default","eq","eq","eq","fmt","fmt","fold","from","from","from","hash","hash","hash","id","init","into","into","into","into_iter","into_iter","iter","modify","new","next","op","set","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["box_segtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>Segtree::iter</code> の返す型です。","<code>Segtree</code> の演算の情報を持つ型です。","セグツリーです。","<code>Segtree::debug_list</code> の生成物です。…","要素型","","","","","","","","","","","","","<code>self</code> を型に包んで <code>Debug</code> …","","","","","","","<code>range</code> の範囲の <code>value</code> を、<code>Ops::op</code> …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","<code>Self::op</code> の単位元","初期状態の <code>len</code> セル分の値の畳み込み","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","第 <code>i</code> 項を <code>f</code> …","新しいセグツリーを構築します。","","畳み込む演算","<code>Self::modify</code> を呼んで第 <code>i</code> 項に <code>x</code> …","","","","","","","","","","","",""],"i":[0,0,0,0,4,2,3,5,2,3,5,2,3,5,2,3,5,2,2,2,3,5,2,3,2,2,3,5,2,3,5,4,4,2,3,5,2,5,2,2,2,5,4,2,2,3,5,2,3,5,2,3,5,2,3,5],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[[3,[1,1]]],[[3,[1,1]]]],[[[5,[[0,[1,1]],[0,[1,4]]]]],[[5,[[0,[1,1]],[0,[1,4]]]]]],[[]],[[]],[[]],[[[2,[1,4]]],[[3,[1,4]]]],[[],[[2,[6,6]]]],[[[2,[7,7]],2],8],[[[3,[7,7]],3],8],[[[5,[[0,[7,1]],[0,[7,4]]]],5],8],[[[2,[[0,[1,9]],4]],10],11],[[[3,[[0,[1,9]],4]],10],11],[[[2,[1,4]],[13,[12]]],1],[[]],[[]],[[]],[[[2,[14,14]]]],[[[3,[14,14]]]],[[[5,[[0,[14,1]],[0,[14,4]]]]]],[[]],[12],[[]],[[]],[[]],[2],[[]],[[[2,[1,4]]],[[5,[1,4]]]],[[[2,[1,4]],12,15]],[12,[[2,[1,4]]]],[[[5,[1,4]]],16],[[]],[[[2,[1,4]],12,1]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18]],"p":[[8,"Clone"],[3,"Segtree"],[3,"SegtreeDebugList"],[8,"Ops"],[3,"Iter"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[8,"RangeBounds"],[8,"Hash"],[8,"FnOnce"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"bsgs":{"doc":"Baby-step giant-step …","t":"DLLLLLLLLLLLLL","n":["Bsgs","borrow","borrow_mut","clone","clone_into","fmt","from","into","log","new","to_owned","try_from","try_into","type_id"],"q":["bsgs","","","","","","","","","","","","",""],"d":["Baby-stpp giant-step のソルバーです。","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>x</code> …","新しい BSGS ソルバーを構築します。","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[]],[[[2,[3]],4],5],[[]],[[]],[2,[[7,[6]]]],[6,2],[[]],[[],8],[[],8],[[],9]],"p":[[8,"Clone"],[3,"Bsgs"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u64"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"cht":{"doc":"CHT です。","t":"DEEIDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BTreeCht","Concave","Convex","ConvexOrConcave","Quadratic","VecCht","X","add","add","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","eq","eq","eval","eval","eval","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","mul","multieval","multieval","neg","negate_if_concave","negate_if_concave","negate_if_concave","new","new","square","sub","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["cht","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ログがつく方","凹関数を管理する方であるというマーカー","凸関数を管理する方であるというマーカー","<code>BTreeCht</code>, <code>VecCht</code> …","二次式","ログがつかない方","変数","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,2,4,3,6,7,2,4,3,6,7,2,4,3,6,7,2,4,3,6,7,2,4,3,2,4,3,2,4,3,2,4,3,6,7,2,4,3,6,7,2,4,3,3,6,7,2,4,3,6,7,2,4,3,3,2,4,3,1,6,7,2,4,3,3,6,7,2,4,3,6,7,2,4,3,6,7,2,4,3,6,7,2,4,3],"f":[0,0,0,0,0,0,0,[[[2,[1]],3]],[[[4,[1]],3]],[[3,[5,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[7,7],[[[2,[8]]],[[2,[8]]]],[[[4,[8]]],[[4,[8]]]],[3,3],[[]],[[]],[[]],[[]],[[]],[[],[[2,[9]]]],[[],[[4,[9]]]],[[],3],[[[2,[10]],2],11],[[[4,[10]],4],11],[[3,3],11],[[[2,[1]],12],12],[[[4,[1]],12],12],[[3,12],12],[[6,13],14],[[7,13],14],[[[2,[15]],13],14],[[[4,[15]],13],14],[[3,13],14],[[]],[[]],[[]],[[]],[12,3],[[]],[6],[7],[[[2,[16]]]],[[[4,[16]]]],[3],[[]],[[]],[[]],[[]],[[]],[[3,[5,[3]]]],[[[2,[1]],17],[[18,[12]]]],[[[4,[1]],17],[[18,[12]]]],[3],[12,12],[12,12],[12,12],[[],[[2,[1]]]],[[],[[4,[1]]]],[3,3],[[3,[5,[3]]]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20]],"p":[[8,"ConvexOrConcave"],[3,"VecCht"],[3,"Quadratic"],[3,"BTreeCht"],[8,"Into"],[4,"Convex"],[4,"Concave"],[8,"Clone"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[15,"i64"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hash"],[8,"Iterator"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"cipolla":{"doc":"","t":"SSISF","n":["ONE","TWO","Unsigned","ZERO","cipolla_sqrt"],"q":["cipolla","","","",""],"d":["","","","",""],"i":[1,1,0,1,0],"f":[0,0,0,0,[[1,1],[[2,[1]]]]],"p":[[8,"Unsigned"],[4,"Option"]]},\
"cmpmore":{"doc":"Utility <code>change_{min,max}</code>.","t":"IFLOFLO","n":["CmpMore","change_max","change_max","change_max","change_min","change_min","change_min"],"q":["cmpmore","","","","","",""],"d":["Provide method versions of <code>change_min()</code>, <code>change_max()</code>","If <code>lhs</code> is smaller than <code>rhs</code>, override <code>lhs</code> by <code>rhs</code>.","If <code>self</code> is smaller than <code>rhs</code>, override <code>self</code> by <code>rhs</code>.","Macro version of <code>change_max()</code>. This is useful to avoid …","If <code>lhs</code> is larger than <code>rhs</code>, override <code>lhs</code> by <code>rhs</code>.","If <code>self</code> is larger than <code>rhs</code>, override <code>self</code> by <code>rhs</code>.","Macro version of <code>change_min()</code>. This is useful to avoid …"],"i":[0,0,2,0,0,2,0],"f":[0,[1],[[]],0,[1],[[]],0],"p":[[8,"PartialOrd"],[8,"CmpMore"]]},\
"convex_hull":{"doc":"","t":"FFFFF","n":["caliper","ccw","convex_hull","is_convex","sqmag"],"q":["convex_hull","","","",""],"d":["凸包を求めます。 …","det(p1 - p0, p2 - p0) を求めます。","凸包を求めます。 …","凸であれば true を返します。","|p0 - p1| ^ 2 を求めます。"],"i":[0,0,0,0,0],"f":[[[]],[[],1],[[],2],[[],3],[[],1]],"p":[[15,"i64"],[3,"Vec"],[15,"bool"]]},\
"dfs":{"doc":"","t":"F","n":["calc_reachability"],"q":["dfs"],"d":["一点からの到達可能性配列を返します。"],"i":[0],"f":[[1,[[3,[2]]]]],"p":[[15,"usize"],[15,"bool"],[3,"Vec"]]},\
"dial":{"doc":"","t":"FF","n":["calc_dist","calc_dist_restore"],"q":["dial",""],"d":["一点からの距離配列を作ります。","一点からの距離配列を作ります。"],"i":[0,0],"f":[[1,[[3,[2]]]],[1]],"p":[[15,"usize"],[15,"u32"],[3,"Vec"]]},\
"dijkstra_radix_heap":{"doc":"CAUTION: <code>RadixHeap</code> fails in testst!","t":"FF","n":["calc_dist","calc_dist_restore"],"q":["dijkstra_radix_heap",""],"d":["一点からの距離配列を作ります。","一点からの距離配列を作ります。"],"i":[0,0],"f":[[1,[[3,[2]]]],[1]],"p":[[15,"usize"],[15,"u32"],[3,"Vec"]]},\
"dinic":{"doc":"Solves maximum flow problem.","t":"DDDILLLLLLLMLLLLLLLLLLLMLLLLLLLMLLLLKLLLLLMLLLLLLLLLLLLK","n":["Dinic","Edge","EdgeKey","Value","add_edge","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cap","change_edge","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","flow","flow","flow_with_limit","fmt","fmt","fmt","from","from","from","from","get_edge","get_edges","get_excess","get_network","infinity","into","into","into","min_cut","new","to","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":["dinic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A struct to execute Dinic’s algorithm.","A summary of the state of an edge, which is returned by …","A key object to query an edge.","An adapter trait of the capacity.","Inserts a new edge to the network.","","","","","","","The capacity of an edge.","Changes the capacity and the amount of the edge …","","","","","","","","","","Auguments the flow from <code>s</code> to <code>t</code> as much as possible. It …","The value of the flow of the network at this edge.","Auguments the flow from <code>s</code> to <code>t</code> as much as possible as long …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The vertex-index of the source of an edge.","Returns the current internal state of the edges.","Collects all the edges.","Returens the <code>Vec</code> of excess of all the vertices.","Collects all the edges and arrange it in adjacent-list …","Returns the max value of <code>Self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a vector of length <code>n</code>, such that the <code>i</code>-th element …","Creates a new instance of <code>Dinic</code>","The vertex-index of the target of an edge.","","","","","","","","","","","","","Returns the zero."],"i":[0,0,0,0,1,1,5,3,1,5,3,5,1,1,5,3,1,5,3,1,5,3,1,5,1,1,5,3,1,5,3,5,1,1,1,1,8,1,5,3,1,1,5,1,5,3,1,5,3,1,5,3,1,5,3,8],"f":[0,0,0,0,[[1,2,2],3],[[]],[[]],[[]],[[]],[[]],[[]],0,[[1,3]],[[[1,[4]]],[[1,[4]]]],[[[5,[4]]],[[5,[4]]]],[3,3],[[]],[[]],[[]],[[[1,[6]],1],7],[[[5,[6]],5],7],[[3,3],7],[[1,2,2]],0,[[1,2,2]],[[[1,[8]],9],10],[[[5,[11]],9],10],[[3,9],10],[[]],[[]],[[]],0,[[1,3],5],[1,[[12,[5]]]],[1,12],[1,[[12,[[12,[5]]]]]],[[]],[[]],[[]],[[]],[[1,2],[[12,[7]]]],[2,1],0,[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[]]],"p":[[3,"Dinic"],[15,"usize"],[3,"EdgeKey"],[8,"Clone"],[3,"Edge"],[8,"PartialEq"],[15,"bool"],[8,"Value"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"dual_segtree":{"doc":"双対セグメント木（右作用）","t":"DIQLLLLLLLLLLLLLLLLKLLLLLKLLLLL","n":["DualSegtree","Ops","Value","apply","borrow","borrow_mut","clone","clone_into","collect_vec","default","eq","fmt","from","from","from_iter","get","get_cloned","get_copied","get_mut","identity","into","into_vec","is_empty","len","new","op","op_assign_from_right","to_owned","try_from","try_into","type_id"],"q":["dual_segtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["双対セグメント木（右作用）","演算（右作用）","値型","<code>range</code> に <code>x</code> を作用させます。（右作用）","","","","","<code>Vec</code> に変換します。","","","","","Returns the argument unchanged.","","<code>i</code> 番目の要素への参照を返します。","<code>i</code> 番目の要素をクローンして返します。","<code>i</code> 番目の要素をコピーして返します。","<code>i</code> 番目の要素への可変参照を返します。","<code>op</code> の単位元","Calls <code>U::from(self)</code>.","<code>Vec</code> に変換します。","空なら <code>true</code> を返します。","管理している配列の長さを返します。","<code>ExactSizeIterator</code> から作ります。","作用する演算（右作用）","<code>lhs</code> を <code>op(lhs, rhs)</code> で置き換えます。","","","",""],"i":[0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2],"f":[0,0,0,[[[2,[1]],[4,[3]]]],[[]],[[]],[[[2,[[0,[5,1]]]]],[[2,[[0,[5,1]]]]]],[[]],[[[2,[1]]],6],[[],[[2,[[0,[7,1]]]]]],[[[2,[[0,[8,1]]]],2],9],[[[2,[1]],10],11],[6,[[2,[1]]]],[[]],[12,[[2,[1]]]],[[[2,[1]],3]],[[[2,[1]],3]],[[[2,[1]],3]],[[[2,[1]],3]],[[]],[[]],[[[2,[1]]],6],[[[2,[1]]],9],[[[2,[1]]],3],[12,[[2,[1]]]],[[]],[[]],[[]],[[],13],[[],13],[[],14]],"p":[[8,"Ops"],[3,"DualSegtree"],[15,"usize"],[8,"RangeBounds"],[8,"Clone"],[3,"Vec"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[4,"Result"],[3,"TypeId"]]},\
"elim":{"doc":"","t":"F","n":["column_reduce"],"q":["elim"],"d":["…"],"i":[0],"f":[[[],1]],"p":[[15,"usize"]]},\
"erato":{"doc":"Use the two types of sieve of eratosthenes to query.","t":"IDIDDDDDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLK","n":["Int","LpdSieve","PrimeFactors","PrimeFactorsByLookup","PrimeFactorsByTrialDivision","PrimeNumbers","Rle","Sieve","Unique","as_usize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from_usize","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_prime","is_prime","len","len","lpd","new","new","next","next","next","next","next","one","prime_factors","prime_factors","prime_numbers","prime_numbers","rle","rle","rle","rle","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique","unique","unique","unique","with_len","with_len","zero"],"q":["erato","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Abstraction of integers.","Least-prime-divisor table.","An abstraction of prime factor generator.","See the document of <code>crate::LpdSieve::prime_factors</code>","See the document of <code>crate::Sieve::prime_factors</code>","An iterator to generate all the prime numbers, constructed …","An iterator returned by <code>PrimeFactors::rle</code>","Is-prime table.","An iterator returned by <code>PrimeFactors::unique</code>","Converts into <code>usize</code>","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>usize</code> into <code>Self</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if a sieve is empty.","Returns <code>true</code> if a sieve is empty.","Returns <code>true</code> if <code>x</code> is a prime number.","Returns <code>true</code> if <code>x</code> is a prime number.","Returns the length of a sieve.","Returns the length of a sieve.","Returns the least prime divisor of <code>x</code>.","Construct a new empty sieve. No heap allocations is run …","Construct a new empty sieve. No heap allocations is run …","","","","","","Returns <code>1</code>.","Use trial-division algorithm to iterate over all the prime …","Use trial-division algorithm to iterate over all the prime …","Returns an iterator to generate all the prime numbers in …","Returns an iterator to generate all the prime numbers in …","Returns an iterator to generate the pairs of distinct …","Returns an iterator to generate the pairs of distinct …","","Forward <code>crate::PrimeFactors::rle</code>.","","","","","","","","","","","","","","","","","Returns <code>2</code>.","","","","","","","","Make prime factors unique.","Make prime factors unique.","","Forward <code>crate::PrimeFactors::unique</code>.","Construct a sieve of given length.","Construct a sieve of given length.","Returns <code>0</code>."],"i":[0,0,0,0,0,0,0,0,0,7,9,11,12,13,14,2,3,9,11,12,13,14,2,3,2,3,2,3,2,3,2,3,2,3,9,11,12,13,14,2,3,7,9,11,12,13,14,2,3,9,11,12,13,14,2,3,2,3,2,3,2,2,3,9,11,12,13,14,7,2,3,2,3,8,8,13,14,2,3,9,11,12,13,14,2,3,9,11,12,13,14,2,3,7,9,11,12,13,14,2,3,8,8,13,14,2,3,7],"f":[0,0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[3,3],[[]],[[]],[[],2],[[],3],[[2,2],4],[[3,3],4],[[2,5],6],[[3,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,4],[3,4],[[2,7],4],[[3,7],4],[2,1],[3,1],[[2,7],7],[[],2],[[],3],[[[9,[7,[8,[7]]]]],10],[[[11,[7,[8,[7]]]]],10],[[[12,[0,7]]],10],[[[13,[7]]],10],[[[14,[7]]],10],[[]],[[2,7],[[14,[7]]]],[[3,7],[[13,[7]]]],[2,[[12,[0,7]]]],[3,[[12,[0,7]]]],[[],11],[[],11],[[[13,[7]]],[[11,[7,[13,[7]]]]]],[[[14,[7]]],[[11,[7,[14,[7]]]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],9],[[],9],[[[13,[7]]],[[9,[7,[13,[7]]]]]],[[[14,[7]]],[[9,[7,[14,[7]]]]]],[1,2],[1,3],[[]]],"p":[[15,"usize"],[3,"LpdSieve"],[3,"Sieve"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Int"],[8,"PrimeFactors"],[3,"Unique"],[4,"Option"],[3,"Rle"],[3,"PrimeNumbers"],[3,"PrimeFactorsByTrialDivision"],[3,"PrimeFactorsByLookup"],[4,"Result"],[3,"TypeId"]]},\
"euclid":{"doc":"","t":"IIIKFKLFFKKKK","n":["Int","Signed","Unsigned","abs","crt","div_euclid","divides","ext_gcd","gcd","increment","one","rem_euclid","zero"],"q":["euclid","","","","","","","","","","","",""],"d":["Abstraction of integers.","Abstraction of signed integers.","Abstraction of unsigned integers.","Returns the absolute value.","Returns an integer <code>res2, mod2</code> such that (res0 + mod0 ℤ) …","Calculates the quotient of Euclidean division of self by …","Returns <code>true</code> if and only if <code>self</code> divides <code>n</code>.","Takes two integers <code>x, y</code> and returns <code>a, b, g</code> satisfying …","Returns the greatest common divisor of <code>x</code> and <code>y</code>.","Increment <code>self</code>.","Returns <code>1</code>.","Calculates the least nonnegative remainder of …","Returns <code>0</code>."],"i":[0,0,0,4,0,4,4,0,0,4,4,4,4],"f":[0,0,0,[[]],[[1,1,1,1],2],[[]],[[],3],[[1,1]],[[4,4],4],[[]],[[]],[[]],[[]]],"p":[[8,"Signed"],[4,"Option"],[15,"bool"],[8,"Int"]]},\
"filter_position":{"doc":"条件を満たす位置を返すイテレータです。","t":"DILLLLLLLLLLLLLLLLL","n":["FilterPosition","TFilterPosition","borrow","borrow_mut","clone","clone_into","eq","filter_position","filter_position_by","fmt","from","hash","into","into_iter","next","to_owned","try_from","try_into","type_id"],"q":["filter_position","","","","","","","","","","","","","","","","","",""],"d":["<code>TFilterPosition::filter_position_by</code> …","…","","","","","","<code>true</code> の位置を返すイテレータを返します。","…","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,2,2,2,2,2,14,14,2,2,2,2,2,2,2,2,2,2],"f":[0,0,[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[]],[[[2,[3,3]],2],4],[[],2],[[],2],[[[2,[5,5]],6],7],[[]],[[[2,[8,8]]]],[[]],[[]],[[[2,[9,10]]],11],[[]],[[],12],[[],12],[[],13]],"p":[[8,"Clone"],[3,"FilterPosition"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Iterator"],[8,"Fn"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"TFilterPosition"]]},\
"fp":{"doc":"","t":"GGGGDIDGGGDEEEEISSSSLLLLLLLLLLLLLLFLLLFLLLLLLLLLLLLLLLLLLLLLFLLLOLLLLLLLLLLLLLFFFLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["F1000000007","F1012924417","F924844033","F998244353","FactTable","Fft","Fp","Fps1012924417","Fps924844033","Fps998244353","Fpsp","M1000000007","M1012924417","M924844033","M998244353","Mod","P","P","ROOT","ROOT","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","anymod_convolution","binom","binom2","binom_inv","binom_iter","binom_or_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","convolution","default","default","default","define_fp","deref","deref_mut","derivative","div","div","div","div","div_assign","div_assign","eq","eq","eq","exp","fact_build","fact_iter","fft","fmt","fmt","fmt","fmt","fp","fps","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","hash","hash","hash","ifft","index","integral","into","into","into","into","into","into","into","inv","inv","is_empty","len","log","m1pow","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","new","new","newton_by","pow","product","product","resized","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_owned","to_owned","to_owned","to_string","truncated","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value"],"q":["fp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","A wrapper trait of a primitive root.","","","","","","","","","","A wrapper trait of a modulus.","","","","The primitive root","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Define consts and types.","","","","","","","","","","","","","","","","","","","","","Creater an object of type <code>Fp</code>.","Create an object of <code>Fpsp</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,4,1,1,1,1,1,5,5,5,5,1,1,5,5,5,5,0,7,7,7,0,7,1,5,34,35,36,37,7,1,5,34,35,36,37,7,1,5,7,1,5,7,0,1,5,7,0,5,5,5,1,1,1,1,1,1,1,5,7,5,0,0,0,1,1,5,7,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,34,35,36,37,7,5,1,5,7,0,7,5,1,5,34,35,36,37,7,1,5,5,5,5,1,1,1,1,1,5,5,5,1,1,5,5,5,1,1,5,5,1,5,0,1,1,1,5,1,1,1,1,5,5,5,5,1,1,5,5,5,5,1,1,1,5,7,1,5,1,5,34,35,36,37,7,1,5,34,35,36,37,7,1,5,34,35,36,37,7,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1]],[[[1,[2]],[3,[[1,[2]]]]]],[[1,[3,[[1,[2]]]]]],[[[1,[2]],1]],[[[5,[4]],[3,[[1,[4]]]]]],[[[5,[4]],[5,[4]]]],[[[5,[4]],1]],[[[5,[4]],5]],[[[1,[2]],[3,[[1,[2]]]]]],[[[1,[2]],1]],[[[5,[4]],1]],[[[5,[4]],5]],[[[5,[4]],[5,[4]]]],[[[5,[4]],[3,[[1,[4]]]]]],[[],[[6,[[1,[2]]]]]],[[[7,[2]],8,8],[[1,[2]]]],[[[7,[2]],8,8],[[1,[2]]]],[[[7,[2]],9,9],[[1,[2]]]],[[],10],[[[7,[2]],8,11],[[1,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[1,[2]]],[[1,[2]]]],[[[5,[4]]],[[5,[4]]]],[[[7,[[0,[12,2]]]]],[[7,[[0,[12,2]]]]]],[[]],[[]],[[]],[[[6,[[1,[4]]]],[6,[[1,[4]]]]],[[6,[[1,[4]]]]]],[[],[[1,[2]]]],[[],[[5,[4]]]],[[],[[7,[[0,[13,2]]]]]],0,[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]],[[5,[4]]]],[[[1,[2]],1]],[[[1,[2]],[3,[[1,[2]]]]]],[[1,1]],[[1,[3,[[1,[2]]]]]],[[[1,[2]],1]],[[[1,[2]],[3,[[1,[2]]]]]],[[[1,[2]],[1,[2]]],14],[[[5,[4]],[5,[4]]],14],[[[7,[[0,[15,2]]]],7],14],[[[5,[4]],8],[[5,[4]]]],[8,[[7,[2]]]],[[],10],[[]],[[[1,[2]],16],17],[[[1,[2]],16],17],[[[5,[4]],16],17],[[[7,[[0,[18,2]]]],16],17],0,0,[11,[[1,[2]]]],[19,[[1,[2]]]],[20,[[1,[2]]]],[14,[[1,[2]]]],[21,[[1,[2]]]],[22,[[1,[2]]]],[23,[[1,[2]]]],[24,[[1,[2]]]],[25,[[1,[2]]]],[9,[[1,[2]]]],[26,[[1,[2]]]],[8,[[1,[2]]]],[[]],[27,[[1,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[28,[[5,[4]]]],[[[1,[2]]]],[[[5,[4]]]],[[[7,[[0,[29,2]]]]]],[[]],[[[7,[2]]]],[[[5,[4]]],[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[1,[2]]],[[1,[2]]]],[[[5,[4]],8],[[5,[4]]]],[[[5,[4]]],14],[[[5,[4]]],8],[[[5,[4]],8],[[5,[4]]]],[24,[[1,[2]]]],[[[1,[2]],1]],[[1,1]],[[[1,[2]],[3,[[1,[2]]]]]],[[1,[3,[[1,[2]]]]]],[[[5,[4]],1]],[[[5,[4]],[3,[[1,[4]]]]]],[[[5,[4]],[5,[4]]]],[[[1,[2]],1]],[[[1,[2]],[3,[[1,[2]]]]]],[[[5,[4]],[3,[[1,[4]]]]]],[[[5,[4]],1]],[[[5,[4]],[5,[4]]]],[[[1,[2]]]],[1],[[[5,[4]]]],[5],[9,[[1,[2]]]],[[],[[5,[4]]]],[[8,[1,[4]],30],[[5,[4]]]],[[[1,[2]],9],[[1,[2]]]],[10,[[1,[2]]]],[10,[[1,[2]]]],[[[5,[4]],8],[[5,[4]]]],[[1,1]],[[1,[3,[[1,[2]]]]]],[[[1,[2]],1]],[[[1,[2]],[3,[[1,[2]]]]]],[[[5,[4]],5]],[[[5,[4]],[3,[[1,[4]]]]]],[[[5,[4]],[5,[4]]]],[[[5,[4]],1]],[[[1,[2]],1]],[[[1,[2]],[3,[[1,[2]]]]]],[[[5,[4]],[5,[4]]]],[[[5,[4]],5]],[[[5,[4]],1]],[[[5,[4]],[3,[[1,[4]]]]]],[10,[[1,[2]]]],[10,[[1,[2]]]],[[]],[[]],[[]],[[],31],[[[5,[4]],8],[[5,[4]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[[1,[2]]],9]],"p":[[3,"Fp"],[8,"Mod"],[8,"Into"],[8,"Fft"],[3,"Fpsp"],[3,"Vec"],[3,"FactTable"],[15,"usize"],[15,"u64"],[8,"Iterator"],[15,"isize"],[8,"Clone"],[8,"Default"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"i32"],[15,"u16"],[15,"i64"],[15,"i16"],[15,"i128"],[15,"u32"],[15,"u8"],[15,"i8"],[15,"u128"],[8,"IntoIterator"],[8,"Hash"],[8,"Fn"],[3,"String"],[4,"Result"],[3,"TypeId"],[4,"M1000000007"],[4,"M998244353"],[4,"M1012924417"],[4,"M924844033"]]},\
"gco":{"doc":"Solve a submodular graph cut optimizaion problem of degree …","t":"DDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["Gco","GcoResult","args","binary","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","new","solve","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unary","value"],"q":["gco","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A solver of graph cut optimization problems.","The minimum value and and an argmin of $f$.","An argmin","Add a binary term.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize a solver with $n$ terms.","Returns the minimum value and an argmin of $f$.","","","","","","","","","Add a unary term.","The minimum value"],"i":[0,0,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,2,1,2,1,2,1,2,1,2],"f":[0,0,0,[1],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[],1],[[],2],[[1,1],3],[[2,2],3],[[1,4],5],[[2,4],5],[[]],[[]],[1],[2],[[]],[[]],[6,1],[1,2],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[1,6]],0],"p":[[3,"Gco"],[3,"GcoResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"grid":{"doc":"","t":"EDNNNNNNNNDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Dihedral","Grid","R0","R0S","R1","R1S","R2","R2S","R3","R3S","Row","RowIter","Rows","applied","apply","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cells","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","collect_vec2","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_mut","h","hash","hash","hash","hash","iget","iget_mut","iget_or_default","index","index","index_mut","into","into","into","into","into","into_iter","into_iter","into_iter","iter","mul","mul_assign","new","new","next","next","rows","surround","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","w"],"q":["grid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An element of a dihedral group D₄.","A wrapper to rotate/reflect a grid logically.","","","","","","","","","The item type of a iterable type <code>Rows</code>.","An iterator over all the cells of a grid.","An iterator over all the rows of <code>Grid</code>.","Returns a grid applied a dihedral element logically.","Apply a dihedral element to a grid logically.","","","","","","","","","","","Returns an iterator over the <em>logical</em> rows of this grid.","","","","","","","","","","","Converts into a 2d vector.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If <code>(i, j)</code> is within the domain, returns a reference to the …","If <code>(i, j)</code> is within the domain, returns a mutable …","Returns a logical height of a grid.","","","","","If <code>(i, j)</code> is within the domain, returns a reference to the …","If <code>(i, j)</code> is within the domain, returns a mutable …","If <code>(i, j)</code> is within the domain, returns the corresponding …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates a new <code>Grid</code>.","","","","Returns an iterator over the <em>logical</em> rows of this grid.","Returns a <code>Grid</code> object surround by infinite <code>default</code> …","","","","","","","","","","","","","","","","","","","","","","Returns a logical width of a grid."],"i":[0,0,2,2,2,2,2,2,2,2,0,0,0,1,1,2,1,5,6,7,2,1,5,6,7,1,2,1,5,6,7,2,1,5,6,7,1,2,1,5,6,7,2,1,5,6,7,2,1,5,6,7,1,1,1,2,5,6,7,1,1,1,1,6,1,2,1,5,6,7,5,6,7,6,2,2,1,5,5,7,1,1,2,1,5,6,7,2,2,1,5,6,7,2,1,5,6,7,2,1,5,6,7,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,3],[2,2],[[[1,[4]]],[[1,[4]]]],[[[5,[4]]],[[5,[4]]]],[[[6,[4]]],[[6,[4]]]],[[[7,[4]]],[[7,[4]]]],[[]],[[]],[[]],[[]],[[]],[1,[[8,[8]]]],[[2,2],9],[[[1,[10]],1],9],[[[5,[10]],5],9],[[[6,[10]],6],9],[[[7,[10]],7],9],[[2,11],12],[[[1,[13]],11],12],[[[5,[13]],11],12],[[[6,[13]],11],12],[[[7,[13]],11],12],[[]],[[]],[[]],[[]],[[]],[[1,14,14],15],[[1,16,16],15],[1,14],[2],[[[5,[17]]]],[[[6,[17]]]],[[[7,[17]]]],[[1,16,16],15],[[1,16,16],15],[[1,16,16]],[1],[[6,14]],[1],[[]],[[]],[[]],[[]],[[]],[[]],[6],[[]],[6,7],[[2,2],2],[[2,2]],[[8,14,14],1],0,[5,15],[7,15],[1,5],[1,1],[[]],[[]],[[]],[[]],[[]],[[],18],[19,[[18,[2]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],20],[[],20],[[],20],[[],20],[[],20],[1,14]],"p":[[3,"Grid"],[4,"Dihedral"],[8,"Iterator"],[8,"Clone"],[3,"Rows"],[3,"Row"],[3,"RowIter"],[3,"Vec"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"usize"],[4,"Option"],[15,"isize"],[8,"Hash"],[4,"Result"],[15,"u8"],[3,"TypeId"]]},\
"gridnei":{"doc":"…","t":"QDDDDDDDDDDISLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLFFOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLL","n":["Array","Encode","Grid0","Grid1","Grid2","Grid3","Grid4","Grid5","Grid6","Grid7","Grid8","GridIterator","LEN","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","encode","encode","encode","encode","encode","encode","encode","encode","encode","from","from","from","from","from","from","from","from","from","from","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","grid4","grid4encode","grid_iter","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w","w","w","w","w","w","w","w"],"q":["gridneid":["","…","","","","","","","","","","<code>grid_iter!</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","…","…","新しい <code>Grid*</code> を定義して、<code>GridIterator</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[12,0,0,0,0,0,0,0,0,0,0,0,12,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,12,2,1,1,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,0,0,0,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,2,1,3,4,5,6,7,8,9,10,12,1,3,4,5,6,7,8,9,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[2,[1]]]],[3,[[2,[3]]]],[4,[[2,[4]]]],[5,[[2,[5]]]],[6,[[2,[6]]]],[7,[[2,[7]]]],[8,[[2,[8]]]],[9,[[2,[9]]]],[10,[[2,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,11,11,11]],[[11,11,11],[[2,[12]]]],[[11,11,11,11,13],1],[[11,11,11,11],1],[[11,11,11,11],3],[[11,11,11,11,13],3],[[11,11,11,11,13],4],[[11,11,11,11],4],[[11,11,11,11,13],5],[[11,11,11,11],5],[[11,11,11,11],6],[[11,11,11,11,13],6],[[11,11,11,11,13],7],[[11,11,11,11],7],[[11,11,11,11],8],[[11,11,11,11,13],8],[[11,11,11,11],9],[[11,11,11,11,13],9],[[11,11,11,11,13],10],[[11,11,11,11],10],[[11,11,11,11],6],[[11,11,11],[[2,[6]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,[[2,[12]]]],[[11,11],1],[[11,11],3],[[11,11],4],[[11,11],5],[[11,11],6],[[11,11],7],[[11,11],8],[[11,11],9],[[11,11],10],[[[2,[12]]],14],[1,14],[3,14],[4,14],[5,14],[6,14],[7,14],[8,14],[9,14],[10,14],[[[2,[12]]],14],[1,14],[3,14],[4,14],[5,14],[6,14],[7,14],[8,14],[9,14],[10,14],[[[2,[12]]]],[1],[3],[4],[5],[6],[7],[8],[9],[10],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],11],[1,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11]],"p":[[3,"Grid0"],[3,"Encode"],[3,"Grid1"],[3,"Grid2"],[3,"Grid3"],[3,"Grid4"],[3,"Grid5"],[3,"Grid6"],[3,"Grid7"],[3,"Grid8"],[15,"usize"],[8,"GridIterator"],[8,"FnMut"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"gss":{"doc":"黄金分割探索をします。","t":"IISIKKKKFFFFKKKKKK","n":["Float","Golden","INVPHI","Int","abs","as_f64","f64_as","golden_sect","gss_by_absolute_eps","gss_by_count","gss_integer","gss_on_slice","is_finite","max","midpoint_sorted","one","two","zero"],"q":["gss","","","","","","","","","","","","","","","","",""],"d":["<code>gss_by_count</code> …","黄金分割をする関数 <code>golden_sect</code> …","1 / φ = 0.6180339887498949","<code>gss_integer</code> …","<code>Self</code> の同名メソッド","","","<code>self</code> と <code>other</code> を φ:1 …","…","回数指定バージョン。<code>count</code> …","整数バージョン。正確な値を返します。","…","<code>Self</code> の同名メソッド","<code>Self</code> の同名メソッド","数学的な <code>floor((self + upper)/2)</code> …","<code>1</code>","2.0","0.0"],"i":[0,0,2,0,2,6,6,3,0,0,0,0,2,2,6,6,2,2],"f":[0,0,0,0,[[]],[[],1],[1],[[]],[[[0,[2,3]],[0,[2,3]],4,[0,[2,3]]],[[0,[2,3]]]],[[[0,[2,3]],[0,[2,3]],4,5],[[0,[2,3]]]],[[[0,[6,3]],[0,[6,3]],4],[[0,[6,3]]]],[[],5],[[],7],[[]],[[]],[[]],[[]],[[]]],"p":[[15,"f64"],[8,"Float"],[8,"Golden"],[8,"Fn"],[15,"usize"],[8,"Int"],[15,"bool"]]},\
"heap_slope_trick":{"doc":"<code>BinaryHeap</code> 二本で slope trick をします。","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLL","n":["HeapSlopeTrick","Summary","add_abs","add_const","add_cutoff_anti_diagonal","add_cutoff_diagonal","articulation_points","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cumulative_min_from_left","cumulative_min_from_right","default","default","eq","eval","fmt","fmt","from","from","get_argmin","get_minimum","get_tilt_maximum","get_tilt_minimum","hash","into","into","merge","new","shift","sliding_window_minimum","summary","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["heap_slope_trick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["本体です。","<code>HeapSlopeTrick::summary()</code> の戻り値です。","絶対値関数加算 g(x) = f(x) + |x - a|","定数関数加算 g(x) = f(x) + c","傾き -1 のカットオフ一次関数加算 g(x) = f(x) …","傾き +1 のカットオフ一次関数加算 g(x) = f(x) …","関節点（二階差分が正である点）全体の列 …","","","","","","","","","左から累積最小値 g(x) = min { f(y) | y ∈ ]-∞, x…","右から累積最小値 g(x) = min { f(y) | y ∈ [x, ∞[…","","","","一点評価 f(x)","","","Returns the argument unchanged.","Returns the argument unchanged.","最小値を取る x の集合（と [MIN, MAX] …","最小値取得 min { f(x) | x in ]-∞, ∞[ }","差分の最大値 max { f(x + 1) - f(x) | x ∈ ]-∞, ∞…","差分の最小値 min { f(x + 1) - f(x) | x ∈ ]-∞, ∞…","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","足し算をします。","零関数 f(x) = 0","平行移動 g(x) = f ( x - a )","スライド最小値 g(x) = min { f(y) |  y ∈ [x - b, x …","関節点と差分の範囲を返します。","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,4,1,4,1,4,1,4,1,1,1,4,4,1,1,4,1,4,1,1,1,1,4,1,4,0,1,1,1,1,1,4,1,4,1,4,1,4],"f":[0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],[1,3],[[]],[[]],[[]],[[]],[1,1],[4,4],[[]],[[]],[1],[1],[[],1],[[],4],[[4,4],5],[[1,2],2],[[1,6],7],[[4,6],7],[[]],[[]],[1],[1,2],[1,2],[1,2],[4],[[]],[[]],[[1,1],1],[[],1],[[1,2]],[[1,2,2]],[1,4],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[3,"HeapSlopeTrick"],[15,"i64"],[3,"Vec"],[3,"Summary"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"heap_tricks":{"doc":"<code>remove_unchecked</code> のできるヒープです。","t":"DIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLKLLLKLLLLKLLLKLLLLLLMLLLLLLLLLLLLLLLLLL","n":["DoubleHeap","Handler","Nop","RemovableHeap","Sum","balance_left","balance_right","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","collect_left_sorted_vec","collect_right_sorted_vec","collect_sorted_vec","collect_sorted_vec","default","default","default","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","handler","hash","hash","into","into","into","into","is_empty","is_empty","left","left_len","len","len","move_left","move_right","new","new","peek","peek_left","peek_right","pop","pop_left","pop_left","pop_left","pop_left","pop_right","pop_right","pop_right","pop_right","push","push_left","push_left","push_left","push_left","push_right","push_right","push_right","push_right","remove_left_unchecked","remove_right_unchecked","remove_unchecked","right","right_len","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_handler"],"q":["heap_tricks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["…","集約操作を指定するためのトレイトです。 …","何も集約しないことを表す型です。 <code>Handler</code> …","論理削除のできるヒープです。","総和を集約するための型です。 <code>Handler</code> …","左側ヒープの要素が <code>k</code> …","右側ヒープの要素が <code>k</code> …","","","","","","","","","","","","","","","","","…","…","…","…","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","ハンドラへの参照を返します。","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ヒープが空ならば <code>true</code> を返します。","ヒープが空ならば <code>true</code> を返します。","","左側ヒープの要素数を返します。","全体の要素数を返します。","ヒープの長さを返します。","…","…","","空のヒープを構築します。","…","左側ヒープの最大要素があれば返します。","右側ヒープの最大要素があれば返します。","…","左側から削除するときのコールバック関数","","","…","右側から削除するときのコールバック関数","","","…","ヒープに新しい要素 <code>x</code> を追加します。","左側に挿入するときのコールバック関数","","","…","右側に挿入するときのコールバック関数","","","…","…","…","ヒープに含まれる要素 <code>x</code> を削除します。 …","","右側ヒープの要素数を返します。","","","","","","","","","","","","","","","","","<code>Handler</code> を指定して構築します。"],"i":[0,0,0,0,0,1,1,3,5,1,6,3,5,1,6,3,5,1,6,3,5,1,6,1,1,1,6,3,5,1,6,3,5,3,5,1,6,3,5,1,6,6,1,3,5,3,5,1,6,1,6,5,1,1,6,1,1,1,6,6,1,1,6,21,3,5,1,21,3,5,1,6,21,3,5,1,21,3,5,1,1,1,6,5,1,3,5,1,6,3,5,1,6,3,5,1,6,3,5,1,6,1],"f":[0,0,0,0,0,[[1,2]],[[1,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[[5,[4]]],[[5,[4]]]],[[[1,[4,4]]],[[1,[4,4]]]],[[[6,[4]]],[[6,[4]]]],[[]],[[]],[[]],[[]],[1,7],[1,7],[1,7],[[[6,[[0,[8,9,10]]]]],[[7,[[0,[8,9,10]]]]]],[[],3],[[],[[5,[11]]]],[[],[[1,[3]]]],[[],[[6,[[0,[8,9,10]]]]]],[[3,3],12],[[[5,[13]],5],12],[[3,14],15],[[[5,[16]],14],15],[[1,14],15],[[[6,[[0,[8,9,10,16]]]],14],15],[[]],[[]],[[]],[[]],[17,[[6,[[0,[8,9,10]]]]]],[1],[3],[[[5,[10]]]],[[]],[[]],[[]],[[]],[1,12],[[[6,[[0,[8,9,10]]]]],12],0,[1,2],[1,2],[[[6,[[0,[8,9,10]]]]],2],[1],[1],[[],[[1,[3]]]],[[],[[6,[[0,[8,9,10]]]]]],[[[6,[[0,[8,9,10]]]]],[[18,[[0,[8,9,10]]]]]],[1,18],[1,18],[[[6,[[0,[8,9,10]]]]],[[18,[[0,[8,9,10]]]]]],[[]],[3],[5],[1,18],[[]],[3],[5],[1,18],[[[6,[[0,[8,9,10]]]],[0,[8,9,10]]]],[[]],[3],[5],[1],[[]],[3],[5],[1],[1],[1],[[[6,[[0,[8,9,10]]]],[0,[8,9,10]]]],0,[1,2],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],1]],"p":[[3,"DoubleHeap"],[15,"usize"],[3,"Nop"],[8,"Clone"],[3,"Sum"],[3,"RemovableHeap"],[3,"Vec"],[8,"Copy"],[8,"Ord"],[8,"Hash"],[8,"Default"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"IntoIterator"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"Handler"]]},\
"hld":{"doc":"重軽分解をします。","t":"DDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Hld","IterE","IterV","adjacent_toward","between","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","child","clone","clone","clone","clone_into","clone_into","clone_into","default","dist","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","head","into","into","into","into_iter","into_iter","is_adjacent","is_ancestor_of","iter_e","iter_v","lca","new","next","next","ord","parent","size","time","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["hld","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["重軽分解","","","<code>x</code> の隣接頂点のうち、<code>toward</code> …","3 つの頂点番号 <code>a</code>, <code>b</code>, <code>c</code> について、<code>b</code> が <code>a</code> と <code>c</code> …","","","","","","","親を消したグラフを返します。","","","","","","","","2 …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","頂点番号から、Heavy path …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","頂点 <code>u</code>, <code>v</code> が隣接頂点であれば <code>true</code>…","<code>p</code> が <code>u</code> の祖先であれば <code>true</code>、さもなくば <code>false</code> …","<code>Self::iter_v</code> とほぼ同様ですが、LCA …","2 つの頂点番号から、その間のパスを Heavy …","2 つの頂点番号から、LCA …","HLD …","","","…","…","…","…","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,4,5,1,4,5,1,1,4,5,1,4,5,1,1,1,4,5,1,4,5,1,4,5,1,4,5,1,1,4,5,4,5,1,1,1,1,1,1,4,5,1,1,1,1,1,4,5,1,4,5,1,4,5,1,4,5],"f":[0,0,0,[[1,2,2],2],[[1,2,2,2],3],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1,1],[4,4],[5,5],[[]],[[]],[[]],[[],1],[[1,2,2],2],[[1,1],3],[[4,4],3],[[5,5],3],[[1,6],7],[[4,6],7],[[5,6],7],[[]],[[]],[[]],[1],[4],[5],[1],[[]],[[]],[[]],[[]],[[]],[[1,2,2],3],[[1,2,2],3],[[1,2,2],5],[[1,2,2],4],[[1,2,2],2],[2,1],[4,8],[5,8],[1],[1],[1],[1],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10]],"p":[[3,"Hld"],[15,"usize"],[15,"bool"],[3,"IterV"],[3,"IterE"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"hopkarp":{"doc":"Finds a maximum cardinality bipartite matching by …","t":"DMLLLLMLLLMLLFLMMLLLL","n":["HopkarpResult","backward","borrow","borrow_mut","clone","clone_into","count","default","eq","fmt","forward","from","hash","hopkarp","into","left","right","to_owned","try_from","try_into","type_id"],"q":["hopkarp","","","","","","","","","","","","","","","","","","","",""],"d":["Summary of the result of Hopcroft―Karp’s algorithm.","","","","","","Cardinality of a maximum cardinality bipartite matching.","","","","","Returns the argument unchanged.","","Takes a <em>forward</em> adjacency list and the length of the right …","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[]],0,[[],1],[[1,1],2],[[1,3],4],0,[[]],[1],[5,1],[[]],0,0,[[]],[[],6],[[],6],[[],7]],"p":[[3,"HopkarpResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"hungarian":{"doc":"Solve an assignment problem by Hungarian algorithm.","t":"DIMLLLLLLMLFKLMMLLLLMK","n":["HungarianResult","Value","backward","borrow","borrow_mut","clone","clone_into","eq","fmt","forward","from","hungarian","infinity","into","left","right","to_owned","try_from","try_into","type_id","value","zero"],"q":["hungarian","","","","","","","","","","","","","","","","","","","","",""],"d":["A value object to represent the optimal solution of an …","A trait to adapt a value type to <code>hungarian</code>","Takes the second component of a match and returns the …","","","","","","","Takes the first component of a match and returns the …","Returns the argument unchanged.","See the crate level documentation","","Calls <code>U::from(self)</code>.","A left half of an optimal potential.","A right half of an optimal potential.","","","","","The value of an optimal solution.",""],"i":[0,0,3,3,3,3,3,3,3,3,3,0,2,3,3,3,3,3,3,3,3,2],"f":[0,0,0,[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[4,2]]]],3],5],[[[3,[[0,[6,2]]]],7],8],0,[[]],[[],[[3,[2]]]],[[]],[[]],0,0,[[]],[[],9],[[],9],[[],10],0,[[]]],"p":[[8,"Clone"],[8,"Value"],[3,"HungarianResult"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"input":{"doc":"","t":"IDLLKLFFFLLLL","n":["ForceFromStr","Lazy","borrow","borrow_mut","force_parse","from","input","input_array","input_vec","into","try_from","try_into","type_id"],"q":["input","","","","","","","","","","","",""],"d":["","","","","","Returns the argument unchanged.","Read a line from stdin and parse to T.","Read a line from stdin and parse to [T; N].","Read a line from stdin and parse to Vec.","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,6,6,2,6,0,0,0,6,6,6,6],"f":[0,0,[[]],[[]],[1],[[]],[[],2],[[]],[[],[[3,[2]]]],[[]],[[],4],[[],4],[[],5]],"p":[[15,"str"],[8,"ForceFromStr"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Lazy"]]},\
"inversion_number":{"doc":"Calculates the number of inversions.","t":"F","n":["inversion_number"],"q":["inversion_number"],"d":["Takes a sequence of numbers in <code>0..value_limit</code> and returns …"],"i":[0],"f":[[1,2]],"p":[[15,"usize"],[15,"u64"]]},\
"itermore":{"doc":"An extension trait of <code>Iterator</code>","t":"DIDDDLLLLLLLLFKLLLLLLLLLLLLLLLLFKLLLLFKLLLLLLLLFKLLLLLLLLLLLLLLLL","n":["ClosedPrefixSum","IterMore","MaxDecrease","MaxIncrease","OpenPrefixSum","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","closed_prefix_sum","closed_prefix_sum","closed_prefix_sum","closed_prefix_sum","closed_prefix_sum","closed_prefix_sum","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_iter","max_decrease","max_decrease","max_decrease","max_decrease","max_decrease","max_decrease","max_increase","max_increase","max_increase","max_increase","max_increase","max_increase","next","next","next","next","open_prefix_sum","open_prefix_sum","open_prefix_sum","open_prefix_sum","open_prefix_sum","open_prefix_sum","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["itermore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Return value of <code>closed_prefix_sum</code>.","An extension trait of <code>Iterator</code>","Return value of <code>max_decrease</code>.","Return value of <code>max_increase</code>.","Return value of <code>open_prefix_sum</code>.","","","","","","","","","Returns $\\\\sum \\\\left \\\\lbrace a _ j \\\\vert 0 \\\\le j \\\\le i …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns $\\\\max \\\\left \\\\lbrace a _ j \\\\vert 0 \\\\le j \\\\le i …","","","","","","Returns $a _ i - \\\\min \\\\left \\\\lbrace a _ j \\\\vert 0 \\\\le j …","","","","","","","","","","Returns $\\\\sum \\\\left \\\\lbrace a _ j \\\\vert 0 \\\\le j \\\\lt i …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,2,4,3,6,2,4,3,0,10,6,2,4,3,6,2,4,3,6,2,4,3,6,2,4,3,0,10,6,2,4,3,0,10,6,2,4,3,6,2,4,3,0,10,6,2,4,3,6,2,4,3,6,2,4,3,6,2,4,3],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,3],[[],3],[[],3],[[],3],[[],3],[[],3],[1,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[6,[5]]],7],[[[2,[5]]],7],[[[4,[5]]],7],[[[3,[5]]],7],[1,6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9]],"p":[[8,"IntoIterator"],[3,"ClosedPrefixSum"],[3,"MaxDecrease"],[3,"MaxIncrease"],[8,"Iterator"],[3,"OpenPrefixSum"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"IterMore"]]},\
"lagrange":{"doc":"ラグランジュ補完","t":"FFFF","n":["evaluate","interpolate","interpolate_first_n","interpolate_one_point_first_n"],"q":["lagrange","","",""],"d":["多項式の係数から 1 …","x 座標の異なるような N 点の評価から、N - 1 …","0..N の評価から、N - 1 …","0..N での評価から決まる N - 1 …"],"i":[0,0,0,0],"f":[[[[2,[1]]],[[2,[1]]]],[[],[[3,[[2,[1]]]]]],[[],[[3,[[2,[1]]]]]],[[[2,[1]]],[[2,[1]]]]],"p":[[8,"Mod"],[3,"Fp"],[3,"Vec"]]},\
"lazy_segbeats":{"doc":"","t":"IDLLLLLLLLLLKKKLLLLLLLLLK","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","eq","fmt","from","into","max_value","min_value","mul_u32","new","query_max","query_min","query_sum","range_add","to_owned","try_from","try_into","type_id","zero"],"q":["lazy_segbeats","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,1],"f":[0,0,[[]],[[]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[3]]],[[2,[3]]]],[[]],[[[2,[6]],2],7],[[[2,[8]],9],10],[[]],[[]],[[]],[[]],[11],[[],[[2,[1]]]],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[]],[[],12],[[],12],[[],13],[[]]],"p":[[8,"Elm"],[3,"Segbeats"],[8,"Clone"],[15,"usize"],[8,"RangeBounds"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"lazy_segtree":{"doc":"","t":"DDLMLLLLLLMLLLLLLMMLLLLLMMLLLLLLLL","n":["LazySegtree","LazySegtreeBuilder","apply","apply","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compose","finish","fmt","fold","from","from","get","id_action","identity","into","into","into_vec","modify","new","op","slice","to_owned","to_vec","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["lazy_segtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,1,5,5,1,5,1,1,1,5,5,1,1,5,1,1,5,5,5,1,1,1,1,5,5,1,1,5,1,5,1,5,1],"f":[0,0,[[1,[3,[2]]]],0,[[]],[[]],[[]],[[]],[[[1,[4,4,4,4,4,4,4]]],[[1,[4,4,4,4,4,4,4]]]],[[]],0,[5,1],[[1,6],7],[[1,[3,[2]]]],[[]],[[]],[[1,2]],0,0,[[]],[[]],[1,8],[[1,2,9]],[[],1],0,0,[[]],[1,8],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"p":[[3,"LazySegtree"],[15,"usize"],[8,"RangeBounds"],[8,"Clone"],[3,"LazySegtreeBuilder"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[8,"FnMut"],[4,"Result"],[3,"TypeId"]]},\
"lg":{"doc":"Provides a macro lg","t":"O","n":["lg"],"q":["lg"],"d":[""],"i":[0],"f":[0],"p":[]},\
"lg_bools":{"doc":"Formatter of iterator of <code>bool</code>.","t":"DLLLFLLLLL","n":["S","borrow","borrow_mut","fmt","format","from","into","try_from","try_into","type_id"],"q":["lg_bools","","","","","","","","",""],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,1,1,1,0,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2],3],[[],1],[[]],[[]],[[],4],[[],4],[[],5]],"p":[[3,"S"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"lg_max":{"doc":"lg library to quiet <code>{integer}::MAX</code> down to <code>&quot;*&quot;</code>.","t":"DLLLLLLLL","n":["QuietMax","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id"],"q":["lg_max","","","","","","","",""],"d":["A Wrapper to quiet <code>{integer}::MAX</code> down to <code>&quot;*&quot;</code>.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]],3],4],[[]],[[]],[[],5],[[],5],[[],6]],"p":[[8,"Debug"],[3,"QuietMax"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"lin_ineq":{"doc":"一次不等式を解きます。","t":"DSSISLLLLLKLLLLLLLLLLLLLLFFLLLL","n":["Interval","MAX","MIN","Signed","ZERO","borrow","borrow_mut","clone","clone_into","contains","div_euclid","empty","fmt","from","full","intersection","into","is_empty","mul","mul","mul","mul","normalize","product","product","solve","solve_squeeze","to_owned","try_from","try_into","type_id"],"q":["lin_ineq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["閉区間を表す、<code>[T; 2]</code> …","","","符号付き整数です。","","","","","","…","","標準形の空区間を返します。具体的には、…","<code>Interval</code> 型のオブジェクトを human readable …","Returns the argument unchanged.","全区間を返します。具体的には、<code>[MIN, MAX]</code> …","区間の交差を計算します。","Calls <code>U::from(self)</code>.","空区間であるかどうかを判定します。","<code>intersection()</code> を呼び出します。","<code>intersection()</code> を呼び出します。","<code>intersection()</code> を呼び出します。","<code>intersection()</code> を呼び出します。","…","<code>intersection()</code> で畳み込みます。","<code>intersection()</code> で畳み込みます。","基本形 ax &lt;= b","挟み撃ち形 l &lt;= ax + b &lt;= r","","","",""],"i":[0,3,3,0,3,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2],"f":[0,0,0,0,0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[[2,[3]],3],4],[[]],[[],[[2,[3]]]],[[[2,[[0,[5,3]]]],6],7],[[]],[[],[[2,[3]]]],[[[2,[3]],[2,[3]]],[[2,[3]]]],[[]],[[[2,[3]]],4],[[2,2]],[[[2,[3]],[2,[3]]]],[[[2,[3]],[2,[3]]]],[[2,[2,[3]]]],[[[2,[3]]],[[2,[3]]]],[8,[[2,[3]]]],[8,[[2,[3]]]],[[3,3],[[2,[3]]]],[[3,3,[2,[3]]],[[2,[3]]]],[[]],[[],9],[[],9],[[],10]],"p":[[8,"Clone"],[3,"Interval"],[8,"Signed"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[4,"Result"],[3,"TypeId"]]},\
"low_link":{"doc":"Low-link を計算します。","t":"DLLLLLLLLLLLLLLLLLLLLL","n":["LowLink","add_edge","biconnected_components","borrow","borrow_mut","build","clone","clone_into","default","eq","fmt","from","hash","into","is_articulation_point","is_bridge_unchecked","new","to_owned","try_from","try_into","two_edge_components","type_id"],"q":["low_link","","","","","","","","","","","","","","","","","","","","",""],"d":["Low-link を計算する構造体です。","…","…","","","ビルドします。","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","頂点 <code>x</code> が関節点なら <code>true</code> を返します。","頂点 <code>x</code>, <code>y</code> …","未ビルドの空グラフを構築します。","","","","…",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2,2]],[1,[[3,[3]]]],[[]],[[]],[1],[1,1],[[]],[[],1],[[1,1],4],[[1,5],6],[[]],[1],[[]],[[1,2],4],[[1,2,2],4],[2,1],[[]],[[],7],[[],7],[1,[[3,[[3,[2]]]]]],[[],8]],"p":[[3,"LowLink"],[15,"usize"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"make_graph":{"doc":"…","t":"FFFFFFFFFFFF","n":["array_make_directed","array_make_directed_weighted","array_make_undirected","array_make_undirected_weighted","make_directed_by","make_directed_weighted_by","make_undirected_by","make_undirected_weighted_by","tuple_make_directed","tuple_make_directed_weighted","tuple_make_undirected","tuple_make_undirected_weighted"],"q":["make_graph","","","","","","","","","","",""],"d":["<code>[u, v]</code> …","<code>([u, v], w)</code> …","<code>[u, v]</code> …","<code>([u, v], w)</code> …","…","…","…","…","<code>(u, v)</code> …","<code>(u, v, w)</code> …","<code>(u, v)</code> …","<code>(u, v, w)</code> …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0],"f":[[1,[[2,[[2,[1]]]]]],[1,[[2,[2]]]],[1,[[2,[[2,[1]]]]]],[1,[[2,[2]]]],[[1,3],[[2,[[2,[1]]]]]],[[1,3],[[2,[2]]]],[[1,3],[[2,[[2,[1]]]]]],[[1,3],[[2,[2]]]],[1,[[2,[[2,[1]]]]]],[1,[[2,[2]]]],[1,[[2,[[2,[1]]]]]],[1,[[2,[2]]]]],"p":[[15,"usize"],[3,"Vec"],[8,"Fn"]]},\
"max_flow":{"doc":"Dinic 法で最大流を求めます。","t":"IDLLLKLLLLLLLLK","n":["FlowTrait","MaxFlow","borrow","borrow_mut","from","infinity","insert","insert_from_slice","into","run","try_from","try_into","type_id","with_size_source_sink","zero"],"q":["max_flow","","","","","","","","","","","","","",""],"d":["流量型になれるものです。","Dinic 法で最大流を求めます。","","","Returns the argument unchanged.","<code>std::$ty::MAX</code> を返します。","辺を挿入です。","<code>insert</code> をたくさん呼びます。","Calls <code>U::from(self)</code>.","実行します。","","","","構築です。","<code>0</code> を返します。"],"i":[0,0,2,2,2,1,2,2,2,2,2,2,2,2,1],"f":[0,0,[[]],[[]],[[]],[[]],[[[2,[1]],3,3,1]],[[[2,[1]]]],[[]],[[[2,[1]]],1],[[],4],[[],4],[[],5],[[3,3,3],[[2,[1]]]],[[]]],"p":[[8,"FlowTrait"],[3,"MaxFlow"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"mincost_flow":{"doc":"Dijkstra …","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Edge","MinCostFlow","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","flow","fmt","fmt","from","from","get_edge","hash","hash","into","into","new","slope","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["mincost_flow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>MinCostFlow::get_edge</code> の戻り値型","Dijkstra …","辺を追加します。","","","","","","","","","","","","","解きます","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code> 番目に挿入した辺を取得します。","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","空グラフを構築します。","解きます","","","","","","","",""],"i":[0,0,1,4,1,4,1,4,1,4,1,4,1,4,1,1,4,1,4,1,1,4,1,4,1,1,1,4,1,4,1,4,1,4,1],"f":[0,0,[[1,2,2,3,3],2],[[]],[[]],[[]],[[]],[4,4],[1,1],[[]],[[]],[[],4],[[],1],[[4,4],5],[[1,1],5],[[1,2,2,3]],[[4,6],7],[[1,6],7],[[]],[[]],[[1,2],4],[4],[1],[[]],[[]],[2,1],[[1,2,2,3],8],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"p":[[3,"MinCostFlow"],[15,"usize"],[15,"i64"],[3,"Edge"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"monotone_minima":{"doc":"Monotone minima のアルゴリズムと、それによる …","t":"FFFFFF","n":["concave_maxplus_convolution","convex_minplus_convolution","monotone_maxima","monotone_maxima_by","monotone_minima","monotone_minima_by"],"q":["monotone_minima","","","","",""],"d":["concave な列に対して max-plus convolution …","convex な列に対して min-plus convolution …","行列 <code>f(i, j)</code> を受け取って、monotone maxima …","行ごとのセル比較 <code>cmp(i, j, k)</code> …","行列 <code>f(i, j)</code> を受け取って、monotone minima …","行ごとのセル比較 <code>cmp(i, j, k)</code> …"],"i":[0,0,0,0,0,0],"f":[[[],1],[[],1],[[2,2,3],[[1,[2]]]],[[2,2,[0,[4,5]]],[[1,[2]]]],[[2,2,3],[[1,[2]]]],[[2,2,[0,[4,5]]],[[1,[2]]]]],"p":[[3,"Vec"],[15,"usize"],[8,"Fn"],[8,"FnMut"],[8,"Copy"]]},\
"newton":{"doc":"","t":"FF","n":["sqrt","triangular_root"],"q":["newton",""],"d":["",""],"i":[0,0],"f":[[1,1],[1,1]],"p":[[15,"u64"]]},\
"next_permutation":{"doc":"スライスの next-permutation …","t":"FFFFFFF","n":["iter_by_next","next_permutation","next_permutation_by","next_permutation_by_key","permutations","permutations_by","permutations_by_key"],"q":["next_permutation","","","","","",""],"d":["遷移関数からイテレータを作ります。","要素の <code>Ord</code> …","…","","…","…","要素の <code>Ord</code> による比較により、 …"],"i":[0,0,0,0,0,0,0],"f":[[1,2],[[],3],[1,3],[[],3],[4,2],[4,2],[4,2]],"p":[[8,"FnMut"],[8,"Iterator"],[4,"Option"],[3,"Vec"]]},\
"ngtio":{"doc":"標準入出力を支援します。","t":"AFFQQQIIIIQDLLLLLLKKKLLLKLLL","n":["prelude","with_stdin","with_str","LeafTuple","Output","Output","Parser","ParserTuple","RawTuple","Token","Tuple","Usize1","borrow","borrow_mut","from","into","leaf","leaf","leaf_tuple","parse","parse","parse","try_from","try_into","tuple","type_id","vec","vec"],"q":["ngtio","","","ngtio::prelude","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["たいせつ〜な〜も〜の〜は〜〜〜 …","標準入力を受け取る <code>Tokenizer</code> を構築します。","文字列スライスを管理する <code>Tokenizer</code> …","<code>Parser</code> トレイトを実装した型です。","パース結果の型です。","パース結果の型です。","…","<code>Parser</code> …","<code>Token</code> …","主にプリミティブ型のパースをします。…","<code>Parser</code> トレイトを実装した型です。","<code>usize</code> 型にパースしたあとで <code>1</code> を引きます。","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","複合型のパースができるように、<code>Leaf</code> …","複合型のパースができるように、<code>Leaf</code> …","<code>Parser</code> トレイトを実装した型に変換します。","パースをします。","パースをします。","","","","<code>Parser</code> トレイトを実装した型に変換します。","","<code>Vec</code> のパースのために、<code>VecLen</code> に包みます。","<code>Vec</code> のパースのために、<code>VecLen</code> に包みます。"],"i":[0,0,0,7,8,9,0,0,0,0,10,0,11,11,11,11,8,8,7,8,9,11,11,11,10,11,9,9],"f":[0,[[],[[0,[[2,[1]]]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[]],[3],0,[3],[[],4],[[],4],[[]],[[],5],0,0],"p":[[3,"Stdin"],[3,"BufReader"],[15,"str"],[4,"Result"],[3,"TypeId"],[15,"usize"],[8,"RawTuple"],[8,"Token"],[8,"Parser"],[8,"ParserTuple"],[3,"Usize1"]]},\
"not_nan":{"doc":"ordered_float::NotNan の劣化版です。","t":"IDLLLLLLLKLLLLLLLLLL","n":["Float","NotNaN","borrow","borrow_mut","clone","clone_into","cmp","default","eq","float_is_nan","fmt","from","from_float","into","into_inner","partial_cmp","to_owned","try_from","try_into","type_id"],"q":["not_nan","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[2]],[3,[2]]],4],[[],[[3,[[0,[5,2]]]]]],[[[3,[[0,[6,2]]]],3],7],[[],7],[[[3,[[0,[8,2]]]],9],10],[[]],[2,[[3,[2]]]],[[]],[[[3,[2]]],2],[[[3,[2]],[3,[2]]],[[11,[4]]]],[[]],[[],12],[[],12],[[],13]],"p":[[8,"Clone"],[8,"Float"],[3,"NotNaN"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"numeric_search":{"doc":"Run classic binary or exponential search on integer or …","t":"ISSSSSSSIISSSFFFFFK","n":["Float","INFINITY","MAX","MIN","NEG_INFINITY","ONE","ONE","ONE","Signed","Unsigned","ZERO","ZERO","ZERO","binary_search_signed","binary_search_unsigned","exp_search_float","exp_search_signed","exp_search_unsigned","sqrt"],"q":["numeric_search","","","","","","","","","","","","","","","","","",""],"d":["Floating pont number.","$\\\\infty$","","","$-\\\\infty$","$1$","$1$","","Signed integers.","Unsigned integers.","$0$","$0$","","Run a binary search search on signed numbers.","Run a binary search search on unsigned numbers.","Run an exponential search on floating point numbers.","Run an exponential search on unsigned numbers.","Run an exponential search on unsigned numbers.","$x \\\\mapsto \\\\sqrt x$"],"i":[0,4,1,1,4,4,3,1,0,0,4,3,1,0,0,0,0,0,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,2],1],[[3,3,2],3],[2,4],[2,[[5,[1]]]],[2,[[5,[3]]]],[[]]],"p":[[8,"Signed"],[8,"FnMut"],[8,"Unsigned"],[8,"Float"],[4,"Option"]]},\
"open":{"doc":"","t":"F","n":["open"],"q":["open"],"d":[""],"i":[0],"f":[[[1,[2,[1]]],[[3,[1]]]]],"p":[[15,"usize"],[8,"RangeBounds"],[3,"Range"]]},\
"partially_persistent_union_find":{"doc":"…","t":"DLLLLLLLLLLLLLLLLL","n":["PartiallyPersistentUnionFind","borrow","borrow_mut","clone","clone_into","find","fmt","from","into","new","same","size","time","to_owned","try_from","try_into","type_id","union"],"q":["partially_persistent_union_find","","","","","","","","","","","","","","","","",""],"d":["…","","","","","時刻 time の代表の頂点番号を返します。","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","新しくデータ構造を構築します。","時刻 time に i と j …","時刻 time の i …","2 頂点が結合された時刻を返します。","","","","","…"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,2,2],2],[[1,3],4],[[]],[[]],[2,1],[[1,2,2,2],5],[[1,2,2],2],[[1,2,2],[[6,[2]]]],[[]],[[],7],[[],7],[[],8],[[1,2,2,2],5]],"p":[[3,"PartiallyPersistentUnionFind"],[15,"usize"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"poly":{"doc":"<code>std::ops</code> を利用した多項式のナイーブな計算","t":"IDDLLLLLLLLLLLLFLFFLLLLLLLLL","n":["Poly","PolyAdd","PolySub","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_iter","into_iter","next","next","poly_add","poly_add","poly_mul","poly_sub","poly_sub","size_hint","size_hint","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["poly","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["自由関数 <code>poly_add</code>, <code>poly_sub</code> を呼び出します。","<code>poly_add</code> …","<code>poly_sub</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","足し算","","掛け算","引き算","","","","","","","","",""],"i":[0,0,0,1,3,1,3,1,3,1,3,1,3,1,3,0,13,0,0,13,1,3,1,3,1,3,1,3],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,2],[[4,4],1],[4,1],[5,[[10,[[0,[6,7,8,9]]]]]],[[4,4],3],[4,3],[1],[3],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[3,"PolyAdd"],[4,"Option"],[3,"PolySub"],[8,"IntoIterator"],[8,"Fn"],[8,"AddAssign"],[8,"Mul"],[8,"Debug"],[8,"Copy"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[8,"Poly"]]},\
"prefix_sum":{"doc":"累積和です。","t":"DLLLLLLLLLLLLLLLLLL","n":["PrefixSum","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","is_empty","len","push","range","sum","to_owned","try_from","try_into","type_id","with_zero"],"q":["prefix_sum","","","","","","","","","","","","","","","","","",""],"d":["本体です。","","","","","","Returns the argument unchanged.","<code>i</code> 番目を取ります。","Calls <code>U::from(self)</code>.","空であることです。","長さです。中身の長さは <code>self.len() + 1</code> です。","挿入します。","範囲を <code>Vec</code> に集めます。","和を取ります。","","","","","コンストラクタです。引数は零元です。"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,2],3],[[]],[[1,4]],[[]],[1,5],[1,4],[1],[[1,[6,[4]]],7],[[1,[6,[4]]]],[[]],[[],8],[[],8],[[],9],[[],1]],"p":[[3,"PrefixSum"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"bool"],[8,"RangeBounds"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"radix_heap":{"doc":"CAUTION: Failing in tests!","t":"DLLLLLLLLLLLLLLLL","n":["RadixHeap","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","into","new","pop","push","to_owned","try_from","try_into","type_id"],"q":["radix_heap","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[],[[2,[3]]]],[[[2,[4]],2],5],[[[2,[3]],6],7],[[]],[[]],[[],2],[2,8],[[2,9]],[[]],[[],10],[[],10],[[],11]],"p":[[8,"Clone"],[3,"RadixHeap"],[8,"Debug"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"randtools":{"doc":"","t":"DDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DistinctTwo","LogUniform","NonEmptySubRange","SimpleDigraph","SimpleDigraphEdges","SimpleGraph","SimpleGraphEdges","SubRange","Tree","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","sample","sample","sample","sample","sample","sample","sample","sample","sample","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["randtools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11,1,4,5,6,7,8,9,10,11],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],3],[[4,2],3],[[5,2],3],[[6,2],3],[[7,2],3],[[8,2],3],[[9,2],3],[[10,2],3],[[11,2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,12],[4],[5,[[13,[12]]]],[6,[[13,[12]]]],[7,[[14,[[14,[12]]]]]],[8,[[14,[[14,[12]]]]]],[9,[[14,[[14,[12]]]]]],[10,14],[11,14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"LogUniform"],[3,"Formatter"],[6,"Result"],[3,"DistinctTwo"],[3,"SubRange"],[3,"NonEmptySubRange"],[3,"Tree"],[3,"SimpleGraph"],[3,"SimpleDigraph"],[3,"SimpleGraphEdges"],[3,"SimpleDigraphEdges"],[15,"usize"],[3,"Range"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"rational":{"doc":"","t":"DILLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLKLLLLLLLLLLLLLLK","n":["Rational","Signed","add","add","add","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","decompose","default","div","div","div","div","div_assign","eq","fmt","from","from_str","generic_abs","generic_signum","into","into_f64","mul","mul","mul","mul","mul_assign","neg","new","one","partial_cmp","product","product","sub","sub","sub","sub","sub_assign","sum","sum","to_owned","try_from","try_into","type_id","zero"],"q":["rational","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2],"f":[0,0,[[1,[1,[2]]]],[[[1,[2]],[1,[2]]],[[1,[2]]]],[[1,1]],[[[1,[2]],[1,[2]]]],[[[1,[2]],[1,[2]]]],[[]],[[]],[[[1,[[0,[3,2]]]]],[[1,[[0,[3,2]]]]]],[[]],[[[1,[2]],[1,[2]]],4],[[[1,[2]]]],[[],[[1,[[0,[5,2]]]]]],[[[1,[2]],[1,[2]]]],[[[1,[2]],[1,[2]]],[[1,[2]]]],[[1,[1,[2]]]],[[1,1]],[[[1,[2]],[1,[2]]]],[[[1,[2]],[1,[2]]],6],[[[1,[2]],7],8],[[]],[9,[[10,[[1,[2]]]]]],[[]],[[]],[[]],[[[1,[2]]],11],[[1,[1,[2]]]],[[[1,[2]],[1,[2]]],[[1,[2]]]],[[[1,[2]],[1,[2]]]],[[1,1]],[[[1,[2]],[1,[2]]]],[[[1,[2]]]],[[2,2],[[1,[2]]]],[[]],[[[1,[2]],[1,[2]]],[[12,[4]]]],[13,[[1,[2]]]],[13,[[1,[2]]]],[[[1,[2]],[1,[2]]]],[[[1,[2]],[1,[2]]],[[1,[2]]]],[[1,[1,[2]]]],[[1,1]],[[[1,[2]],[1,[2]]]],[13,[[1,[2]]]],[13,[[1,[2]]]],[[]],[[],10],[[],10],[[],14],[[]]],"p":[[3,"Rational"],[8,"Signed"],[8,"Clone"],[4,"Ordering"],[8,"Default"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Result"],[15,"f64"],[4,"Option"],[8,"Iterator"],[3,"TypeId"]]},\
"rbtree":{"doc":"赤黒木","t":"DDIDQQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLL","n":["Iter","Nop","Op","RbTree","Summary","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","delete","eq","fmt","fold","from","from","from","from_iter","get","hash","insert","into","into","into","into_iter","is_empty","iter","len","merge","merge3","new","next","op","op","partition_point","push_back","push_front","singleton","split","split3","summarize","summarize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["rbtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>iter</code> の返す型","…","…","赤黒木です。","中間ノードに持たせる値","葉に持たせる値","","","","","","","","","","<code>i</code> 番目の Nil …","","","<code>range</code> の範囲で畳み込みます。","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","…","<code>i</code> 番目の要素をコピーして返します。","","<code>i</code> 番目に新しい Nil ノードを挿入します。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","空ならば <code>true</code>、さもなくば <code>false</code> …","…","長さ、すなわち Nil …","2 つの赤黒木をマージします。","3 つの赤黒木をマージします。","空の赤黒木を生成します。","","演算","","中間ノードの情報で二分探索します。","新しいノードを末尾に挿入します。","新しいノードを先頭に挿入します。","Nil …","<code>i</code> 番目で分割します。","<code>l, r</code> 番目で 3 つに分割します。","葉の値から中間ノードの値への変換","","","","","","","","","","",""],"i":[0,0,0,0,2,2,3,17,14,3,17,14,3,3,3,3,3,3,3,3,17,14,3,3,3,3,3,17,14,14,3,3,3,3,3,3,14,2,17,3,3,3,3,3,3,2,17,3,3,17,14,3,17,14,3,17,14],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]],[[3,[1,2]]]],[[]],[[],[[3,[2]]]],[[[3,[2]],4]],[[[3,[5,2]],[3,[5,2]]],6],[[[3,[7,2]],8],9],[[[3,[2]],[10,[4]]],11],[[]],[[]],[[]],[12,[[3,[2]]]],[[[3,[2]],4]],[[[3,[13,2]]]],[[[3,[2]],4]],[[]],[[]],[[]],[[]],[[[3,[2]]],6],[[[3,[2]]],[[14,[2]]]],[[[3,[2]]],4],[[[3,[2]],[3,[2]]],[[3,[2]]]],[[[3,[2]],[3,[2]],[3,[2]]],[[3,[2]]]],[[],[[3,[2]]]],[[[14,[2]]],11],[[]],[[]],[[[3,[2]]],4],[[[3,[2]]]],[[[3,[2]]]],[[],[[3,[2]]]],[[[3,[2]],4]],[[[3,[2]],4,4]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16]],"p":[[8,"Clone"],[8,"Op"],[3,"RbTree"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"RangeBounds"],[4,"Option"],[8,"IntoIterator"],[8,"Hash"],[3,"Iter"],[4,"Result"],[3,"TypeId"],[3,"Nop"]]},\
"reverse":{"doc":"std::cmp::Reverse です。","t":"DLLLLLLLLLLLLLLLLLLLL","n":["Reverse","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","ge","gt","hash","into","le","lt","partial_cmp","to_owned","try_from","try_into","type_id"],"q":["reverse","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[[2,[3]],[2,[3]]],4],[[],[[2,[5]]]],[[[2,[6]],2],7],[[[2,[8]],9],10],[[]],[[[2,[11]],[2,[11]]],7],[[[2,[11]],[2,[11]]],7],[[[2,[12]]]],[[]],[[[2,[11]],[2,[11]]],7],[[[2,[11]],[2,[11]]],7],[[[2,[11]],[2,[11]]],[[13,[4]]]],[[]],[[],14],[[],14],[[],15]],"p":[[8,"Clone"],[3,"Reverse"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"PartialOrd"],[8,"Hash"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"scc":{"doc":"このライブラリを使える問題","t":"DLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Scc","add_edge","borrow","borrow_mut","build","clone","clone_into","cmp_count","cmp_of","cmp_ofs","default","eq","fmt","from","g","hash","into","is_empty","len","new","ord","quotient_graph","quotient_set","rg","to_owned","try_from","try_into","type_id"],"q":["scc","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["本体です。","【Require: 未ビルド】 辺 (from, to) …","","","【Require: 未ビルド】 ビルドします。","","","【Require: ビルド済み】 …","【Require: ビルド済み】 頂点 <code>x</code> …","【Require: ビルド済み】 …","","","","Returns the argument unchanged.","正向きのグラフの隣接リストを返します。","","Calls <code>U::from(self)</code>.","管理しているグラフが空グラフならば、<code>true</code> …","管理しているグラフの頂点数を返します。","頂点数 <code>n</code> …","【Require: ビルド済み】 …","【Require: ビルド済み】 …","【Require: ビルド済み】 …","逆向きのグラフの隣接リストを返します。","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2,2]],[[]],[[]],[1],[1,1],[[]],[1,2],[[1,2],2],[1],[[],1],[[1,1],3],[[1,4],5],[[]],[1],[1],[[]],[1,3],[1,2],[2,1],[1],[1,[[6,[[6,[2]]]]]],[1,[[6,[[6,[2]]]]]],[1],[[]],[[],7],[[],7],[[],8]],"p":[[3,"Scc"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"segbeats":{"doc":"","t":"IDLLLLLLLLLLKKKLLLLLLLLK","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","eq","fmt","from","into","max_value","min_value","mul_u32","new","query_max","query_min","query_sum","to_owned","try_from","try_into","type_id","zero"],"q":["segbeats","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,1],"f":[0,0,[[]],[[]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[3]]],[[2,[3]]]],[[]],[[[2,[6]],2],7],[[[2,[8]],9],10],[[]],[[]],[[]],[[]],[11],[[],[[2,[1]]]],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[]],[[],12],[[],12],[[],13],[[]]],"p":[[8,"Elm"],[3,"Segbeats"],[8,"Clone"],[15,"usize"],[8,"RangeBounds"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"segbeats_task3":{"doc":"","t":"IDLLLLLLLLLLLKKKLLLLLLLLLK","n":["Elm","Segbeats","borrow","borrow_mut","change_max","change_min","clone","clone_into","count_changes","eq","fmt","from","into","max_value","min_value","mul_u32","new","query_max","query_min","query_sum","range_add","to_owned","try_from","try_into","type_id","zero"],"q":["segbeats_task3","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,1],"f":[0,0,[[]],[[]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[[2,[3]]],[[2,[3]]]],[[]],[[[2,[1]],[5,[4]]],6],[[[2,[7]],2],8],[[[2,[1]],9],10],[[]],[[]],[[]],[[]],[11],[[],[[2,[1]]]],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[5,[4]]],1],[[[2,[1]],[0,[3,[5,[4]]]],1]],[[]],[[],12],[[],12],[[],13],[[]]],"p":[[8,"Elm"],[3,"Segbeats"],[8,"Clone"],[15,"usize"],[8,"RangeBounds"],[15,"u64"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"segtree":{"doc":"セグメント木です。","t":"DIDQLLLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLL","n":["Entry","Ops","Segtree","Value","as_mut","as_ref","as_slice","as_slice_mut","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","drop","entry","fmt","fold","from","from","from","from_iter","identity","index","into","into","is_empty","len","max_left","max_right","new","op","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["segtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>Segtree</code> のエントリー型です。","<code>Segtree</code> に使う演算です。","セグツリー","値型","","","表している配列をスライスで返します。","…","","","","","","","","要素の可変ハンドラを返します。","","与えられた範囲で畳み込みます。","Returns the argument unchanged.","","Returns the argument unchanged.","","単位元","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","表している配列が空であるときに <code>true</code> …","表している配列を返します。","命題の成り立つ最大の区間を探します。","命題の成り立つ最大の区間を探します。","<code>IntoIterator</code> により <code>ExactSizeIterator</code> …","積","","","","","",""],"i":[0,0,0,1,2,2,2,2,2,3,2,3,3,3,3,2,2,2,2,2,3,2,1,2,2,3,2,2,2,2,2,1,2,3,2,3,2,3],"f":[0,0,0,0,[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[]],[[]],[[]],[[]],[[[3,[1]]]],[[[3,[1]]]],[[[3,[1]]]],[[[2,[1]],4],[[3,[1]]]],[[[2,[1]],5],6],[[[2,[1]],[7,[4]]]],[[]],[8,[[2,[1]]]],[[]],[9,[[2,[1]]]],[[]],[[[2,[1]],10]],[[]],[[]],[[[2,[1]]],11],[[[2,[1]]],4],[[[2,[1]],[7,[4]],12],4],[[[2,[1]],[7,[4]],12],4],[9,[[2,[1]]]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14]],"p":[[8,"Ops"],[3,"Segtree"],[3,"Entry"],[15,"usize"],[3,"Formatter"],[6,"Result"],[8,"RangeBounds"],[3,"Vec"],[8,"IntoIterator"],[8,"SliceIndex"],[15,"bool"],[8,"FnMut"],[4,"Result"],[3,"TypeId"]]},\
"skew_heap":{"doc":"Meld のできるヒープ","t":"DLLLLLLLLLLLLLLLFLLLLLLLLLL","n":["SkewHeap","borrow","borrow_mut","clear","clone","clone_into","default","eq","extend","extend","fmt","from","from_iter","hash","into","into_sorted_vec","meld","meld","new","peek","pop","push","singleton","to_owned","try_from","try_into","type_id"],"q":["skew_heap","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Meld のできるヒープ","","","中身を殻にします。","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","ソート済みの <code>Vec</code> に変換します。","2 つの <code>SkewHeap</code> …","2 つの <code>SkewHeap</code> …","新しく構築します。","…","…","要素を一つ、追加します。","要素一つからなる <code>SkewHeap</code> を構築します。","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]]],[[[2,[3]]],[[2,[3]]]],[[]],[[],[[2,[1]]]],[[[2,[4]],2],5],[[[2,[1]],6]],[[[2,[[0,[7,1]]]],6]],[[[2,[[0,[8,1]]]],9],10],[[]],[6,[[2,[1]]]],[[[2,[11]]]],[[]],[[[2,[1]]],[[12,[1]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[1]],[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]]],13],[[[2,[1]]],[[13,[1]]]],[[[2,[1]],1]],[1,[[2,[1]]]],[[]],[[],14],[[],14],[[],15]],"p":[[8,"Ord"],[3,"SkewHeap"],[8,"Clone"],[8,"PartialEq"],[15,"bool"],[8,"IntoIterator"],[8,"Copy"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[3,"Vec"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"slicemore":{"doc":"<code>{lower,upper}_bound</code> and <code>partition_point</code>","t":"IFKFKFKFKFKFKFK","n":["SliceMore","lower_bound","lower_bound","lower_bound_by","lower_bound_by","lower_bound_by_key","lower_bound_by_key","partition_point","partition_point","upper_bound","upper_bound","upper_bound_by","upper_bound_by","upper_bound_by_key","upper_bound_by_key"],"q":["slicemore","","","","","","","","","","","","","",""],"d":["Method versions of functions.","Find $i$ s.t. $a _ { i - 1 } \\\\lt b \\\\le a _ i$.","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\in \\\\left \\\\lbrace …","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\lt b \\\\le f ( a _ i )$.","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\land \\\\neg f ( a _ i )$.","","Find $i$ s.t. $a _ { i - 1 } \\\\le b \\\\lt a _ i$.","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\in \\\\left \\\\lbrace …","","Find $i$ s.t. $f ( a _ { i - 1 } ) \\\\le b \\\\lt f ( a _ i )$.",""],"i":[0,0,3,0,3,0,3,0,3,0,3,0,3,0,3],"f":[0,[[],1],[[],1],[2,1],[2,1],[2,1],[2,1],[2,1],[2,1],[[],1],[[],1],[2,1],[2,1],[2,1],[2,1]],"p":[[15,"usize"],[8,"FnMut"],[8,"SliceMore"]]},\
"snippetter":{"doc":"","t":"HDHLLLLMLFLLLFFLMLLLL","n":["CRATE_METADATAS","CrateMetadata","PROJECT_ROOT","borrow","borrow_mut","clone","clone_into","dependencies","eq","find_project_root_path","fmt","from","into","main","parse_local_dependencies_from_cargo_toml","serialize","tags","to_owned","try_from","try_into","type_id"],"q":["snippetter","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1],"f":[0,0,0,[[]],[[]],[1,1],[[]],0,[[1,1],2],[[],3],[[1,4],5],[[]],[[]],[[]],[6,[[8,[7]]]],[1,9],0,[[]],[[],9],[[],9],[[],10]],"p":[[3,"CrateMetadata"],[15,"bool"],[3,"PathBuf"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"sort_tree":{"doc":"根付き木をトポロジカルソートします。","t":"FFFF","n":["remove_parent","sort_tree","sort_tree_by","sort_tree_remove_parent"],"q":["sort_tree","","",""],"d":["親を消します","根付き木をトポロジカルソートします。","根付き木をトポロジカルソートします。","…"],"i":[0,0,0,0],"f":[[[]],[1],[[1,2]],[1]],"p":[[15,"usize"],[8,"Fn"]]},\
"space":{"doc":"","t":"FF","n":["implode","implode_space"],"q":["space",""],"d":["<code>separator</code> 区切りの文字列にします。","スペース区切りの文字列にします。"],"i":[0,0],"f":[[1,2],[[],2]],"p":[[15,"str"],[3,"String"]]},\
"sparse_table":{"doc":"Sparse table です。いまのところ Argmin …","t":"DLLLLLLLLLLLLLLLL","n":["SparseTableArgmin","borrow","borrow_mut","clone","clone_into","fmt","from","from_vec","get","index","into","min","query","to_owned","try_from","try_into","type_id"],"q":["sparse_table","","","","","","","","","","","","","","","",""],"d":["","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[[2,[3]],4],5],[[]],[[[7,[6]]],[[2,[6]]]],[[[2,[6]]],8],[2],[[]],[[[2,[6]],[10,[9]]],8],[[[2,[6]],[10,[9]]],[[8,[9]]]],[[]],[[],11],[[],11],[[],12]],"p":[[8,"Clone"],[3,"SparseTableArgmin"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Ord"],[3,"Vec"],[4,"Option"],[15,"usize"],[8,"RangeBounds"],[4,"Result"],[3,"TypeId"]]},\
"splay_tree":{"doc":"スプレー木です。","t":"QQDDQIDDIDIQQLKLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLKKLLLLLLLLLLLLLLLLLLLLL","n":["Acc","Acc","Entry","Iter","Lazy","LazyOps","NoLazy","Nop","Ops","SplayTree","Value","Value","Value","act","act_acc","act_acc","act_acc","act_value","act_value","act_value","append","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","compose","compose","compose","compose_to_option","default","delete","deref","deref_mut","drop","dump","entry","eq","fmt","fold","from","from","from","from","from","from_iter","get","hash","index","insert","into","into","into","into","into","into_iter","is_empty","iter","len","new","next","next_back","op","op","op","op","partial_cmp","proj","proj","proj","proj","range","reverse","split_off","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["splay_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["集約値型","集約値型","<code>SplayTree::entry</code> の戻り値型です。","<code>SplayTree::iter</code>, <code>SplayTree::range</code> の戻り値型です。","作用値型","集約と作用のトレイト","<code>Ops</code> を実装する型をラップして <code>LazyOps</code> …","集約も作用もなしの場合に使うトレイト","作用なしの場合に使うトレイト","スプレー木","<code>Sized</code>, <code>Debug</code>, <code>Clone</code> をまとめたトレイト","頂点重み型","頂点重み型","指定した範囲の要素すべてに作用します。","集約値への作用","","","頂点重みへの作用","","","…","","","","","","","","","","","","","","作用の合成","","","Option へ作用の合成","","指定した場所の要素を削除します。","","","","内部情報をダンプします。","…","","","指定した範囲の要素を畳み込みます。","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","…","","","指定した場所に挿入します。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","空ならば <code>true</code> を返します。","要素を順番に返すイテレータを返します。","要素数を返します。","空のスプレー木を構築します。","","","集約演算","集約演算","","","","集約化","集約化","","","…","指定した範囲の要素を逆順にします。","指定した場所以降を切り離して返します。","","","","","","","","","","","","","","","",""],"i":[15,1,0,0,1,0,0,0,0,0,0,15,1,2,1,16,17,1,16,17,2,16,17,2,12,7,16,17,2,12,7,2,2,2,1,16,17,1,2,2,7,7,2,2,2,2,2,2,16,17,2,12,7,2,2,2,2,2,16,17,2,12,7,12,2,2,2,2,12,12,15,1,16,17,2,15,1,16,17,2,2,2,2,16,17,2,12,7,16,17,2,12,7,16,17,2,12,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[4,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[[2,[1]],[2,[1]]],5],[[]],[[]],[[]],[6],[[],[[2,[1]]]],[[[2,[1]],3]],[[[7,[1]]]],[[[7,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]],3],[[6,[[7,[1]]]]]],[[[2,[1]],[2,[1]]],8],[[[2,[1]],9],10],[[[2,[1]],[4,[3]]],6],[[]],[[]],[[]],[[]],[[]],[11,[[2,[1]]]],[[[2,[1]],3],6],[[[2,[1]]]],[[[2,[1]],3]],[[[2,[1]],3]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],8],[[[2,[1]]],[[12,[1]]]],[[[2,[1]]],3],[[],[[2,[1]]]],[[[12,[1]]],6],[[[12,[1]]],6],[[]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[[2,[1]],[4,[3]]],[[12,[1]]]],[[[2,[1]],[4,[3]]]],[[[2,[1]],3],[[2,[1]]]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14]],"p":[[8,"LazyOps"],[3,"SplayTree"],[15,"usize"],[8,"RangeBounds"],[4,"Ordering"],[4,"Option"],[3,"Entry"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[3,"Iter"],[4,"Result"],[3,"TypeId"],[8,"Ops"],[3,"Nop"],[3,"NoLazy"]]},\
"suffix_array":{"doc":"Suffix Array を計算します。","t":"FF","n":["lcp_array","suffix_array"],"q":["suffix_array",""],"d":["LCP 配列を計算します。","Surrix Array を計算します。"],"i":[0,0],"f":[[[],[[2,[1]]]],[[],[[2,[1]]]]],"p":[[15,"usize"],[3,"Vec"]]},\
"swag":{"doc":"SWAG をします。","t":"DLLLLLLLLLLLLLLLLLLLLLLL","n":["Swag","borrow","borrow_mut","clone","clone_into","current_fold","current_index_range","current_window","default","end","eq","fmt","fold","fold_or","fold_or_else","from","hash","into","new","start","to_owned","try_from","try_into","type_id"],"q":["swag","","","","","","","","","","","","","","","","","","","","","","",""],"d":["SWAG をします。","","","","","現在の内部状態の window における aggregation …","現在の内部状態の始点・終点を <code>start..end</code> …","現在の内部状態の window …","","現在の内部状態の終点を返します。","","","与えられた区間における aggregation …","<code>fold</code> + <code>unwrap_or</code>","<code>fold</code> + <code>unwrap_or_else</code>","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","新しい <code>Swag</code> を構築します。","現在の内部状態の始点を返します。","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1,1,1]]],[[2,[1,1,1]]]],[[]],[2,3],[2,[[5,[4]]]],[2],[[],[[2,[6,6,6]]]],[2,4],[[[2,[7,7,7]],2],8],[[2,9],10],[[2,[11,[4]]],3],[[2,[11,[4]]]],[[2,[11,[4]],12]],[[]],[[[2,[13,13,13]]]],[[]],[[],2],[2,4],[[]],[[],14],[[],14],[[],15]],"p":[[8,"Clone"],[3,"Swag"],[4,"Option"],[15,"usize"],[3,"Range"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"RangeBounds"],[8,"FnOnce"],[8,"Hash"],[4,"Result"],[3,"TypeId"]]},\
"table":{"doc":"Format <code>Vec&lt;Vec&lt;T&gt;&gt;</code> etc. in a table style.","t":"DLLLLLLLLLLLLLLFLLLL","n":["Table","borrow","borrow_mut","clone","clone_into","cmp","column_width","eq","fmt","from","heading_newlines","index_width","into","new","partial_cmp","table","to_owned","try_from","try_into","type_id"],"q":["table","","","","","","","","","","","","","","","","","","",""],"d":["A builder type.","","","","","","Change the width of value columns.","","","Returns the argument unchanged.","Change the number of newlines on the head.","Change the width of the index column.","Calls <code>U::from(self)</code>.","Create a new table. You also can use <code>table()</code>","","A fuctory function.","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1,1,1]]],[[2,[1,1,1]]]],[[]],[[[2,[3,3,3]],2],4],[[2,5],2],[[[2,[6,6,6]],2],7],[[2,8],9],[[]],[[2,5],2],[[2,5],2],[[]],[[],2],[[[2,[10,10,10]],2],[[11,[4]]]],[12,[[2,[[0,[1,13]],12,12]]]],[[]],[[],14],[[],14],[[],15]],"p":[[8,"Clone"],[3,"Table"],[8,"Ord"],[4,"Ordering"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"PartialOrd"],[4,"Option"],[8,"AsRef"],[8,"Debug"],[4,"Result"],[3,"TypeId"]]},\
"tree_fold":{"doc":"木 DP をします。","t":"QIQKKKKLLLL","n":["Acc","Ops","Value","finish","identity","mul","proj","tree_fold","tree_fold_by_iter","two_way_tree_fold","two_way_tree_fold_by_iter"],"q":["tree_fold","","","","","","","","","",""],"d":["","畳み込み演算を定義します。","","","","","","","","",""],"i":[4,0,4,4,4,4,4,4,4,4,4],"f":[0,0,0,[1],[[]],[[]],[[]],[1,2],[[1,1,3],2],[1,2],[[1,1,3],2]],"p":[[15,"usize"],[3,"Vec"],[8,"Fn"],[8,"Ops"]]},\
"trial":{"doc":"Execute the trial-division algorithm.","t":"DDDILLLLLLLFFLLLKLLLLLLLLLKFFLLLLLLLLLK","n":["Divisors","PrimeFactors","PrimeFactorsRle","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","divides","divisors","divisors_unordered","from","from","from","increment","into","into","into","into_iter","into_iter","into_iter","next","next","next","one","prime_factors","prime_factors_rle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":["trial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["See the document of a function <code>divisors_unordered</code>","See the document of a function <code>prime_factors</code>","See the document of a function <code>prime_factors_rle</code>","Abstraction of unsigned integers.","","","","","","","Returns <code>true</code> if and only if <code>self</code> divides <code>n</code>.","Returns a <code>Vec</code> of the divisors. The divisors is guaranteed …","Takes an unsigned integer and returns an iterator to yield …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Increment <code>self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns <code>1</code>.","Takes an unsigned integer and returns an iterator to yield …","Takes an unsigned integer and returns an iterator to yield …","","","","","","","","","","Returns <code>0</code>."],"i":[0,0,0,0,4,6,7,4,6,7,2,0,0,4,6,7,2,4,6,7,4,6,7,4,6,7,2,0,0,4,6,7,4,6,7,4,6,7,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[2,[[3,[2]]]],[2,[[4,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[2]]],5],[[[6,[2]]],5],[[[7,[2]]],5],[[]],[2,[[7,[2]]]],[2,[[6,[2]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[]]],"p":[[15,"bool"],[8,"Value"],[3,"Vec"],[3,"Divisors"],[4,"Option"],[3,"PrimeFactorsRle"],[3,"PrimeFactors"],[4,"Result"],[3,"TypeId"]]},\
"trie":{"doc":"A set and map data structure on trie.","t":"RDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DEGREE","TrieMap","TrieSet","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","default","default","eq","eq","fmt","fmt","for_each","for_each_kv","for_each_prefix","for_each_prefix","from","from","get","get_mut","get_or_insert","get_or_insert_with","insert","insert","into","into","new","new","remove","remove","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["trie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Tries here have the fixed branching number 26.","A map base on a trie.","A set base on a trie.","","","","","","","","","Returns <code>true</code> if the set contains a value.","","","","","","","Visits all the values of a values in the trie, in …","Visits all the pairs of a key of a values in the trie, in …","Visits all the “existing” nodes corresponding to the …","Visits all the “existing” nodes corresponding to the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns a mutable reference to the value corresponding to …","Inserts a <code>value</code> at <code>key</code> if it is <code>None</code>, then returns a …","Inserts a value computed from <code>f</code> at <code>key</code> if it is <code>None</code>, then …","Inserts a key-value pair into the map.","Adds a value to the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Makes a new empty TrieMap.","Makes a new empty TrieMap.","Removes a key from the map, returning the stored key and …","Removes a value from the set. Returns whether the value was","","","","","","","",""],"i":[0,0,0,2,3,2,3,2,3,2,3,3,2,3,2,3,2,3,3,2,2,3,2,3,2,2,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3],"f":[0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[3,3],[[]],[[]],[[3,4],5],[[],2],[[],3],[[[2,[6]],2],5],[[3,3],5],[[[2,[7]],8],9],[[3,8],9],[[3,10]],[[2,10]],[[2,4,10]],[[3,4,10]],[[]],[[]],[[2,4],11],[[2,4],11],[[2,4]],[[2,4,12]],[[2,4],11],[[3,4],5],[[]],[[]],[[],2],[[],3],[[2,4],11],[[3,4],5],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14]],"p":[[8,"Clone"],[3,"TrieMap"],[3,"TrieSet"],[8,"IntoIterator"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"FnMut"],[4,"Option"],[8,"FnOnce"],[4,"Result"],[3,"TypeId"]]},\
"two_sat":{"doc":"2-SAT を解きます。","t":"DLLLLLLLLLLLLLLLLLL","n":["TwoSat","borrow","borrow_mut","build","clone","clone_into","default","eq","fmt","from","hash","implies","into","new","solve","to_owned","try_from","try_into","type_id"],"q":["two_sat","","","","","","","","","","","","","","","","","",""],"d":["2-SAT の本体です。","","","","","","","","","Returns the argument unchanged.","","<code>(x == a) -&gt; (y == b)</code> をかつでつなぎます。","Calls <code>U::from(self)</code>.","<code>n</code> 個の不定元を持つ Always true を作ります。","充足する割り当てがあれば返し、なければ …","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1],[1,1],[[]],[[],1],[[1,1],2],[[1,3],4],[[]],[1],[[1,5,2,5,2]],[[]],[5,1],[1,[[7,[[6,[2]]]]]],[[]],[[],8],[[],8],[[],9]],"p":[[3,"TwoSat"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"Vec"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"uf_checklist":{"doc":"Union-find …","t":"DDLLLLLLLLLLLLLLLOLLLLLLLLLLL","n":["Iter","UfChecklist","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","fmt","fmt","from","from","into","into","into_iter","is_checked","lg","lower_bound","new","next","range_check","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["uf_checklist","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>UfChecklist::range_check</code> が返すイテレータです。","…","","","","","指定した場所をチェックします。","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","指定した場所がチェック済みならば <code>true</code> …","","…","区間 [0, n[ …","","区間 <code>range</code> …","","","","","","",""],"i":[0,0,1,6,1,6,1,1,1,1,6,1,6,1,6,6,1,0,1,1,6,1,1,1,6,1,6,1,6],"f":[0,0,[[]],[[]],[[]],[[]],[[1,2],3],[1,1],[[]],[[1,4],5],[[6,4],5],[[]],[[]],[[]],[[]],[[]],[[1,2],3],0,[[1,2],[[7,[2]]]],[2,1],[6,7],[[1,[8,[2]]],6],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"p":[[3,"UfChecklist"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Iter"],[4,"Option"],[8,"RangeBounds"],[4,"Result"],[3,"TypeId"]]},\
"union_find":{"doc":"Union Find です。","t":"EEIDQEKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLL","n":["EdgeCount","HasCycle","Op","UnionFind","Value","VertexCount","add_edge","add_edge","add_edge","add_edge","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","eq","find","find_mut","fmt","from","from","from","from","from_values","get_value","graft","graft","graft","graft","hash","into","into","into","into","is_root","new","same","singleton","singleton","singleton","singleton","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","value","value_mut"],"q":["union_find","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["辺の本数","サイクルがあるとき、<code>true</code>","…","","頂点重み型","頂点の個数","連結成分に辺を１本追加したとき","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","…","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","<code>UnionFind::new()</code> で構築したときのデフォルト値","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,2,0,2,14,15,16,14,15,16,3,14,15,16,3,3,3,3,3,3,3,3,14,15,16,3,3,3,2,14,15,16,3,14,15,16,3,3,3,3,2,14,15,16,3,14,15,16,3,14,15,16,3,14,15,16,3,3,3,3],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[],[[3,[[0,[4,2]]]]]],[[[3,[[0,[5,2]]]],3],6],[[[3,[2]],7],7],[[[3,[2]],7],7],[[[3,[2]],8],9],[[]],[[]],[[]],[[]],[10,[[3,[2]]]],[[[3,[2]],7]],[[]],[[]],[[]],[[]],[[[3,[[0,[11,2]]]]]],[[]],[[]],[[]],[[]],[[[3,[2]],7],6],[7,[[3,[2]]]],[[[3,[2]],7,7],6],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[[3,[2]],7,7],6],[[[3,[2]],7]],[[[3,[2]],7]]],"p":[[8,"Clone"],[8,"Op"],[3,"UnionFind"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[8,"Hash"],[4,"Result"],[3,"TypeId"],[4,"EdgeCount"],[4,"VertexCount"],[4,"HasCycle"]]},\
"vec_lines":{"doc":"傾き単調な直線の列を <code>Vec</code> で管理します。","t":"IEEDIDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLL","n":["Constraint","DecreasingTilt","IncreasingTilt","Line","Signed","VecLines","VecLinesDecreasing","VecLinesIncreasing","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","eq","eq","eq","eq","eval","eval_gcc","fmt","fmt","fmt","fmt","from","from","from","from","get","hash","hash","hash","hash","into","into","into","into","into_coeff","is_empty","iter_copied","len","new","ok","ok","ok","push","strictly_better","strictly_better","strictly_better","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["vec_lines","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["…","傾き単調減少を意味するマーカー","傾き単調増加を意味するマーカー","一次関数 $ax + b$ を、<code>[a, b]</code> …","符号つき整数","傾き単調な直線の列を <code>Vec</code> で管理します。","傾きが単調減少な直線の列を管理します。","傾きが単調増加な直線の列を管理します。","","","","","","","","","","","","","","","","","","","","","","","特定の x 座標における値を計算します。","黄金分割探索で最適値を計算します。","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","index 番目の直線を返します。","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","係数を返します。","管理している直線が 0 本のとき <code>true</code>…","…","管理している直線の本数を返します。","傾き単調な直線の列を <code>Vec</code> で管理します。","","","","後ろに直線を挿入します。","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,2,3,2,3,4,5,3,2,2,3,4,5,2,3,4,5,2,2,3,4,5,2,3,4,5,3,2,2,2,2,7,4,5,2,7,4,5,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[[3,[1]]],[[3,[1]]]],[4,4],[5,5],[[]],[[]],[[]],[[]],[[],[[2,[6,7]]]],[[],[[3,[8]]]],[[[2,[9,9]],2],10],[[[3,[9]],3],10],[[4,4],10],[[5,5],10],[[[3,[6]],6],6],[[[2,[6,7]],6],[[11,[6]]]],[[[2,[12,12]],13],14],[[[3,[12]],13],14],[[4,13],14],[[5,13],14],[[]],[[]],[[]],[[]],[[[2,[6,7]],15],[[11,[[3,[6]]]]]],[[[2,[16,16]]]],[[[3,[16]]]],[4],[5],[[]],[[]],[[]],[[]],[[[3,[6]]]],[[[2,[6,7]]],10],[[[2,[6,7]]],17],[[[2,[6,7]]],15],[[],[[2,[6,7]]]],[[[3,[6]],[3,[6]]],10],[[[3,[6]],[3,[6]]],10],[[[3,[6]],[3,[6]]],10],[[[2,[6,7]]]],[[6,6],10],[[6,6],10],[[6,6],10],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19]],"p":[[8,"Clone"],[3,"VecLines"],[3,"Line"],[4,"DecreasingTilt"],[4,"IncreasingTilt"],[8,"Signed"],[8,"Constraint"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[4,"Option"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[8,"Hash"],[8,"Iterator"],[4,"Result"],[3,"TypeId"]]},\
"wavelet_matrix":{"doc":"ウェーブレット行列","t":"DDDDLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["SpanInNode","Spans","StaticBitVec","WaveletMatrix","access","access","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","depth","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","from_iter","from_iter_collect_vec2","from_slice_of_usize_mut","hash","hash","hash","hash","index","into","into","into","into","into_iter","is_empty","is_empty","len","len","next","next_value","prev_value","quantile","range_freq","rank","select","spans","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value"],"q":["wavelet_matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>Spans</code> のアイテム型です。詳しくは …","イテレータです 詳しくは <code>WaveletMatrix::spans</code> …","累積和のできる静的なビットベクター","ウェーブレット行列","<code>i</code> 番目の要素を返します。","<code>a[i]</code>","","","","","","","","","","","","","","","","","","","ウェーブレット行列内の <code>i</code> 座標","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","…","特に高速化の意図がなければ、<code>FromIterator</code> …","","","","","ウェーブレット行列内の <code>j</code> 座標の範囲","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","配列が空であれば <code>true</code> を返します。","<code>a.is_empty()</code>","配列の長さを返します。","<code>a.len()</code>","","<code>index</code> により指定された部分列のうち、 <code>value</code> …","<code>index</code> により指定された部分列のうち、 <code>value</code> …","<code>index</code> により指定された部分列のうち、 <code>value</code> …","<code>index</code> により指定された部分列のうち、 <code>value</code> …","<code>sum(a[..end])</code>","min i s.t. <code>target &lt;= sum(a[..i])</code>","対応する部分を、<code>(depth, index_range, value_range)</code> …","","","","","","","","","","","","","","","","","現在のノードの担当する値の範囲"],"i":[0,0,0,0,1,3,1,3,5,6,1,3,5,6,1,3,5,6,1,3,5,6,1,3,6,1,3,5,6,1,3,5,6,1,3,5,6,1,3,1,1,1,3,5,6,6,1,3,5,6,5,1,3,1,3,5,1,1,1,1,3,3,1,1,3,5,6,1,3,5,6,1,3,5,6,1,3,5,6,6],"f":[0,0,0,0,[[1,2],2],[[3,2],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[3,3],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],1],[[],3],0,[[1,1],4],[[3,3],4],[[5,5],4],[[6,6],4],[[1,7],8],[[3,7],8],[[5,7],8],[[6,7],8],[[]],[[]],[[]],[[]],[9,1],[9,3],[9],[10,1],[1],[3],[5],[6],0,[[]],[[]],[[]],[[]],[[]],[1,4],[3,4],[1,2],[3,2],[5,11],[[1,[12,[2]],[12,[2]]],[[11,[2]]]],[[1,[12,[2]],[12,[2]]],[[11,[2]]]],[[1,2,[12,[2]],[12,[2]]],[[11,[2]]]],[[1,[12,[2]],[12,[2]]],2],[[3,2],2],[[3,2],2],[[1,[12,[2]],[12,[2]]],5],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],0],"p":[[3,"WaveletMatrix"],[15,"usize"],[3,"StaticBitVec"],[15,"bool"],[3,"Spans"],[3,"SpanInNode"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[8,"FnMut"],[4,"Option"],[8,"RangeBounds"],[4,"Result"],[3,"TypeId"]]},\
"z_algorithm":{"doc":"","t":"F","n":["z_algorithm"],"q":["z_algorithm"],"d":["Z-アルゴリズムをします。"],"i":[0],"f":[[[],[[2,[1]]]]],"p":[[15,"usize"],[3,"Vec"]]},\
"zeta":{"doc":"…","t":"FFFFFFFFFFFFFFFFFF","n":["add","add_inv","add_rinv","aggr","bitand","bitor","bitxor","for_each","max","min","radd","rbitand","rbitor","rbitxor","rmax","rmin","rzeta","zeta"],"q":["zeta","","","","","","","","","","","","","","","","",""],"d":["+ でゼータ変換","(+, -) でメビウス変換","反転束において (+, -) でメビウス変換","すべての添字集合に関して (二項演算 f, …","bit-and でゼータ変換","bit-or でゼータ変換","bit-xor でゼータ変換","…","max でゼータ変換","min でゼータ変換","反転束において + でゼータ変換","反転束において bit-and でメビウス変換","反転束において bit-or でメビウス変換","反転束において bit-xor でメビウス変換","反転束において max でメビウス変換","反転束において min でメビウス変換","反転束において、<code>f</code> …","<code>f</code> を加法とするゼータ変換をします。"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[]],[[]],[[]],[[1,2],[[3,[2]]]],[[]],[[]],[[]],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1]],"p":[[8,"Fn"],[8,"Copy"],[3,"Vec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
